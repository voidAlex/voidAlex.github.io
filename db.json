{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/wechat.png","path":"images/wechat.png","modified":0,"renderable":0},{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/cc.png","path":"img/cc.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.min.js","path":"js/main.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.min.js","path":"js/search.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/wechat.png","path":"img/wechat.png","modified":0,"renderable":1},{"_id":"source/images/alipay.png","path":"images/alipay.png","modified":0,"renderable":0},{"_id":"themes/indigo/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/indigo/.editorconfig","hash":"67a03b88eadd7810f2e01866e73814074ecd3b87","modified":1519122706000},{"_id":"themes/indigo/LICENSE","hash":"9dd0f70bc72c9d575447655526aded395bb93754","modified":1519122706000},{"_id":"themes/indigo/README.md","hash":"480f6efbd0fcf50308b22bc3af7a8c79e56601f8","modified":1519122706000},{"_id":"themes/indigo/_config.yml","hash":"cab813e7fbd6c03704433f2b0de58be8d8039460","modified":1519183141714},{"_id":"themes/indigo/package.json","hash":"3ad9b9ccb1ddaad3136f179a7ebff7d7b1c193f7","modified":1519122706000},{"_id":"source/_discarded/Test.md","hash":"db89bc0346bf6a278fae92e3b095377dee8735da","modified":1519102726921},{"_id":"source/_posts/CentOS7下安装Docker.md","hash":"dae8c980d58c10ddb7ce528ef379ce1486da504e","modified":1510305951000},{"_id":"source/_posts/Docker下快速安装MySQL并使用数据卷容器.md","hash":"0fc39ce32816e3ef604dfd235705d6812d3703e0","modified":1510305982000},{"_id":"source/_posts/Docker容器间的互联.md","hash":"e5abd3c1607ce6040a2e8bacd007369aa0f2fad5","modified":1510306017000},{"_id":"source/_posts/Gitlab不靠谱搭建指南.md","hash":"fc19ff4d8979834e467dc4290bc50a95213cf5b3","modified":1510306065000},{"_id":"source/_posts/Google-Java-Style-Guide在IntelliJ-IDEA中的配置.md","hash":"6e8893923ed06396385a237c6b64d1369136bca3","modified":1510306070000},{"_id":"source/_posts/Java爬虫：爬取妹子图.md","hash":"7a541f4d771134fd1d69e0613279cc50a433452f","modified":1500526585000},{"_id":"source/_posts/Java爬虫：爬取学校教务管理系统的信息.md","hash":"71e8f1e2ee1b8ab5ff3c24b2ea1d7f56d85395f8","modified":1499743949000},{"_id":"source/_posts/Java补锅笔记：利用反射获得对象的信息.md","hash":"1a6c2cd6767138c79ab46f1774d46a22f1309363","modified":1510306112000},{"_id":"source/_posts/Java补锅笔记：反射机制.md","hash":"fa9482db4fed67fafed9510d498c369a10faf832","modified":1510306133000},{"_id":"source/_posts/hello-world.md","hash":"6560c1728681f364a0b080f7e1c06bb841cc05f8","modified":1499484265000},{"_id":"source/_posts/一种在服务器上部署Hexo博客的思路.md","hash":"d6fdebeab5a179168ba299c640e1f046ae68800c","modified":1519205461149},{"_id":"source/_posts/使用Docker打包和部署Spring-Boot应用.md","hash":"d077e71eb9986c06a06ae9cf74f54cf3c4929b1b","modified":1510306192000},{"_id":"source/_posts/使用PageRank算法计算球队排名.md","hash":"2bd63a024f9801731a5c54b882eb582616907beb","modified":1499996321000},{"_id":"source/_posts/数据归一化的方法.md","hash":"e6094c2b15c2685c629267e4c73597c1c418bfd2","modified":1503048073000},{"_id":"source/_posts/理解Docker中的三大核心概念：镜像、容器、仓库.md","hash":"f656e1c7ae041c65770664f212caf40fac13142f","modified":1509892169000},{"_id":"source/_posts/理解Spring中的依赖注入.md","hash":"49af01edad19c1ee75f27aa5cee386944ac14758","modified":1510305850000},{"_id":"source/_posts/算法笔记：K-means算法及Java实现.md","hash":"31121c46ba07c912a425dad71d4216b3b54d94ad","modified":1503454420000},{"_id":"source/_posts/算法笔记：Top-N算法及Java实现.md","hash":"12f9e22bb432f3ecd3df8a7bfe629ef96f08a7a4","modified":1510306206000},{"_id":"source/_posts/算法笔记：一元线性回归及Java实现.md","hash":"25821ac082eba55fba817ace8c1badd5f43c0ca8","modified":1501465466000},{"_id":"source/about/index.md","hash":"130b62c3eb2044505eebacb19a58e11439badb3b","modified":1519127580000},{"_id":"source/categories/index.md","hash":"25fe6c60e304ba9a2b52fe63c88109935bb9e0cf","modified":1519123394000},{"_id":"source/tags/index.md","hash":"31767dc25df7794eb49b04441bef625232aea57a","modified":1519123364000},{"_id":"themes/indigo/.git/HEAD","hash":"da237e0de55301608e7c572e119ab5c4e43c0e85","modified":1519122706000},{"_id":"themes/indigo/.git/config","hash":"a15105d7ceffae664ad108699dcf7e7c4b2f0adb","modified":1519122706000},{"_id":"themes/indigo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1519122686000},{"_id":"themes/indigo/.git/index","hash":"ba47b49715dca4d56b333730dc5f9c4381cdeee1","modified":1526997244994},{"_id":"themes/indigo/.git/packed-refs","hash":"d1fcab6b99d9775f458da97b6635e38263ecaa6d","modified":1519122706000},{"_id":"themes/indigo/languages/en.yml","hash":"420a082a29200391e588c4aa54006493e352b906","modified":1519180686000},{"_id":"themes/indigo/languages/ja.yml","hash":"65a32717335211a45771a21fb7d7778808c6f0aa","modified":1519093904000},{"_id":"themes/indigo/languages/nl-NL","hash":"b540b76af76c1a180c517089ed2ad770cbded170","modified":1519093904000},{"_id":"themes/indigo/languages/zh-CN.yml","hash":"b60f20785f8c938e3bc7bbd9de060d20b533a777","modified":1519180726000},{"_id":"themes/indigo/languages/zh-TW.yml","hash":"7967ae34d7013d417959b4f105767b039ecc8797","modified":1519180608000},{"_id":"themes/indigo/layout/archive.ejs","hash":"6897178ba358379d6a4b7c0ba1bc2ab97ad5303a","modified":1519122706000},{"_id":"themes/indigo/layout/categories.ejs","hash":"efae06b4d83aaf73ab93260381e891825bf404ac","modified":1519122706000},{"_id":"themes/indigo/layout/category.ejs","hash":"e5ba5cc2e092c199285b8097ef12ffe70bf84c91","modified":1519122706000},{"_id":"themes/indigo/layout/index.ejs","hash":"772c1985c7743e101598b4eddc253f9174c5605b","modified":1519122706000},{"_id":"themes/indigo/layout/layout.ejs","hash":"770af84fff104c398ce8b6c995130cddd3e9a1e9","modified":1519122706000},{"_id":"themes/indigo/layout/page.ejs","hash":"567c42b978da4c39b8b4982df19b940c26bc32a4","modified":1519122706000},{"_id":"themes/indigo/layout/post.ejs","hash":"efc3352828351f8574c51e8a93dc56c66660c3b1","modified":1519122706000},{"_id":"themes/indigo/layout/tag.ejs","hash":"90a231dea3a364b329a740e5d6c49c8cf5664fe9","modified":1519122706000},{"_id":"themes/indigo/layout/tags.ejs","hash":"1fc0461e9602b53899ec756e4361beb8cce74740","modified":1519122706000},{"_id":"themes/indigo/scripts/plugins.js","hash":"00ea278ea77733f546439aed507ce69a298da362","modified":1519122706000},{"_id":"source/images/wechat.png","hash":"b19f5a779720f1356b10295da77b2191276d76b7","modified":1488473234000},{"_id":"themes/indigo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1519122686000},{"_id":"themes/indigo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1519122686000},{"_id":"themes/indigo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1519122686000},{"_id":"themes/indigo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1519122686000},{"_id":"themes/indigo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1519122686000},{"_id":"themes/indigo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1519122686000},{"_id":"themes/indigo/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1519122686000},{"_id":"themes/indigo/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1519122686000},{"_id":"themes/indigo/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1519122686000},{"_id":"themes/indigo/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1519122686000},{"_id":"themes/indigo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1519122686000},{"_id":"themes/indigo/.git/logs/HEAD","hash":"ae9c651bef6fe2288bb74e1329feabd73b85fae1","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"1351dbfca311f0d50a939f9e1a91c4f65bbcdf5f","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"c294c98617ce14082f9b3d5eec83328f480f5597","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"c78444f5b350ca79b260361bf3e5b6361d2661ba","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"acde2dd615512eb63d7a98e854d16b6cf2f5be86","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"648db446567a81371b8a29d719d13636aa157012","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/index-item.ejs","hash":"7208d4083ee3355aa969972a2ce249a67d56b3a6","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"8b3e037dd5f3d4564012689c5cd6f63caf73df0f","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/menu.ejs","hash":"ea6aded24a68de0914f24b3760f766b5e1c9835a","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/paginator.ejs","hash":"13952250463f70d1c1bbbfdd7f4ee8160dd6d99b","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/post.ejs","hash":"20597ac0d547aea37680ecf195eb129fe5ee19d8","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"31052bc524a10abd6871aed2415448ce585faff2","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/search.ejs","hash":"752109904304fdb8e988ee1254df2af9c0701466","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/tags-bar.ejs","hash":"30ec74f081cc4c273a7bcd5d57da99072e9f0755","modified":1519122706000},{"_id":"themes/indigo/source/css/style.less","hash":"cf362925ae099b810fd5763e6b724b823612ed15","modified":1519122706000},{"_id":"themes/indigo/source/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1519122706000},{"_id":"themes/indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1519122706000},{"_id":"themes/indigo/source/img/favicon.ico","hash":"6a26e3861552f9d776eac85dda16af81690e3a5f","modified":1526983084000},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1519122706000},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1519122706000},{"_id":"themes/indigo/source/js/main.js","hash":"ff44bb7b2f1f08757093fd6ffa92c9ac2b674109","modified":1519122706000},{"_id":"themes/indigo/source/js/main.min.js","hash":"e77a89fe5a9827ac590a288778176b233dd900ad","modified":1519122706000},{"_id":"themes/indigo/source/js/search.js","hash":"a4d6c9c566ec1ca71ddacfd14c58f7ddaf9db24d","modified":1519122706000},{"_id":"themes/indigo/source/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1519122706000},{"_id":"themes/indigo/source/img/wechat.png","hash":"4915ccc2b8ae5894698d3322cd98c0b424e656ac","modified":1519129548000},{"_id":"themes/indigo/.git/objects/pack/pack-c2032db4b5d2635f86e8a47c43377ec25100122c.idx","hash":"a283a826f8aa0ae02ac454d3fe58359fe7058eb2","modified":1519122706000},{"_id":"themes/indigo/.git/refs/heads/card","hash":"a61c3555d5da3cfd3e1245ed4adcc41ba9c91671","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/plugins/baidu.ejs","hash":"da1355eea131952031e54c45560555e6d3aa5a33","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/plugins/disqus.ejs","hash":"86fe837ab16cb60754b0a73bb9efa38b04f3023f","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/plugins/dynamic-title.ejs","hash":"3b877868c4a6fc217ea6f3314544830280a77472","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/plugins/gitment.ejs","hash":"5f6ceb7f4b9b579e8e3f87894447f556a53f9385","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/plugins/google-analytics.ejs","hash":"b5b87761751a897949e085a8f1ace78b0b8babd5","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/plugins/mathjax.ejs","hash":"3a5c9f7d22d30cd8ffa4e83a8d3976db22815994","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/plugins/page-visit.ejs","hash":"bb9deb32c54ea6820f622b923e62592915e9f21f","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/plugins/site-visit.ejs","hash":"a2c247c2e32016563dd6a22c21474072d93f4dbd","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/plugins/tajs.ejs","hash":"ef9c77d8c6e004b014c83c5f9333e7174f8bafa3","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/plugins/uyan.ejs","hash":"ddf290e90dc1c779f42a48e1bd852ca932148dfb","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/plugins/valine.ejs","hash":"0a6245da90d54177441d32a6f1766b4f434660db","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"c08e44cbd7315dec7afb6054b04d3c7b82c3bde8","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/post/comment.ejs","hash":"964d4ba32e628a7567c344c51a487c485d931c3d","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/post/copyright.ejs","hash":"dd1dcc7776021ab3d68065f8532efead4c2b8051","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"c5adcec8db1506c378d39855a697e1bb1165646c","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/post/head-meta.ejs","hash":"f137c126672769e9571be2bb0a70ea8dda644b0e","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"03719097851575a2c1bb95774058b224f6402a1f","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/post/reward-btn.ejs","hash":"b46160005224821a439dec9f1ff183e2f66d9f4b","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/post/reward.ejs","hash":"097c0276a61665e5ee96e5d5d85a7d6ae5ab2f49","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/post/share-fab.ejs","hash":"2ec7de870988cfbc8ea9872cddf7e4076ac64a57","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/post/share.ejs","hash":"7d79a67b3e5e6989f22fb0e0904fa540bfca5fcc","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"412894001b1ac6e63012b26b1109a0856651c076","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"eaad7af7888bddd7095243a43ff38f55ad8c494a","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/post/toc.ejs","hash":"d534b888d24df7703c632539d4bdd638fa764e98","modified":1519122706000},{"_id":"themes/indigo/layout/_partial/post/updated.ejs","hash":"00fedf7971c0bda0623d968bc0614e512d19a985","modified":1519122706000},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"382fc22cd5cc073e881768a65600d97eba9f1d21","modified":1519122706000},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"f047c8ca92f9e6a8e1299ace0cce91514631a21c","modified":1519122706000},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"bad63006b3bd4849bf53ad38482af0d9971061d3","modified":1519122706000},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"880b4a28e97d556ed15b07642d25115f9b6ba4f6","modified":1519122706000},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"99e48793dc0b4ffb66ecaf2d1315145872f9bb98","modified":1519122706000},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"5f783f34bf093e654e8922ed4a2af8b7b2cd41c4","modified":1519122706000},{"_id":"themes/indigo/source/css/_partial/lightbox.less","hash":"38419aaf3c1832e84ade331f051f110fdc8b960f","modified":1519122706000},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"85157ddf3877b5c58e8f1d737dda3dfb1bfd540b","modified":1519122706000},{"_id":"themes/indigo/source/css/_partial/page.less","hash":"33b0a5edcedc26a4c592c812c5785bb20d3c93db","modified":1519122706000},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"516cded3c7f1db4cacfa898bcaf0adfae7f3a2e1","modified":1519122706000},{"_id":"themes/indigo/source/css/_partial/reward.less","hash":"f5e89ea5414e3096a28c8c96e86c3f669040a892","modified":1519122706000},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"3e457942995da8840e7662fa6cb551a7e12ea294","modified":1519122706000},{"_id":"themes/indigo/source/css/_partial/search.less","hash":"dbc23e77e586ee682a21475f5eb568628ea6720f","modified":1519122706000},{"_id":"themes/indigo/source/css/_partial/share.less","hash":"a683c96a59470efd35722b763c55149a46e35156","modified":1519122706000},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"01eb7f84193180928a6ed4796ee8802f6c1628e7","modified":1519122706000},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"3232e75f4653402c9fbd7bda5b97c05ecc31db2b","modified":1519122706000},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"a02eaa601887f947257f6016679b62dc96a61c0c","modified":1519122706000},{"_id":"themes/indigo/source/css/_plugin/valine.less","hash":"b8f8d8037fb3c8525da12e580bd9e2ff9f298132","modified":1519122706000},{"_id":"source/images/alipay.png","hash":"083fe9a277b853aac006c55756ee39e5dfae7e8c","modified":1488473332000},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"a3ecbd6ccf5b56ac39df710c34a149b82989a498","modified":1519122706000},{"_id":"themes/indigo/source/img/avatar.png","hash":"329201148b63aeb2e915c0282058b18d4c32af8a","modified":1526983142000},{"_id":"themes/indigo/.git/logs/refs/heads/card","hash":"ae9c651bef6fe2288bb74e1329feabd73b85fae1","modified":1519122706000},{"_id":"themes/indigo/.git/refs/remotes/origin/HEAD","hash":"7f141be72288af81f8e55d94df5da3f87101e8f1","modified":1519122706000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1519122706000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1519122706000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1519122706000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1519122706000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1519122706000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1519122706000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1519122706000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1519122706000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1519122706000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1519122706000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1519122706000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1519122706000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1519122706000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1519122706000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1519122706000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1519122706000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1519122706000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1519122706000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1519122706000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1519122706000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1519122706000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1519122706000},{"_id":"themes/indigo/.git/logs/refs/remotes/origin/HEAD","hash":"ae9c651bef6fe2288bb74e1329feabd73b85fae1","modified":1519122706000},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1519122706000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1519122706000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1519122706000},{"_id":"source/images/avatar.png","hash":"9dd427e2c459d24b5c000be35cf16df1eb52181c","modified":1526981215000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1519122706000},{"_id":"themes/indigo/.git/objects/pack/pack-c2032db4b5d2635f86e8a47c43377ec25100122c.pack","hash":"f632da9516bc7b88e07bbc2bd8c660b44fb61ab4","modified":1519122706000},{"_id":"public/atom.xml","hash":"dc3b1ddbc97bab22d73c888e5f0e8d788b0ec6c7","modified":1526982374881},{"_id":"public/content.json","hash":"0ccbb0e0e17809204abbfac774342b6a6e42d616","modified":1526982376032},{"_id":"public/about/index.html","hash":"3ab454d4b0ef79672551396e92e2a5e90440d8e5","modified":1526982376095},{"_id":"public/categories/index.html","hash":"d6f63356f58f5b7b1cde63785543d2951b4c2a04","modified":1526982376096},{"_id":"public/2017/03/02/hello-world/index.html","hash":"a47771f6e256e83365b0912538715c260af7e018","modified":1526982376096},{"_id":"public/archives/2017/03/index.html","hash":"8af87d222955a74113637f60a8f6e0fc9883ec75","modified":1526982376096},{"_id":"public/archives/2017/07/index.html","hash":"776f5605300eccfc98c8904bae6272d52accb0fd","modified":1526982376096},{"_id":"public/archives/2017/08/index.html","hash":"7522b148fdd5384451960aca039872f100b556e1","modified":1526982376096},{"_id":"public/archives/2018/index.html","hash":"de3c53dfe5d07bde108c5e5d306d4d040f9cc7b5","modified":1526982376096},{"_id":"public/archives/2018/02/index.html","hash":"34608e9b87f6e4b47fde3508e17bfbb094ae3fed","modified":1526982376096},{"_id":"public/tags/MySQL/index.html","hash":"6f7466fa938047a8983dcc4ce6ae2bd45449dad1","modified":1526982376097},{"_id":"public/tags/Gitlab/index.html","hash":"15d703b5cb7ccef6c5716a320680b493d2c08101","modified":1526982376097},{"_id":"public/tags/杂记/index.html","hash":"b454d7f38f740fd649e25f913da2584becb8484c","modified":1526982376097},{"_id":"public/tags/爬虫/index.html","hash":"e8a53f8404358742b011feebb1f84b83153fe10e","modified":1526982376097},{"_id":"public/tags/补锅笔记/index.html","hash":"08d5b577e333f180f791a4fef86523b6e98956f5","modified":1526982376097},{"_id":"public/tags/反射/index.html","hash":"f614c201194706460637034bca4e837a4214edc5","modified":1526982376097},{"_id":"public/tags/随笔/index.html","hash":"549014bc903673a6a105053bf767608b56c7461c","modified":1526982376097},{"_id":"public/tags/Spring-Boot/index.html","hash":"4c29369f4fa7c919b5c01aa32fa62e678910ac22","modified":1526982376097},{"_id":"public/tags/数据挖掘/index.html","hash":"a7a935bb2c4eb8f21a283c081f2fff75d8696a65","modified":1526982376097},{"_id":"public/tags/足球/index.html","hash":"79a5e74169152175de22cfc166c270adf37175d0","modified":1526982376097},{"_id":"public/tags/数据分析/index.html","hash":"54eb91ca0aad99a2150da1849db093fca461b8e9","modified":1526982376098},{"_id":"public/tags/Spring/index.html","hash":"f32a4b4176671ca48c28889cb6b046b0fbe91ca3","modified":1526982376098},{"_id":"public/tags/机器学习/index.html","hash":"fd210c129038e6bda752e7a6b20b237f950d4eee","modified":1526982376098},{"_id":"public/tags/排序/index.html","hash":"9a37ca5ce8b6aa62cd365309c7cc39bda939fc0b","modified":1526982376098},{"_id":"public/tags/index.html","hash":"907116987d323b1d7acf9bd8f24ef6c57885a5e4","modified":1526982376098},{"_id":"public/2018/02/19/一种在服务器上部署Hexo博客的思路/index.html","hash":"e16aabd9cb203f82d34bdf55682516b5757f925f","modified":1526982376098},{"_id":"public/2017/11/09/理解Spring中的依赖注入/index.html","hash":"6558edb7ad5ecba7cd04796ccffb48e7af3a5797","modified":1526982376098},{"_id":"public/2017/11/08/Docker容器间的互联/index.html","hash":"3a518e01c0bc1cf4c0a1ff11165903147b185907","modified":1526982376099},{"_id":"public/2017/11/06/Docker下快速安装MySQL并使用数据卷容器/index.html","hash":"faf699dcf8d0aee98c6d7344007891a8d7319a4e","modified":1526982376099},{"_id":"public/2017/11/06/CentOS7下安装Docker/index.html","hash":"1fcace6f97a04623e3ebc73801b2c3305181c7da","modified":1526982376099},{"_id":"public/2017/11/05/理解Docker中的三大核心概念：镜像、容器、仓库/index.html","hash":"59c1a9ac78cdc6498e6b9ab8bc648f525372fece","modified":1526982376099},{"_id":"public/2017/11/04/Google-Java-Style-Guide在IntelliJ-IDEA中的配置/index.html","hash":"250fa03b4ff39c3db32e9f0249ff1a93af4c145e","modified":1526982376099},{"_id":"public/2017/11/04/使用Docker打包和部署Spring-Boot应用/index.html","hash":"b90fab757cae50670226b4a53bfa0ebeee05aa42","modified":1526982376099},{"_id":"public/2017/11/02/Java补锅笔记：利用反射获得对象的信息/index.html","hash":"57bafe932325543294d5a343880c65a723f7f9d2","modified":1526982376099},{"_id":"public/2017/11/02/Java补锅笔记：反射机制/index.html","hash":"c0aa1569c37ff8f1f2a7a00539aa599ab51648d1","modified":1526982376100},{"_id":"public/2017/11/01/Gitlab不靠谱搭建指南/index.html","hash":"ff5d3b90b712c9023d636e6b205704edcf29a420","modified":1526982376100},{"_id":"public/2017/08/21/算法笔记：Top-N算法及Java实现/index.html","hash":"261a60a953948390d42fbd20be69d93b94dba5d5","modified":1526982376100},{"_id":"public/2017/08/20/算法笔记：K-means算法及Java实现/index.html","hash":"b03d59daefb9be6a4ed1a457fe44b242d09e9cb5","modified":1526982376100},{"_id":"public/2017/08/18/数据归一化的方法/index.html","hash":"1b7b075d2187e7d179b69f21c3be61fee08f1c2d","modified":1526982376100},{"_id":"public/2017/07/23/算法笔记：一元线性回归及Java实现/index.html","hash":"6b79578834611f06bddca551daeeb6e2aee5f0a5","modified":1526982376100},{"_id":"public/2017/07/20/Java爬虫：爬取妹子图/index.html","hash":"065a6fec5424bda90ebfff1917297e9ff9563618","modified":1526982376101},{"_id":"public/2017/07/09/Java爬虫：爬取学校教务管理系统的信息/index.html","hash":"6ec04951698299c60c891500a4d2c3074d5b2a88","modified":1526982376101},{"_id":"public/2017/07/08/使用PageRank算法计算球队排名/index.html","hash":"f781b0a4b1b159e04a2f835de6bfddbdca83e222","modified":1526982376101},{"_id":"public/archives/index.html","hash":"b56a7a6824520db781d621f5b30d9ded8dab1b26","modified":1526982376101},{"_id":"public/archives/page/2/index.html","hash":"dcf6fd1a39887ba61734bbc4bcb99aadd6712656","modified":1526982376101},{"_id":"public/archives/2017/index.html","hash":"6a8aa080f643cf1537b5a9a3eb38a02bf170bc75","modified":1526982376101},{"_id":"public/archives/2017/page/2/index.html","hash":"a1c283d4d48772059c5828e83e7d85f7fa5f1c60","modified":1526982376101},{"_id":"public/archives/2017/11/index.html","hash":"210d87a079fd011054b325619cf037b0ae6e44c1","modified":1526982376101},{"_id":"public/index.html","hash":"c6764c96d536885ef8ef6c12eaacc9c3fdb2e7fe","modified":1526982376101},{"_id":"public/page/2/index.html","hash":"78fb71bf7685ec3a646722d9c2af6049dd8e10ba","modified":1526982376102},{"_id":"public/tags/Docker/index.html","hash":"420f4d600beb390601ccf3035dec2a4e8e3ecd78","modified":1526982376102},{"_id":"public/tags/配置/index.html","hash":"b3e76b312026d982b0a644d3251140c93ae9736f","modified":1526982376102},{"_id":"public/tags/Java/index.html","hash":"c523d4b4d5c8e8341497f950d218daa89e2b4516","modified":1526982376102},{"_id":"public/tags/算法/index.html","hash":"3e14ede8e4d847551478293a19e30d5ae04a543d","modified":1526982376102},{"_id":"public/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1526982376133},{"_id":"public/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1526982376133},{"_id":"public/img/favicon.ico","hash":"6a26e3861552f9d776eac85dda16af81690e3a5f","modified":1526983221165},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1526982376133},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1526982376134},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1526982376134},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1526982376134},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1526982376134},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1526982376134},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1526982376134},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1526982376134},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1526982376135},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1526982376135},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1526982376135},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1526982376135},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1526982376135},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1526982376135},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1526982376135},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1526982376136},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1526982376136},{"_id":"public/assets/algolia/algoliasearchLite.min.js","hash":"c12c5229d21bf401b5eb976d93f58bd2ea440126","modified":1526982376136},{"_id":"public/assets/algolia/algoliasearch.min.js","hash":"047450360b8f38a38d671f870245e1fecd240d74","modified":1526982376136},{"_id":"public/images/wechat.png","hash":"b19f5a779720f1356b10295da77b2191276d76b7","modified":1526982376173},{"_id":"public/img/wechat.png","hash":"4915ccc2b8ae5894698d3322cd98c0b424e656ac","modified":1526982376173},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1526982376174},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1526982376174},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1526982376174},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1526982376175},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1526982376182},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1526982376182},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1526982376183},{"_id":"public/assets/algolia/algoliasearchLite.js","hash":"445fb22a5c7d9190dc30cfe57ee8a3e13289cd01","modified":1526982376183},{"_id":"public/js/main.min.js","hash":"8acf4480f8ab859423b8926b9b790c67b5a77276","modified":1526982376205},{"_id":"public/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1526982376205},{"_id":"public/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1526982376205},{"_id":"public/js/main.js","hash":"300b2e963683ced162e28afcd24ffc970fc23ac2","modified":1526982376205},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1526982376205},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1526982376205},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1526982376205},{"_id":"public/assets/algolia/algoliasearch.js","hash":"058e6f06bf93a63babc7e0e280142dac6bcc56ca","modified":1526982376206},{"_id":"public/img/avatar.png","hash":"329201148b63aeb2e915c0282058b18d4c32af8a","modified":1526983221167},{"_id":"public/images/alipay.png","hash":"083fe9a277b853aac006c55756ee39e5dfae7e8c","modified":1526982376228},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1526982376232},{"_id":"public/css/style.css","hash":"27f88e278b738328b5acd28e88b5cb20daa490e6","modified":1526982376804},{"_id":"public/images/avatar.png","hash":"9dd427e2c459d24b5c000be35cf16df1eb52181c","modified":1526982376805}],"Category":[],"Data":[],"Page":[{"title":"关于","date":"2017-03-02T08:56:49.000Z","layout":"about","comments":0,"_content":"## 我\n目前就读于西北师范大学，专业是计算机科学与技术，2018年本科毕业。\n\n喜欢音乐，喜欢足球篮球，喜欢摄影，喜欢骑行，喜欢游戏，喜欢瞎折腾。\n\n会一点Java Web，会一点爬虫，会一点数据挖掘，会一点机器学习。\n\n努力学习中~\n\n有问题欢迎[微博](http://www.weibo.com/wangld1994)交流，也可以发邮件：wangld1994@gmail.com\n\n## 博客\n[Hexo](https://hexo.io/zh-cn/docs/)是一个快速，简单，强大的博客框架，使用教程可以参考[这里](https://zhuanlan.zhihu.com/p/25471760)。\n\n主题：[Next](https://github.com/iissnan/hexo-theme-next)\n\n评论：[Disqus](https://disqus.com/)\n\n分享按钮：[AddThis](https://www.addthis.com)\n\n站内搜索：[Algolia](https://www.algolia.com/)\n\n访问统计：[不蒜子](http://busuanzi.ibruce.info/)\n\n图床：[七牛云](https://www.qiniu.com/)+[极简图床](https://jiantuku.com/)","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2017-03-02 16:56:49\nlayout: about\ncomments: false\n---\n## 我\n目前就读于西北师范大学，专业是计算机科学与技术，2018年本科毕业。\n\n喜欢音乐，喜欢足球篮球，喜欢摄影，喜欢骑行，喜欢游戏，喜欢瞎折腾。\n\n会一点Java Web，会一点爬虫，会一点数据挖掘，会一点机器学习。\n\n努力学习中~\n\n有问题欢迎[微博](http://www.weibo.com/wangld1994)交流，也可以发邮件：wangld1994@gmail.com\n\n## 博客\n[Hexo](https://hexo.io/zh-cn/docs/)是一个快速，简单，强大的博客框架，使用教程可以参考[这里](https://zhuanlan.zhihu.com/p/25471760)。\n\n主题：[Next](https://github.com/iissnan/hexo-theme-next)\n\n评论：[Disqus](https://disqus.com/)\n\n分享按钮：[AddThis](https://www.addthis.com)\n\n站内搜索：[Algolia](https://www.algolia.com/)\n\n访问统计：[不蒜子](http://busuanzi.ibruce.info/)\n\n图床：[七牛云](https://www.qiniu.com/)+[极简图床](https://jiantuku.com/)","updated":"2018-02-20T11:53:00.000Z","path":"about/index.html","_id":"cjhhhvn2b000127xu74jcmqrf","content":"<h2 id=\"我\"><a href=\"#我\" class=\"headerlink\" title=\"我\"></a>我</h2><p>目前就读于西北师范大学，专业是计算机科学与技术，2018年本科毕业。</p>\n<p>喜欢音乐，喜欢足球篮球，喜欢摄影，喜欢骑行，喜欢游戏，喜欢瞎折腾。</p>\n<p>会一点Java Web，会一点爬虫，会一点数据挖掘，会一点机器学习。</p>\n<p>努力学习中~</p>\n<p>有问题欢迎<a href=\"http://www.weibo.com/wangld1994\" target=\"_blank\" rel=\"noopener\">微博</a>交流，也可以发邮件：<a href=\"mailto:wangld1994@gmail.com\" target=\"_blank\" rel=\"noopener\">wangld1994@gmail.com</a></p>\n<h2 id=\"博客\"><a href=\"#博客\" class=\"headerlink\" title=\"博客\"></a>博客</h2><p><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo</a>是一个快速，简单，强大的博客框架，使用教程可以参考<a href=\"https://zhuanlan.zhihu.com/p/25471760\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>主题：<a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">Next</a></p>\n<p>评论：<a href=\"https://disqus.com/\" target=\"_blank\" rel=\"noopener\">Disqus</a></p>\n<p>分享按钮：<a href=\"https://www.addthis.com\" target=\"_blank\" rel=\"noopener\">AddThis</a></p>\n<p>站内搜索：<a href=\"https://www.algolia.com/\" target=\"_blank\" rel=\"noopener\">Algolia</a></p>\n<p>访问统计：<a href=\"http://busuanzi.ibruce.info/\" target=\"_blank\" rel=\"noopener\">不蒜子</a></p>\n<p>图床：<a href=\"https://www.qiniu.com/\" target=\"_blank\" rel=\"noopener\">七牛云</a>+<a href=\"https://jiantuku.com/\" target=\"_blank\" rel=\"noopener\">极简图床</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"我\"><a href=\"#我\" class=\"headerlink\" title=\"我\"></a>我</h2><p>目前就读于西北师范大学，专业是计算机科学与技术，2018年本科毕业。</p>\n<p>喜欢音乐，喜欢足球篮球，喜欢摄影，喜欢骑行，喜欢游戏，喜欢瞎折腾。</p>\n<p>会一点Java Web，会一点爬虫，会一点数据挖掘，会一点机器学习。</p>\n<p>努力学习中~</p>\n<p>有问题欢迎<a href=\"http://www.weibo.com/wangld1994\" target=\"_blank\" rel=\"noopener\">微博</a>交流，也可以发邮件：<a href=\"mailto:wangld1994@gmail.com\" target=\"_blank\" rel=\"noopener\">wangld1994@gmail.com</a></p>\n<h2 id=\"博客\"><a href=\"#博客\" class=\"headerlink\" title=\"博客\"></a>博客</h2><p><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo</a>是一个快速，简单，强大的博客框架，使用教程可以参考<a href=\"https://zhuanlan.zhihu.com/p/25471760\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p>主题：<a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">Next</a></p>\n<p>评论：<a href=\"https://disqus.com/\" target=\"_blank\" rel=\"noopener\">Disqus</a></p>\n<p>分享按钮：<a href=\"https://www.addthis.com\" target=\"_blank\" rel=\"noopener\">AddThis</a></p>\n<p>站内搜索：<a href=\"https://www.algolia.com/\" target=\"_blank\" rel=\"noopener\">Algolia</a></p>\n<p>访问统计：<a href=\"http://busuanzi.ibruce.info/\" target=\"_blank\" rel=\"noopener\">不蒜子</a></p>\n<p>图床：<a href=\"https://www.qiniu.com/\" target=\"_blank\" rel=\"noopener\">七牛云</a>+<a href=\"https://jiantuku.com/\" target=\"_blank\" rel=\"noopener\">极简图床</a></p>\n"},{"title":"categories","date":"2018-02-20T02:42:55.000Z","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-02-20 10:42:55\nlayout: categories\ncomments: false\n---\n","updated":"2018-02-20T10:43:14.000Z","path":"categories/index.html","_id":"cjhhhvn2h000327xuoyx06nzj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-03-02T08:57:05.000Z","type":"tags","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-03-02 16:57:05\ntype: \"tags\"\nlayout: tags\ncomments: false\n---\n","updated":"2018-02-20T10:42:44.000Z","path":"tags/index.html","_id":"cjhhhvn2q000627xuqz11h3jc","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"CentOS 7下安装Docker并部署Spring Boot应用","date":"2017-11-06T02:07:09.000Z","_content":"> 这是voidAlex原创的第十四篇博文。\n<!-- more -->\n\n从内核和稳定性的角度考虑，Docker最好安装在Ubuntu 16.04上。但是在生产环境中，总是不可避免的使用CentOS。本文讲述在CentOS下安装Docker的过程。CentOS必须是64位，并且版本大于等于6.5。\n\n## 配置静态IP\n\n先用`ip addr`查看网卡信息,得到：\n\n```sh\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN qlen 1\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host \n       valid_lft forever preferred_lft forever\n2: ens33: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000\n    link/ether 00:0c:29:46:eb:2f brd ff:ff:ff:ff:ff:ff\n...\n```\n\n可以看到使用的网卡是`ens33`，所以再修改`ifcfg-ens33`文件的信息。\n\n```sh\nvi /etc/sysconfig/network-scripts/ifcfg-ens33\n```\n\n修改如下内容：\n\n```sh\nBOOTPROTO=static #dhcp改为static   \nONBOOT=yes #开机启用本配置  \nIPADDR=202.201.53.161 #静态IP  \nGATEWAY=202.201.53.129 #默认网关  \nNETMASK=255.255.255.0 #子网掩码  \nDNS1=202.201.48.1 #DNS\nDNS2=202.201.48.2\n```\n\n修改后效果：\n\n```sh\ncat /etc/sysconfig/network-scripts/ifcfg-ens33 \nTYPE=Ethernet\nPROXY_METHOD=none\nBROWSER_ONLY=no\nBOOTPROTO=static\nDEFROUTE=yes\nIPV4_FAILURE_FATAL=no\nIPV6INIT=yes\nIPV6_AUTOCONF=yes\nIPV6_DEFROUTE=yes\nIPV6_FAILURE_FATAL=no\nIPV6_ADDR_GEN_MODE=stable-privacy\nNAME=ens33\nUUID=0c7d8882-dc8a-4e0a-bb82-1bb36aac80a8\nDEVICE=ens33\nONBOOT=yes\nIPADDR=202.201.53.161\nGATEWAY=202.201.53.129\nNETMASK=255.255.255.0\nDNS1=202.201.48.1\nDNS2=202.201.48.2\n```\n\n重启网络服务：\n\n```sh\nservice network restart\n```\n\n## 安装Docker\n\n### 使用脚本安装\n\n为了简化安装流程，直接使用官方提供的脚本自动安装：\n\n```sh\ncurl -fsSL get.docker.com -o get-docker.sh\nsh get-docker.sh --mirror Aliyun\n```\n\n### 启动Docker\n\n```sh\nsystemctl enable docker\nsystemctl start docker\n```\n\n### 查看安装信息\n\n安装完毕后，使用`docker version`来查看安装信息：\n\n```sh\nClient:\n Version:      17.07.0-ce\n API version:  1.31\n Go version:   go1.8.3\n Git commit:   8784753\n Built:        Tue Aug 29 17:42:01 2017\n OS/Arch:      linux/amd64\n\nServer:\n Version:      17.07.0-ce\n API version:  1.31 (minimum version 1.12)\n Go version:   go1.8.3\n Git commit:   8784753\n Built:        Tue Aug 29 17:43:23 2017\n OS/Arch:      linux/amd64\n Experimental: false\n```\n\n### 建立Docker用户组\n\n```sh\ngroupadd docker\n# 将当前用户加入docker组\nusermod -aG docker $USER\n```\n\n### 添加内核参数\n\n默认配置下，在CentOS使用Docker会看到这些警告信息：\n\n```sh\nWARNING: bridge-nf-call-iptables is disabled\nWARNING: bridge-nf-call-ip6tables is disabled\n```\n\n添加内核配置信息启用这些功能：\n\n```sh\ntee -a /etc/sysctl.conf <<-EOF\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nEOF\n```\n\n重新加载`sysctl.conf`：\n\n```sh\nsysctl -p\n```\n\n### 生成镜像并运行\n\n生成镜像和运行的步骤与在Ubuntu下的一样，在这里不再赘述。","source":"_posts/CentOS7下安装Docker.md","raw":"---\ntitle: CentOS 7下安装Docker并部署Spring Boot应用\ndate: 2017-11-06 10:07:09\ntags: ['Docker', '配置']\n---\n> 这是voidAlex原创的第十四篇博文。\n<!-- more -->\n\n从内核和稳定性的角度考虑，Docker最好安装在Ubuntu 16.04上。但是在生产环境中，总是不可避免的使用CentOS。本文讲述在CentOS下安装Docker的过程。CentOS必须是64位，并且版本大于等于6.5。\n\n## 配置静态IP\n\n先用`ip addr`查看网卡信息,得到：\n\n```sh\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN qlen 1\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host \n       valid_lft forever preferred_lft forever\n2: ens33: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000\n    link/ether 00:0c:29:46:eb:2f brd ff:ff:ff:ff:ff:ff\n...\n```\n\n可以看到使用的网卡是`ens33`，所以再修改`ifcfg-ens33`文件的信息。\n\n```sh\nvi /etc/sysconfig/network-scripts/ifcfg-ens33\n```\n\n修改如下内容：\n\n```sh\nBOOTPROTO=static #dhcp改为static   \nONBOOT=yes #开机启用本配置  \nIPADDR=202.201.53.161 #静态IP  \nGATEWAY=202.201.53.129 #默认网关  \nNETMASK=255.255.255.0 #子网掩码  \nDNS1=202.201.48.1 #DNS\nDNS2=202.201.48.2\n```\n\n修改后效果：\n\n```sh\ncat /etc/sysconfig/network-scripts/ifcfg-ens33 \nTYPE=Ethernet\nPROXY_METHOD=none\nBROWSER_ONLY=no\nBOOTPROTO=static\nDEFROUTE=yes\nIPV4_FAILURE_FATAL=no\nIPV6INIT=yes\nIPV6_AUTOCONF=yes\nIPV6_DEFROUTE=yes\nIPV6_FAILURE_FATAL=no\nIPV6_ADDR_GEN_MODE=stable-privacy\nNAME=ens33\nUUID=0c7d8882-dc8a-4e0a-bb82-1bb36aac80a8\nDEVICE=ens33\nONBOOT=yes\nIPADDR=202.201.53.161\nGATEWAY=202.201.53.129\nNETMASK=255.255.255.0\nDNS1=202.201.48.1\nDNS2=202.201.48.2\n```\n\n重启网络服务：\n\n```sh\nservice network restart\n```\n\n## 安装Docker\n\n### 使用脚本安装\n\n为了简化安装流程，直接使用官方提供的脚本自动安装：\n\n```sh\ncurl -fsSL get.docker.com -o get-docker.sh\nsh get-docker.sh --mirror Aliyun\n```\n\n### 启动Docker\n\n```sh\nsystemctl enable docker\nsystemctl start docker\n```\n\n### 查看安装信息\n\n安装完毕后，使用`docker version`来查看安装信息：\n\n```sh\nClient:\n Version:      17.07.0-ce\n API version:  1.31\n Go version:   go1.8.3\n Git commit:   8784753\n Built:        Tue Aug 29 17:42:01 2017\n OS/Arch:      linux/amd64\n\nServer:\n Version:      17.07.0-ce\n API version:  1.31 (minimum version 1.12)\n Go version:   go1.8.3\n Git commit:   8784753\n Built:        Tue Aug 29 17:43:23 2017\n OS/Arch:      linux/amd64\n Experimental: false\n```\n\n### 建立Docker用户组\n\n```sh\ngroupadd docker\n# 将当前用户加入docker组\nusermod -aG docker $USER\n```\n\n### 添加内核参数\n\n默认配置下，在CentOS使用Docker会看到这些警告信息：\n\n```sh\nWARNING: bridge-nf-call-iptables is disabled\nWARNING: bridge-nf-call-ip6tables is disabled\n```\n\n添加内核配置信息启用这些功能：\n\n```sh\ntee -a /etc/sysctl.conf <<-EOF\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nEOF\n```\n\n重新加载`sysctl.conf`：\n\n```sh\nsysctl -p\n```\n\n### 生成镜像并运行\n\n生成镜像和运行的步骤与在Ubuntu下的一样，在这里不再赘述。","slug":"CentOS7下安装Docker","published":1,"updated":"2017-11-10T09:25:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhhhvn21000027xu4k9hey7g","content":"<blockquote>\n<p>这是voidAlex原创的第十四篇博文。<br><a id=\"more\"></a></p>\n</blockquote>\n<p>从内核和稳定性的角度考虑，Docker最好安装在Ubuntu 16.04上。但是在生产环境中，总是不可避免的使用CentOS。本文讲述在CentOS下安装Docker的过程。CentOS必须是64位，并且版本大于等于6.5。</p>\n<h2 id=\"配置静态IP\"><a href=\"#配置静态IP\" class=\"headerlink\" title=\"配置静态IP\"></a>配置静态IP</h2><p>先用<code>ip addr</code>查看网卡信息,得到：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1</div><div class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</div><div class=\"line\">    inet 127.0.0.1/8 scope host lo</div><div class=\"line\">       valid_lft forever preferred_lft forever</div><div class=\"line\">    inet6 ::1/128 scope host </div><div class=\"line\">       valid_lft forever preferred_lft forever</div><div class=\"line\">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</div><div class=\"line\">    link/ether 00:0c:29:46:eb:2f brd ff:ff:ff:ff:ff:ff</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>可以看到使用的网卡是<code>ens33</code>，所以再修改<code>ifcfg-ens33</code>文件的信息。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /etc/sysconfig/network-scripts/ifcfg-ens33</div></pre></td></tr></table></figure>\n<p>修改如下内容：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">BOOTPROTO=static <span class=\"comment\">#dhcp改为static   </span></div><div class=\"line\">ONBOOT=yes <span class=\"comment\">#开机启用本配置  </span></div><div class=\"line\">IPADDR=202.201.53.161 <span class=\"comment\">#静态IP  </span></div><div class=\"line\">GATEWAY=202.201.53.129 <span class=\"comment\">#默认网关  </span></div><div class=\"line\">NETMASK=255.255.255.0 <span class=\"comment\">#子网掩码  </span></div><div class=\"line\">DNS1=202.201.48.1 <span class=\"comment\">#DNS</span></div><div class=\"line\">DNS2=202.201.48.2</div></pre></td></tr></table></figure>\n<p>修改后效果：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/sysconfig/network-scripts/ifcfg-ens33 </div><div class=\"line\">TYPE=Ethernet</div><div class=\"line\">PROXY_METHOD=none</div><div class=\"line\">BROWSER_ONLY=no</div><div class=\"line\">BOOTPROTO=static</div><div class=\"line\">DEFROUTE=yes</div><div class=\"line\">IPV4_FAILURE_FATAL=no</div><div class=\"line\">IPV6INIT=yes</div><div class=\"line\">IPV6_AUTOCONF=yes</div><div class=\"line\">IPV6_DEFROUTE=yes</div><div class=\"line\">IPV6_FAILURE_FATAL=no</div><div class=\"line\">IPV6_ADDR_GEN_MODE=stable-privacy</div><div class=\"line\">NAME=ens33</div><div class=\"line\">UUID=0c7d8882-dc8a-4e0a-bb82-1bb36aac80a8</div><div class=\"line\">DEVICE=ens33</div><div class=\"line\">ONBOOT=yes</div><div class=\"line\">IPADDR=202.201.53.161</div><div class=\"line\">GATEWAY=202.201.53.129</div><div class=\"line\">NETMASK=255.255.255.0</div><div class=\"line\">DNS1=202.201.48.1</div><div class=\"line\">DNS2=202.201.48.2</div></pre></td></tr></table></figure>\n<p>重启网络服务：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service network restart</div></pre></td></tr></table></figure>\n<h2 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h2><h3 id=\"使用脚本安装\"><a href=\"#使用脚本安装\" class=\"headerlink\" title=\"使用脚本安装\"></a>使用脚本安装</h3><p>为了简化安装流程，直接使用官方提供的脚本自动安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -fsSL get.docker.com -o get-docker.sh</div><div class=\"line\">sh get-docker.sh --mirror Aliyun</div></pre></td></tr></table></figure>\n<h3 id=\"启动Docker\"><a href=\"#启动Docker\" class=\"headerlink\" title=\"启动Docker\"></a>启动Docker</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl <span class=\"built_in\">enable</span> docker</div><div class=\"line\">systemctl start docker</div></pre></td></tr></table></figure>\n<h3 id=\"查看安装信息\"><a href=\"#查看安装信息\" class=\"headerlink\" title=\"查看安装信息\"></a>查看安装信息</h3><p>安装完毕后，使用<code>docker version</code>来查看安装信息：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">Client:</div><div class=\"line\"> Version:      17.07.0-ce</div><div class=\"line\"> API version:  1.31</div><div class=\"line\"> Go version:   go1.8.3</div><div class=\"line\"> Git commit:   8784753</div><div class=\"line\"> Built:        Tue Aug 29 17:42:01 2017</div><div class=\"line\"> OS/Arch:      linux/amd64</div><div class=\"line\"></div><div class=\"line\">Server:</div><div class=\"line\"> Version:      17.07.0-ce</div><div class=\"line\"> API version:  1.31 (minimum version 1.12)</div><div class=\"line\"> Go version:   go1.8.3</div><div class=\"line\"> Git commit:   8784753</div><div class=\"line\"> Built:        Tue Aug 29 17:43:23 2017</div><div class=\"line\"> OS/Arch:      linux/amd64</div><div class=\"line\"> Experimental: <span class=\"literal\">false</span></div></pre></td></tr></table></figure>\n<h3 id=\"建立Docker用户组\"><a href=\"#建立Docker用户组\" class=\"headerlink\" title=\"建立Docker用户组\"></a>建立Docker用户组</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">groupadd docker</div><div class=\"line\"><span class=\"comment\"># 将当前用户加入docker组</span></div><div class=\"line\">usermod <span class=\"_\">-a</span>G docker <span class=\"variable\">$USER</span></div></pre></td></tr></table></figure>\n<h3 id=\"添加内核参数\"><a href=\"#添加内核参数\" class=\"headerlink\" title=\"添加内核参数\"></a>添加内核参数</h3><p>默认配置下，在CentOS使用Docker会看到这些警告信息：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">WARNING: bridge-nf-call-iptables is disabled</div><div class=\"line\">WARNING: bridge-nf-call-ip6tables is disabled</div></pre></td></tr></table></figure>\n<p>添加内核配置信息启用这些功能：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">tee <span class=\"_\">-a</span> /etc/sysctl.conf &lt;&lt;-EOF</div><div class=\"line\">net.bridge.bridge-nf-call-ip6tables = 1</div><div class=\"line\">net.bridge.bridge-nf-call-iptables = 1</div><div class=\"line\">EOF</div></pre></td></tr></table></figure>\n<p>重新加载<code>sysctl.conf</code>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sysctl -p</div></pre></td></tr></table></figure>\n<h3 id=\"生成镜像并运行\"><a href=\"#生成镜像并运行\" class=\"headerlink\" title=\"生成镜像并运行\"></a>生成镜像并运行</h3><p>生成镜像和运行的步骤与在Ubuntu下的一样，在这里不再赘述。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是voidAlex原创的第十四篇博文。<br>","more":"</p>\n</blockquote>\n<p>从内核和稳定性的角度考虑，Docker最好安装在Ubuntu 16.04上。但是在生产环境中，总是不可避免的使用CentOS。本文讲述在CentOS下安装Docker的过程。CentOS必须是64位，并且版本大于等于6.5。</p>\n<h2 id=\"配置静态IP\"><a href=\"#配置静态IP\" class=\"headerlink\" title=\"配置静态IP\"></a>配置静态IP</h2><p>先用<code>ip addr</code>查看网卡信息,得到：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1</div><div class=\"line\">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</div><div class=\"line\">    inet 127.0.0.1/8 scope host lo</div><div class=\"line\">       valid_lft forever preferred_lft forever</div><div class=\"line\">    inet6 ::1/128 scope host </div><div class=\"line\">       valid_lft forever preferred_lft forever</div><div class=\"line\">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</div><div class=\"line\">    link/ether 00:0c:29:46:eb:2f brd ff:ff:ff:ff:ff:ff</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>可以看到使用的网卡是<code>ens33</code>，所以再修改<code>ifcfg-ens33</code>文件的信息。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /etc/sysconfig/network-scripts/ifcfg-ens33</div></pre></td></tr></table></figure>\n<p>修改如下内容：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">BOOTPROTO=static <span class=\"comment\">#dhcp改为static   </span></div><div class=\"line\">ONBOOT=yes <span class=\"comment\">#开机启用本配置  </span></div><div class=\"line\">IPADDR=202.201.53.161 <span class=\"comment\">#静态IP  </span></div><div class=\"line\">GATEWAY=202.201.53.129 <span class=\"comment\">#默认网关  </span></div><div class=\"line\">NETMASK=255.255.255.0 <span class=\"comment\">#子网掩码  </span></div><div class=\"line\">DNS1=202.201.48.1 <span class=\"comment\">#DNS</span></div><div class=\"line\">DNS2=202.201.48.2</div></pre></td></tr></table></figure>\n<p>修改后效果：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/sysconfig/network-scripts/ifcfg-ens33 </div><div class=\"line\">TYPE=Ethernet</div><div class=\"line\">PROXY_METHOD=none</div><div class=\"line\">BROWSER_ONLY=no</div><div class=\"line\">BOOTPROTO=static</div><div class=\"line\">DEFROUTE=yes</div><div class=\"line\">IPV4_FAILURE_FATAL=no</div><div class=\"line\">IPV6INIT=yes</div><div class=\"line\">IPV6_AUTOCONF=yes</div><div class=\"line\">IPV6_DEFROUTE=yes</div><div class=\"line\">IPV6_FAILURE_FATAL=no</div><div class=\"line\">IPV6_ADDR_GEN_MODE=stable-privacy</div><div class=\"line\">NAME=ens33</div><div class=\"line\">UUID=0c7d8882-dc8a-4e0a-bb82-1bb36aac80a8</div><div class=\"line\">DEVICE=ens33</div><div class=\"line\">ONBOOT=yes</div><div class=\"line\">IPADDR=202.201.53.161</div><div class=\"line\">GATEWAY=202.201.53.129</div><div class=\"line\">NETMASK=255.255.255.0</div><div class=\"line\">DNS1=202.201.48.1</div><div class=\"line\">DNS2=202.201.48.2</div></pre></td></tr></table></figure>\n<p>重启网络服务：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service network restart</div></pre></td></tr></table></figure>\n<h2 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h2><h3 id=\"使用脚本安装\"><a href=\"#使用脚本安装\" class=\"headerlink\" title=\"使用脚本安装\"></a>使用脚本安装</h3><p>为了简化安装流程，直接使用官方提供的脚本自动安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -fsSL get.docker.com -o get-docker.sh</div><div class=\"line\">sh get-docker.sh --mirror Aliyun</div></pre></td></tr></table></figure>\n<h3 id=\"启动Docker\"><a href=\"#启动Docker\" class=\"headerlink\" title=\"启动Docker\"></a>启动Docker</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl <span class=\"built_in\">enable</span> docker</div><div class=\"line\">systemctl start docker</div></pre></td></tr></table></figure>\n<h3 id=\"查看安装信息\"><a href=\"#查看安装信息\" class=\"headerlink\" title=\"查看安装信息\"></a>查看安装信息</h3><p>安装完毕后，使用<code>docker version</code>来查看安装信息：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">Client:</div><div class=\"line\"> Version:      17.07.0-ce</div><div class=\"line\"> API version:  1.31</div><div class=\"line\"> Go version:   go1.8.3</div><div class=\"line\"> Git commit:   8784753</div><div class=\"line\"> Built:        Tue Aug 29 17:42:01 2017</div><div class=\"line\"> OS/Arch:      linux/amd64</div><div class=\"line\"></div><div class=\"line\">Server:</div><div class=\"line\"> Version:      17.07.0-ce</div><div class=\"line\"> API version:  1.31 (minimum version 1.12)</div><div class=\"line\"> Go version:   go1.8.3</div><div class=\"line\"> Git commit:   8784753</div><div class=\"line\"> Built:        Tue Aug 29 17:43:23 2017</div><div class=\"line\"> OS/Arch:      linux/amd64</div><div class=\"line\"> Experimental: <span class=\"literal\">false</span></div></pre></td></tr></table></figure>\n<h3 id=\"建立Docker用户组\"><a href=\"#建立Docker用户组\" class=\"headerlink\" title=\"建立Docker用户组\"></a>建立Docker用户组</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">groupadd docker</div><div class=\"line\"><span class=\"comment\"># 将当前用户加入docker组</span></div><div class=\"line\">usermod <span class=\"_\">-a</span>G docker <span class=\"variable\">$USER</span></div></pre></td></tr></table></figure>\n<h3 id=\"添加内核参数\"><a href=\"#添加内核参数\" class=\"headerlink\" title=\"添加内核参数\"></a>添加内核参数</h3><p>默认配置下，在CentOS使用Docker会看到这些警告信息：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">WARNING: bridge-nf-call-iptables is disabled</div><div class=\"line\">WARNING: bridge-nf-call-ip6tables is disabled</div></pre></td></tr></table></figure>\n<p>添加内核配置信息启用这些功能：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">tee <span class=\"_\">-a</span> /etc/sysctl.conf &lt;&lt;-EOF</div><div class=\"line\">net.bridge.bridge-nf-call-ip6tables = 1</div><div class=\"line\">net.bridge.bridge-nf-call-iptables = 1</div><div class=\"line\">EOF</div></pre></td></tr></table></figure>\n<p>重新加载<code>sysctl.conf</code>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sysctl -p</div></pre></td></tr></table></figure>\n<h3 id=\"生成镜像并运行\"><a href=\"#生成镜像并运行\" class=\"headerlink\" title=\"生成镜像并运行\"></a>生成镜像并运行</h3><p>生成镜像和运行的步骤与在Ubuntu下的一样，在这里不再赘述。</p>"},{"title":"Docker下快速安装MySQL并使用数据卷容器","date":"2017-11-06T11:32:34.000Z","_content":"> 这是voidAlex原创的第十五篇博文。\n<!-- more -->\n\n## 数据卷和数据卷容器\n\n### 数据卷\n\nDocker下数据卷是一个可供容器直接使用的特殊目录，有如下特性：\n\n>* 数据卷可以在一个或多个容器见共享和重用\n>* 对数据卷的修改会立即生效\n>* 对数据卷的操作不影响镜像\n>* 数据卷的生命周期独立于容器\n\n### 数据卷容器\n\n数据卷容器也是一个正常的容器，专门提供数据卷供其他容器挂载的。\n\n## 创建数据卷容器\n\n创建一个名为`sqldata`的数据卷容器：\n\n```sh\ndocker run -d -v /data/mysql:/var/lib/mysql --name sqldata training/postgres\n```\n\n这个命令会创建一个名为`sqldata`的数据卷容器，并且将容器中的`/var/lib/mysql`目录映射到宿主机的`/data/mysql`下。\n\n## 创建mysql容器并挂载数据卷容器\n\n首先拉去`mysql`的镜像：\n\n```sh\ndocker pull mysql\n```\n\n创建`mysql`容器，并挂载数据卷`sqldata`：\n\n```sh\ndocker run -d --name myMysql --volumes-from sqldata -e MYSQL_ROOT_PASSWORD=123456 -p 3306:3306 mysql\n```\n\n这个命令会创建一个MySQL容器，为`root`用户设置密码为`123456`，并且挂载`sqldata`数据卷。\n\n进入到`myMysql`容器中，并且登录到mysql服务器：\n\n```sh\ndocker exec -t -i myMysql /bin/bash\nmysql -uroot -p\n```\n\n这时候，root用户只能通过`localhost`访问，增加用户，授予其对应权限：\n\n```sh\ngrant all on *.* to 'test'@'%' identified by '1234';\n```\n\n创建`test`用户后，就可以以正常访问mysql数据库的方式远程访问`myMysql`容器了。\n\n## 通过数据卷容器备份、恢复和迁移数据\n\n### 备份\n\n创建一个新容器，加载`sqldata`容器中的数据卷，并从主机挂载当前目录到容器的`/backup`目录。容器启动后，将`sqldata`数据卷备份为当前容器中的`/backup/backup.tar`文件。\n\n```sh\ndocker run --volumes-from sqldata -v $(pwd):/backup ubuntu tar cvf /backup/backup.tar /data/mysql\n```\n\n### 恢复\n\n先创建一个带有空的数据卷的容器：\n\n```sh\ndocker run -v /data/mysql:/var/lib/mysql --name backupdata ubuntu /bin/bash\n```\n\n再创建另一个容器，挂载`backupdata`容器中的数据卷，解压备份文件到挂载的容器数据卷中：\n\n```sh\n docker run --volumes-from backupdata -v $(pwd):/backup busybox tar xvf /backup/backup.tar\n```","source":"_posts/Docker下快速安装MySQL并使用数据卷容器.md","raw":"---\ntitle: Docker下快速安装MySQL并使用数据卷容器\ndate: 2017-11-06 19:32:34\ntags: ['Docker', 'MySQL']\n---\n> 这是voidAlex原创的第十五篇博文。\n<!-- more -->\n\n## 数据卷和数据卷容器\n\n### 数据卷\n\nDocker下数据卷是一个可供容器直接使用的特殊目录，有如下特性：\n\n>* 数据卷可以在一个或多个容器见共享和重用\n>* 对数据卷的修改会立即生效\n>* 对数据卷的操作不影响镜像\n>* 数据卷的生命周期独立于容器\n\n### 数据卷容器\n\n数据卷容器也是一个正常的容器，专门提供数据卷供其他容器挂载的。\n\n## 创建数据卷容器\n\n创建一个名为`sqldata`的数据卷容器：\n\n```sh\ndocker run -d -v /data/mysql:/var/lib/mysql --name sqldata training/postgres\n```\n\n这个命令会创建一个名为`sqldata`的数据卷容器，并且将容器中的`/var/lib/mysql`目录映射到宿主机的`/data/mysql`下。\n\n## 创建mysql容器并挂载数据卷容器\n\n首先拉去`mysql`的镜像：\n\n```sh\ndocker pull mysql\n```\n\n创建`mysql`容器，并挂载数据卷`sqldata`：\n\n```sh\ndocker run -d --name myMysql --volumes-from sqldata -e MYSQL_ROOT_PASSWORD=123456 -p 3306:3306 mysql\n```\n\n这个命令会创建一个MySQL容器，为`root`用户设置密码为`123456`，并且挂载`sqldata`数据卷。\n\n进入到`myMysql`容器中，并且登录到mysql服务器：\n\n```sh\ndocker exec -t -i myMysql /bin/bash\nmysql -uroot -p\n```\n\n这时候，root用户只能通过`localhost`访问，增加用户，授予其对应权限：\n\n```sh\ngrant all on *.* to 'test'@'%' identified by '1234';\n```\n\n创建`test`用户后，就可以以正常访问mysql数据库的方式远程访问`myMysql`容器了。\n\n## 通过数据卷容器备份、恢复和迁移数据\n\n### 备份\n\n创建一个新容器，加载`sqldata`容器中的数据卷，并从主机挂载当前目录到容器的`/backup`目录。容器启动后，将`sqldata`数据卷备份为当前容器中的`/backup/backup.tar`文件。\n\n```sh\ndocker run --volumes-from sqldata -v $(pwd):/backup ubuntu tar cvf /backup/backup.tar /data/mysql\n```\n\n### 恢复\n\n先创建一个带有空的数据卷的容器：\n\n```sh\ndocker run -v /data/mysql:/var/lib/mysql --name backupdata ubuntu /bin/bash\n```\n\n再创建另一个容器，挂载`backupdata`容器中的数据卷，解压备份文件到挂载的容器数据卷中：\n\n```sh\n docker run --volumes-from backupdata -v $(pwd):/backup busybox tar xvf /backup/backup.tar\n```","slug":"Docker下快速安装MySQL并使用数据卷容器","published":1,"updated":"2017-11-10T09:26:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhhhvn2d000227xut300tcj8","content":"<blockquote>\n<p>这是voidAlex原创的第十五篇博文。<br><a id=\"more\"></a></p>\n</blockquote>\n<h2 id=\"数据卷和数据卷容器\"><a href=\"#数据卷和数据卷容器\" class=\"headerlink\" title=\"数据卷和数据卷容器\"></a>数据卷和数据卷容器</h2><h3 id=\"数据卷\"><a href=\"#数据卷\" class=\"headerlink\" title=\"数据卷\"></a>数据卷</h3><p>Docker下数据卷是一个可供容器直接使用的特殊目录，有如下特性：</p>\n<blockquote>\n<ul>\n<li>数据卷可以在一个或多个容器见共享和重用</li>\n<li>对数据卷的修改会立即生效</li>\n<li>对数据卷的操作不影响镜像</li>\n<li>数据卷的生命周期独立于容器</li>\n</ul>\n</blockquote>\n<h3 id=\"数据卷容器\"><a href=\"#数据卷容器\" class=\"headerlink\" title=\"数据卷容器\"></a>数据卷容器</h3><p>数据卷容器也是一个正常的容器，专门提供数据卷供其他容器挂载的。</p>\n<h2 id=\"创建数据卷容器\"><a href=\"#创建数据卷容器\" class=\"headerlink\" title=\"创建数据卷容器\"></a>创建数据卷容器</h2><p>创建一个名为<code>sqldata</code>的数据卷容器：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run <span class=\"_\">-d</span> -v /data/mysql:/var/lib/mysql --name sqldata training/postgres</div></pre></td></tr></table></figure>\n<p>这个命令会创建一个名为<code>sqldata</code>的数据卷容器，并且将容器中的<code>/var/lib/mysql</code>目录映射到宿主机的<code>/data/mysql</code>下。</p>\n<h2 id=\"创建mysql容器并挂载数据卷容器\"><a href=\"#创建mysql容器并挂载数据卷容器\" class=\"headerlink\" title=\"创建mysql容器并挂载数据卷容器\"></a>创建mysql容器并挂载数据卷容器</h2><p>首先拉去<code>mysql</code>的镜像：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker pull mysql</div></pre></td></tr></table></figure>\n<p>创建<code>mysql</code>容器，并挂载数据卷<code>sqldata</code>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run <span class=\"_\">-d</span> --name myMysql --volumes-from sqldata <span class=\"_\">-e</span> MYSQL_ROOT_PASSWORD=123456 -p 3306:3306 mysql</div></pre></td></tr></table></figure>\n<p>这个命令会创建一个MySQL容器，为<code>root</code>用户设置密码为<code>123456</code>，并且挂载<code>sqldata</code>数据卷。</p>\n<p>进入到<code>myMysql</code>容器中，并且登录到mysql服务器：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker <span class=\"built_in\">exec</span> -t -i myMysql /bin/bash</div><div class=\"line\">mysql -uroot -p</div></pre></td></tr></table></figure>\n<p>这时候，root用户只能通过<code>localhost</code>访问，增加用户，授予其对应权限：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">grant all on *.* to <span class=\"string\">'test'</span>@<span class=\"string\">'%'</span> identified by <span class=\"string\">'1234'</span>;</div></pre></td></tr></table></figure>\n<p>创建<code>test</code>用户后，就可以以正常访问mysql数据库的方式远程访问<code>myMysql</code>容器了。</p>\n<h2 id=\"通过数据卷容器备份、恢复和迁移数据\"><a href=\"#通过数据卷容器备份、恢复和迁移数据\" class=\"headerlink\" title=\"通过数据卷容器备份、恢复和迁移数据\"></a>通过数据卷容器备份、恢复和迁移数据</h2><h3 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h3><p>创建一个新容器，加载<code>sqldata</code>容器中的数据卷，并从主机挂载当前目录到容器的<code>/backup</code>目录。容器启动后，将<code>sqldata</code>数据卷备份为当前容器中的<code>/backup/backup.tar</code>文件。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run --volumes-from sqldata -v $(<span class=\"built_in\">pwd</span>):/backup ubuntu tar cvf /backup/backup.tar /data/mysql</div></pre></td></tr></table></figure>\n<h3 id=\"恢复\"><a href=\"#恢复\" class=\"headerlink\" title=\"恢复\"></a>恢复</h3><p>先创建一个带有空的数据卷的容器：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -v /data/mysql:/var/lib/mysql --name backupdata ubuntu /bin/bash</div></pre></td></tr></table></figure>\n<p>再创建另一个容器，挂载<code>backupdata</code>容器中的数据卷，解压备份文件到挂载的容器数据卷中：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run --volumes-from backupdata -v $(<span class=\"built_in\">pwd</span>):/backup busybox tar xvf /backup/backup.tar</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是voidAlex原创的第十五篇博文。<br>","more":"</p>\n</blockquote>\n<h2 id=\"数据卷和数据卷容器\"><a href=\"#数据卷和数据卷容器\" class=\"headerlink\" title=\"数据卷和数据卷容器\"></a>数据卷和数据卷容器</h2><h3 id=\"数据卷\"><a href=\"#数据卷\" class=\"headerlink\" title=\"数据卷\"></a>数据卷</h3><p>Docker下数据卷是一个可供容器直接使用的特殊目录，有如下特性：</p>\n<blockquote>\n<ul>\n<li>数据卷可以在一个或多个容器见共享和重用</li>\n<li>对数据卷的修改会立即生效</li>\n<li>对数据卷的操作不影响镜像</li>\n<li>数据卷的生命周期独立于容器</li>\n</ul>\n</blockquote>\n<h3 id=\"数据卷容器\"><a href=\"#数据卷容器\" class=\"headerlink\" title=\"数据卷容器\"></a>数据卷容器</h3><p>数据卷容器也是一个正常的容器，专门提供数据卷供其他容器挂载的。</p>\n<h2 id=\"创建数据卷容器\"><a href=\"#创建数据卷容器\" class=\"headerlink\" title=\"创建数据卷容器\"></a>创建数据卷容器</h2><p>创建一个名为<code>sqldata</code>的数据卷容器：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run <span class=\"_\">-d</span> -v /data/mysql:/var/lib/mysql --name sqldata training/postgres</div></pre></td></tr></table></figure>\n<p>这个命令会创建一个名为<code>sqldata</code>的数据卷容器，并且将容器中的<code>/var/lib/mysql</code>目录映射到宿主机的<code>/data/mysql</code>下。</p>\n<h2 id=\"创建mysql容器并挂载数据卷容器\"><a href=\"#创建mysql容器并挂载数据卷容器\" class=\"headerlink\" title=\"创建mysql容器并挂载数据卷容器\"></a>创建mysql容器并挂载数据卷容器</h2><p>首先拉去<code>mysql</code>的镜像：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker pull mysql</div></pre></td></tr></table></figure>\n<p>创建<code>mysql</code>容器，并挂载数据卷<code>sqldata</code>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run <span class=\"_\">-d</span> --name myMysql --volumes-from sqldata <span class=\"_\">-e</span> MYSQL_ROOT_PASSWORD=123456 -p 3306:3306 mysql</div></pre></td></tr></table></figure>\n<p>这个命令会创建一个MySQL容器，为<code>root</code>用户设置密码为<code>123456</code>，并且挂载<code>sqldata</code>数据卷。</p>\n<p>进入到<code>myMysql</code>容器中，并且登录到mysql服务器：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker <span class=\"built_in\">exec</span> -t -i myMysql /bin/bash</div><div class=\"line\">mysql -uroot -p</div></pre></td></tr></table></figure>\n<p>这时候，root用户只能通过<code>localhost</code>访问，增加用户，授予其对应权限：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">grant all on *.* to <span class=\"string\">'test'</span>@<span class=\"string\">'%'</span> identified by <span class=\"string\">'1234'</span>;</div></pre></td></tr></table></figure>\n<p>创建<code>test</code>用户后，就可以以正常访问mysql数据库的方式远程访问<code>myMysql</code>容器了。</p>\n<h2 id=\"通过数据卷容器备份、恢复和迁移数据\"><a href=\"#通过数据卷容器备份、恢复和迁移数据\" class=\"headerlink\" title=\"通过数据卷容器备份、恢复和迁移数据\"></a>通过数据卷容器备份、恢复和迁移数据</h2><h3 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h3><p>创建一个新容器，加载<code>sqldata</code>容器中的数据卷，并从主机挂载当前目录到容器的<code>/backup</code>目录。容器启动后，将<code>sqldata</code>数据卷备份为当前容器中的<code>/backup/backup.tar</code>文件。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run --volumes-from sqldata -v $(<span class=\"built_in\">pwd</span>):/backup ubuntu tar cvf /backup/backup.tar /data/mysql</div></pre></td></tr></table></figure>\n<h3 id=\"恢复\"><a href=\"#恢复\" class=\"headerlink\" title=\"恢复\"></a>恢复</h3><p>先创建一个带有空的数据卷的容器：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -v /data/mysql:/var/lib/mysql --name backupdata ubuntu /bin/bash</div></pre></td></tr></table></figure>\n<p>再创建另一个容器，挂载<code>backupdata</code>容器中的数据卷，解压备份文件到挂载的容器数据卷中：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run --volumes-from backupdata -v $(<span class=\"built_in\">pwd</span>):/backup busybox tar xvf /backup/backup.tar</div></pre></td></tr></table></figure>"},{"title":"Docker容器间的互联","date":"2017-11-08T08:55:53.000Z","_content":"> 这是voidAlex原创的第十六篇博文。\n<!-- more -->\n\n在Docker中，容器间是相互独立的。各个容器有自己的进程空间、文件系统、网络空间等。然而，容器如果不能和外界通信，是没用什么卵用的。它们只有相互通信的时候才能发挥作用。\n\n## 端口映射\n\n实际上，在之前使用`Spring Boot`和`mysql`的文章中已经在使用端口绑定了。在启动容器的时候可以可以加`-p`参数将容器的端口绑定到宿主机的端口：\n\n```sh\ndocker run -d --name myMysql --volumes-from sqldata -e MYSQL_ROOT_PASSWORD=123456 -p 3307:3306 mysql\n```\n\n上面这条命令就是将`mysql`在容器中的`3306`端口映射到了宿主机的`3307`端口。然后通过宿主机的IP和端口，就能在外部访问这个`mysql`容器了。\n\n## 容器链接\n\n使用容器链接可以更方便的实现容器间互联。将一个容器链接到另一个容器时，Docker会添加一些环境变量来获取关联容器之间的信息。在启动容器的时候使用`--link`参数来链接其他容器：\n\n```sh\ndocker run -p 8848:8848 --name jzfp --link myMysql -t jzfp/gsjzfp\n```\n\n启动后，该容器会将`myMysql`的网络信息以环境变量的形式添加到`jzfp`容器中，使得这个容器能够访问它。\n\n## 实例\n\n在Docker部署`Spring Boot`应用，并且通过容器链接来访问`mysql`中的数据。\n\n### 启动mysql容器\n\n首先启动一个`mysql`容器，映射到宿主机的`8849`端口：\n\n```sh\ndocker run -d --name myMysql --volumes-from sqldata -e MYSQL_ROOT_PASSWORD=123456 -p 8849:3306 mysql\n```\n\n进入容器，设置外部访问账户：\n\n```sh\ndocker exec -t -i myMysql /bin/bash\nmysql -uroot -p\ngrant all on *.* to 'test'@'%' identified by '1234';\n```\n\n这时候，容器外部可以通过`8849`端口，使用`test`账户访问`mysql`。\n\n### 配置Spring Boot数据库连接\n\n修改`application.properties`中的数据库连接配置：\n\n```sh\nspring.datasource.url = jdbc:mysql://myMysql:3306/jzfpsd?characterEncoding=UTF-8\nspring.datasource.username = test\nspring.datasource.password = 1234\nspring.datasource.driver-class-name = com.mysql.jdbc.Driver\n```\n\n可以看到，我们直接配置了数据库的IP地址为`myMysql`容器的名称。在启动该容器链接到`myMysql`后，即可通过Docker添加的环境变量去访问`myMysql`容器。\n\n编译`Spring Boot`应用并生成镜像：\n\n```sh\nmvn clean package -Dmaven.test.skip=true docker:build\n```\n\n### 启动Spring Boot容器，链接到mysql\n\n```sh\ndocker run -p 8848:8848 --name jzfp --link myMysql -t jzfp/gsjzfp\n```\n\n### 总结\n\n使用Docker，即可在一台宿主机上实现数据库与WEB应用的分离。而且由于容器间链接和数据卷的特性，我们可以很方便的使用Docker打包数据文件和镜像，真正的实现一次打包，到处运行。","source":"_posts/Docker容器间的互联.md","raw":"---\ntitle: Docker容器间的互联\ndate: 2017-11-08 16:55:53\ntags: ['Docker']\n---\n> 这是voidAlex原创的第十六篇博文。\n<!-- more -->\n\n在Docker中，容器间是相互独立的。各个容器有自己的进程空间、文件系统、网络空间等。然而，容器如果不能和外界通信，是没用什么卵用的。它们只有相互通信的时候才能发挥作用。\n\n## 端口映射\n\n实际上，在之前使用`Spring Boot`和`mysql`的文章中已经在使用端口绑定了。在启动容器的时候可以可以加`-p`参数将容器的端口绑定到宿主机的端口：\n\n```sh\ndocker run -d --name myMysql --volumes-from sqldata -e MYSQL_ROOT_PASSWORD=123456 -p 3307:3306 mysql\n```\n\n上面这条命令就是将`mysql`在容器中的`3306`端口映射到了宿主机的`3307`端口。然后通过宿主机的IP和端口，就能在外部访问这个`mysql`容器了。\n\n## 容器链接\n\n使用容器链接可以更方便的实现容器间互联。将一个容器链接到另一个容器时，Docker会添加一些环境变量来获取关联容器之间的信息。在启动容器的时候使用`--link`参数来链接其他容器：\n\n```sh\ndocker run -p 8848:8848 --name jzfp --link myMysql -t jzfp/gsjzfp\n```\n\n启动后，该容器会将`myMysql`的网络信息以环境变量的形式添加到`jzfp`容器中，使得这个容器能够访问它。\n\n## 实例\n\n在Docker部署`Spring Boot`应用，并且通过容器链接来访问`mysql`中的数据。\n\n### 启动mysql容器\n\n首先启动一个`mysql`容器，映射到宿主机的`8849`端口：\n\n```sh\ndocker run -d --name myMysql --volumes-from sqldata -e MYSQL_ROOT_PASSWORD=123456 -p 8849:3306 mysql\n```\n\n进入容器，设置外部访问账户：\n\n```sh\ndocker exec -t -i myMysql /bin/bash\nmysql -uroot -p\ngrant all on *.* to 'test'@'%' identified by '1234';\n```\n\n这时候，容器外部可以通过`8849`端口，使用`test`账户访问`mysql`。\n\n### 配置Spring Boot数据库连接\n\n修改`application.properties`中的数据库连接配置：\n\n```sh\nspring.datasource.url = jdbc:mysql://myMysql:3306/jzfpsd?characterEncoding=UTF-8\nspring.datasource.username = test\nspring.datasource.password = 1234\nspring.datasource.driver-class-name = com.mysql.jdbc.Driver\n```\n\n可以看到，我们直接配置了数据库的IP地址为`myMysql`容器的名称。在启动该容器链接到`myMysql`后，即可通过Docker添加的环境变量去访问`myMysql`容器。\n\n编译`Spring Boot`应用并生成镜像：\n\n```sh\nmvn clean package -Dmaven.test.skip=true docker:build\n```\n\n### 启动Spring Boot容器，链接到mysql\n\n```sh\ndocker run -p 8848:8848 --name jzfp --link myMysql -t jzfp/gsjzfp\n```\n\n### 总结\n\n使用Docker，即可在一台宿主机上实现数据库与WEB应用的分离。而且由于容器间链接和数据卷的特性，我们可以很方便的使用Docker打包数据文件和镜像，真正的实现一次打包，到处运行。","slug":"Docker容器间的互联","published":1,"updated":"2017-11-10T09:26:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhhhvn2o000527xukcyekkep","content":"<blockquote>\n<p>这是voidAlex原创的第十六篇博文。<br><a id=\"more\"></a></p>\n</blockquote>\n<p>在Docker中，容器间是相互独立的。各个容器有自己的进程空间、文件系统、网络空间等。然而，容器如果不能和外界通信，是没用什么卵用的。它们只有相互通信的时候才能发挥作用。</p>\n<h2 id=\"端口映射\"><a href=\"#端口映射\" class=\"headerlink\" title=\"端口映射\"></a>端口映射</h2><p>实际上，在之前使用<code>Spring Boot</code>和<code>mysql</code>的文章中已经在使用端口绑定了。在启动容器的时候可以可以加<code>-p</code>参数将容器的端口绑定到宿主机的端口：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run <span class=\"_\">-d</span> --name myMysql --volumes-from sqldata <span class=\"_\">-e</span> MYSQL_ROOT_PASSWORD=123456 -p 3307:3306 mysql</div></pre></td></tr></table></figure>\n<p>上面这条命令就是将<code>mysql</code>在容器中的<code>3306</code>端口映射到了宿主机的<code>3307</code>端口。然后通过宿主机的IP和端口，就能在外部访问这个<code>mysql</code>容器了。</p>\n<h2 id=\"容器链接\"><a href=\"#容器链接\" class=\"headerlink\" title=\"容器链接\"></a>容器链接</h2><p>使用容器链接可以更方便的实现容器间互联。将一个容器链接到另一个容器时，Docker会添加一些环境变量来获取关联容器之间的信息。在启动容器的时候使用<code>--link</code>参数来链接其他容器：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -p 8848:8848 --name jzfp --link myMysql -t jzfp/gsjzfp</div></pre></td></tr></table></figure>\n<p>启动后，该容器会将<code>myMysql</code>的网络信息以环境变量的形式添加到<code>jzfp</code>容器中，使得这个容器能够访问它。</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>在Docker部署<code>Spring Boot</code>应用，并且通过容器链接来访问<code>mysql</code>中的数据。</p>\n<h3 id=\"启动mysql容器\"><a href=\"#启动mysql容器\" class=\"headerlink\" title=\"启动mysql容器\"></a>启动mysql容器</h3><p>首先启动一个<code>mysql</code>容器，映射到宿主机的<code>8849</code>端口：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run <span class=\"_\">-d</span> --name myMysql --volumes-from sqldata <span class=\"_\">-e</span> MYSQL_ROOT_PASSWORD=123456 -p 8849:3306 mysql</div></pre></td></tr></table></figure>\n<p>进入容器，设置外部访问账户：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker <span class=\"built_in\">exec</span> -t -i myMysql /bin/bash</div><div class=\"line\">mysql -uroot -p</div><div class=\"line\">grant all on *.* to <span class=\"string\">'test'</span>@<span class=\"string\">'%'</span> identified by <span class=\"string\">'1234'</span>;</div></pre></td></tr></table></figure>\n<p>这时候，容器外部可以通过<code>8849</code>端口，使用<code>test</code>账户访问<code>mysql</code>。</p>\n<h3 id=\"配置Spring-Boot数据库连接\"><a href=\"#配置Spring-Boot数据库连接\" class=\"headerlink\" title=\"配置Spring Boot数据库连接\"></a>配置Spring Boot数据库连接</h3><p>修改<code>application.properties</code>中的数据库连接配置：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">spring.datasource.url = jdbc:mysql://myMysql:3306/jzfpsd?characterEncoding=UTF-8</div><div class=\"line\">spring.datasource.username = <span class=\"built_in\">test</span></div><div class=\"line\">spring.datasource.password = 1234</div><div class=\"line\">spring.datasource.driver-class-name = com.mysql.jdbc.Driver</div></pre></td></tr></table></figure>\n<p>可以看到，我们直接配置了数据库的IP地址为<code>myMysql</code>容器的名称。在启动该容器链接到<code>myMysql</code>后，即可通过Docker添加的环境变量去访问<code>myMysql</code>容器。</p>\n<p>编译<code>Spring Boot</code>应用并生成镜像：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mvn clean package -Dmaven.test.skip=<span class=\"literal\">true</span> docker:build</div></pre></td></tr></table></figure>\n<h3 id=\"启动Spring-Boot容器，链接到mysql\"><a href=\"#启动Spring-Boot容器，链接到mysql\" class=\"headerlink\" title=\"启动Spring Boot容器，链接到mysql\"></a>启动Spring Boot容器，链接到mysql</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -p 8848:8848 --name jzfp --link myMysql -t jzfp/gsjzfp</div></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>使用Docker，即可在一台宿主机上实现数据库与WEB应用的分离。而且由于容器间链接和数据卷的特性，我们可以很方便的使用Docker打包数据文件和镜像，真正的实现一次打包，到处运行。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是voidAlex原创的第十六篇博文。<br>","more":"</p>\n</blockquote>\n<p>在Docker中，容器间是相互独立的。各个容器有自己的进程空间、文件系统、网络空间等。然而，容器如果不能和外界通信，是没用什么卵用的。它们只有相互通信的时候才能发挥作用。</p>\n<h2 id=\"端口映射\"><a href=\"#端口映射\" class=\"headerlink\" title=\"端口映射\"></a>端口映射</h2><p>实际上，在之前使用<code>Spring Boot</code>和<code>mysql</code>的文章中已经在使用端口绑定了。在启动容器的时候可以可以加<code>-p</code>参数将容器的端口绑定到宿主机的端口：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run <span class=\"_\">-d</span> --name myMysql --volumes-from sqldata <span class=\"_\">-e</span> MYSQL_ROOT_PASSWORD=123456 -p 3307:3306 mysql</div></pre></td></tr></table></figure>\n<p>上面这条命令就是将<code>mysql</code>在容器中的<code>3306</code>端口映射到了宿主机的<code>3307</code>端口。然后通过宿主机的IP和端口，就能在外部访问这个<code>mysql</code>容器了。</p>\n<h2 id=\"容器链接\"><a href=\"#容器链接\" class=\"headerlink\" title=\"容器链接\"></a>容器链接</h2><p>使用容器链接可以更方便的实现容器间互联。将一个容器链接到另一个容器时，Docker会添加一些环境变量来获取关联容器之间的信息。在启动容器的时候使用<code>--link</code>参数来链接其他容器：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -p 8848:8848 --name jzfp --link myMysql -t jzfp/gsjzfp</div></pre></td></tr></table></figure>\n<p>启动后，该容器会将<code>myMysql</code>的网络信息以环境变量的形式添加到<code>jzfp</code>容器中，使得这个容器能够访问它。</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>在Docker部署<code>Spring Boot</code>应用，并且通过容器链接来访问<code>mysql</code>中的数据。</p>\n<h3 id=\"启动mysql容器\"><a href=\"#启动mysql容器\" class=\"headerlink\" title=\"启动mysql容器\"></a>启动mysql容器</h3><p>首先启动一个<code>mysql</code>容器，映射到宿主机的<code>8849</code>端口：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run <span class=\"_\">-d</span> --name myMysql --volumes-from sqldata <span class=\"_\">-e</span> MYSQL_ROOT_PASSWORD=123456 -p 8849:3306 mysql</div></pre></td></tr></table></figure>\n<p>进入容器，设置外部访问账户：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker <span class=\"built_in\">exec</span> -t -i myMysql /bin/bash</div><div class=\"line\">mysql -uroot -p</div><div class=\"line\">grant all on *.* to <span class=\"string\">'test'</span>@<span class=\"string\">'%'</span> identified by <span class=\"string\">'1234'</span>;</div></pre></td></tr></table></figure>\n<p>这时候，容器外部可以通过<code>8849</code>端口，使用<code>test</code>账户访问<code>mysql</code>。</p>\n<h3 id=\"配置Spring-Boot数据库连接\"><a href=\"#配置Spring-Boot数据库连接\" class=\"headerlink\" title=\"配置Spring Boot数据库连接\"></a>配置Spring Boot数据库连接</h3><p>修改<code>application.properties</code>中的数据库连接配置：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">spring.datasource.url = jdbc:mysql://myMysql:3306/jzfpsd?characterEncoding=UTF-8</div><div class=\"line\">spring.datasource.username = <span class=\"built_in\">test</span></div><div class=\"line\">spring.datasource.password = 1234</div><div class=\"line\">spring.datasource.driver-class-name = com.mysql.jdbc.Driver</div></pre></td></tr></table></figure>\n<p>可以看到，我们直接配置了数据库的IP地址为<code>myMysql</code>容器的名称。在启动该容器链接到<code>myMysql</code>后，即可通过Docker添加的环境变量去访问<code>myMysql</code>容器。</p>\n<p>编译<code>Spring Boot</code>应用并生成镜像：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mvn clean package -Dmaven.test.skip=<span class=\"literal\">true</span> docker:build</div></pre></td></tr></table></figure>\n<h3 id=\"启动Spring-Boot容器，链接到mysql\"><a href=\"#启动Spring-Boot容器，链接到mysql\" class=\"headerlink\" title=\"启动Spring Boot容器，链接到mysql\"></a>启动Spring Boot容器，链接到mysql</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -p 8848:8848 --name jzfp --link myMysql -t jzfp/gsjzfp</div></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>使用Docker，即可在一台宿主机上实现数据库与WEB应用的分离。而且由于容器间链接和数据卷的特性，我们可以很方便的使用Docker打包数据文件和镜像，真正的实现一次打包，到处运行。</p>"},{"title":"Gitlab不靠谱搭建指南","date":"2017-11-01T11:20:34.000Z","_content":"> 在Ubuntu 16.04下快速搭建Gitlab并汉化。\n> 这是voidAlex原创的第八篇博文。\n<!-- more -->\n\n## 配置ip\n\n### 使用`ifconfig`查看网卡名称，然后修改配置文件\n\n### 修改`/etc/network/interfaces`\n\n```sh\nsudo vi /etc/network/interfaces\n```\n\n将内容修改为：\n\n```sh\nauto ens33\niface ens33 inet static\naddress 202.201.53.159\ngateway 202.201.53.128\nnetmask 255.255.255.0  \n```\n\n### 重启网络，使之生效：\n\n```sh\nsudo /etc/init.d/networking restart\n```\n\n### 配置DNS：\n\n```sh\nsudo vi /etc/resolvconf/resolv.conf.d/base\n```\n\n添加：\n\n```sh\nnameserver 223.5.5.5\nnameserver 223.6.6.6\n```\n\n保存后执行：\n\n```sh\nresolvconf -u\n```\n\n### 重启网络\n\n```sh\nsudo ifdown ens33 && sudo ifup ens33\n```\n\n## 更新apt，安装ssh和git\n\n```sh\nsudo apt-get update\nsudo apt install ssh\nsudo apt install git\n```\n\n测试ssh安装是否成功：\n\n```sh\nssh localhost\n```\n\n## 安装Gitlab并配置依赖关系\n\n### 安装邮件服务器：\n\n```sh\nsudo apt-get install curl openssh-server ca-certificates postfix\n```\n\n### 配置安装源：\n\n```sh\ncurl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash\n```\n\n### 安装Gitlab并初始化\n\n```sh\nsudo apt install gitlab-ce\nsudo gitlab-ctl reconfigure\n```\n\n### 修改host\n\n修改`/etc/gitlab/gitlab.rb`中的`external_url`：\n\n```sh\nexternal_url 'http://nwnu.git.com'\n```\n\n在`/etc/hosts`中添加hosts映射：\n\n```sh\n127.0.0.1   nwnu.git.com\n```\n\n让Gitlab配置生效：\n\n```sh\nsudo gitlab-ctl reconfigure\n```\n\n## 汉化Gitlab\n\n### 确定Gitlab的版本\n\n```sh\nsudo cat /opt/gitlab/embedded/service/gitlab-rails/VERSION\n```\n\n### clone汉化版本库\n\n```sh\ngit clone https://gitlab.com/xhang/gitlab.git\n```\n\n### 导出diff文件并补丁\n\n```sh\nsudo git diff v10.1.0 v10.1.0-zh > ../10.1.0-zh.diff\nsudo gitlab-ctl stop\nsudo patch -d /opt/gitlab/embedded/service/gitlab-rails -p1 < 10.1.0-zh.diff\n```\n\n### 重启Gitlab\n\n```sh\nsudo gitlab-ctl start\nsudo gitlab-ctl reconfigure\n```\n\n## 备份\n\nGitlab默认的备份目录在`/var/opt/gitlab/backups`。\n\n### 手动备份\n\n```sh\nsudo gitlab-rake gitlab:backup:create\n```\n\n### 自动备份\n\n```sh\n# 每天2点备份\n0 2 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create CRON=1\n```\n\n### 恢复\n\n恢复之前，确保备份文件所安装 GitLab 和当前要恢复的 GitLab 版本一致。首先，恢复配置文件：\n\n```sh\nsudo mv /etc/gitlab /etc/gitlab.$(date +%s)\n# 将下面配置备份文件的时间戳改为你所备份的文件的时间戳\nsudo tar -xf etc-gitlab-1399948539.tar -C /\n```\n\n恢复数据文件：\n\n```sh\n# 将数据备份文件拷贝至备份目录\nsudo cp 1393513186_gitlab_backup.tar /var/opt/gitlab/backups/\n\n# 停止连接数据库的进程\nsudo gitlab-ctl stop unicorn\nsudo gitlab-ctl stop sidekiq\n\n# 恢复1393513186这个备份文件，将覆盖GitLab数据库！\nsudo gitlab-rake gitlab:backup:restore BACKUP=1393513186\n\n# 启动 GitLab\nsudo gitlab-ctl start\n\n# 检查 GitLab\nsudo gitlab-rake gitlab:check SANITIZE=true\n```","source":"_posts/Gitlab不靠谱搭建指南.md","raw":"---\ntitle: Gitlab不靠谱搭建指南\ndate: 2017-11-01 19:20:34\ntags: ['Gitlab','配置']\n---\n> 在Ubuntu 16.04下快速搭建Gitlab并汉化。\n> 这是voidAlex原创的第八篇博文。\n<!-- more -->\n\n## 配置ip\n\n### 使用`ifconfig`查看网卡名称，然后修改配置文件\n\n### 修改`/etc/network/interfaces`\n\n```sh\nsudo vi /etc/network/interfaces\n```\n\n将内容修改为：\n\n```sh\nauto ens33\niface ens33 inet static\naddress 202.201.53.159\ngateway 202.201.53.128\nnetmask 255.255.255.0  \n```\n\n### 重启网络，使之生效：\n\n```sh\nsudo /etc/init.d/networking restart\n```\n\n### 配置DNS：\n\n```sh\nsudo vi /etc/resolvconf/resolv.conf.d/base\n```\n\n添加：\n\n```sh\nnameserver 223.5.5.5\nnameserver 223.6.6.6\n```\n\n保存后执行：\n\n```sh\nresolvconf -u\n```\n\n### 重启网络\n\n```sh\nsudo ifdown ens33 && sudo ifup ens33\n```\n\n## 更新apt，安装ssh和git\n\n```sh\nsudo apt-get update\nsudo apt install ssh\nsudo apt install git\n```\n\n测试ssh安装是否成功：\n\n```sh\nssh localhost\n```\n\n## 安装Gitlab并配置依赖关系\n\n### 安装邮件服务器：\n\n```sh\nsudo apt-get install curl openssh-server ca-certificates postfix\n```\n\n### 配置安装源：\n\n```sh\ncurl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash\n```\n\n### 安装Gitlab并初始化\n\n```sh\nsudo apt install gitlab-ce\nsudo gitlab-ctl reconfigure\n```\n\n### 修改host\n\n修改`/etc/gitlab/gitlab.rb`中的`external_url`：\n\n```sh\nexternal_url 'http://nwnu.git.com'\n```\n\n在`/etc/hosts`中添加hosts映射：\n\n```sh\n127.0.0.1   nwnu.git.com\n```\n\n让Gitlab配置生效：\n\n```sh\nsudo gitlab-ctl reconfigure\n```\n\n## 汉化Gitlab\n\n### 确定Gitlab的版本\n\n```sh\nsudo cat /opt/gitlab/embedded/service/gitlab-rails/VERSION\n```\n\n### clone汉化版本库\n\n```sh\ngit clone https://gitlab.com/xhang/gitlab.git\n```\n\n### 导出diff文件并补丁\n\n```sh\nsudo git diff v10.1.0 v10.1.0-zh > ../10.1.0-zh.diff\nsudo gitlab-ctl stop\nsudo patch -d /opt/gitlab/embedded/service/gitlab-rails -p1 < 10.1.0-zh.diff\n```\n\n### 重启Gitlab\n\n```sh\nsudo gitlab-ctl start\nsudo gitlab-ctl reconfigure\n```\n\n## 备份\n\nGitlab默认的备份目录在`/var/opt/gitlab/backups`。\n\n### 手动备份\n\n```sh\nsudo gitlab-rake gitlab:backup:create\n```\n\n### 自动备份\n\n```sh\n# 每天2点备份\n0 2 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create CRON=1\n```\n\n### 恢复\n\n恢复之前，确保备份文件所安装 GitLab 和当前要恢复的 GitLab 版本一致。首先，恢复配置文件：\n\n```sh\nsudo mv /etc/gitlab /etc/gitlab.$(date +%s)\n# 将下面配置备份文件的时间戳改为你所备份的文件的时间戳\nsudo tar -xf etc-gitlab-1399948539.tar -C /\n```\n\n恢复数据文件：\n\n```sh\n# 将数据备份文件拷贝至备份目录\nsudo cp 1393513186_gitlab_backup.tar /var/opt/gitlab/backups/\n\n# 停止连接数据库的进程\nsudo gitlab-ctl stop unicorn\nsudo gitlab-ctl stop sidekiq\n\n# 恢复1393513186这个备份文件，将覆盖GitLab数据库！\nsudo gitlab-rake gitlab:backup:restore BACKUP=1393513186\n\n# 启动 GitLab\nsudo gitlab-ctl start\n\n# 检查 GitLab\nsudo gitlab-rake gitlab:check SANITIZE=true\n```","slug":"Gitlab不靠谱搭建指南","published":1,"updated":"2017-11-10T09:27:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhhhvn2s000727xux51f0r4r","content":"<blockquote>\n<p>在Ubuntu 16.04下快速搭建Gitlab并汉化。<br>这是voidAlex原创的第八篇博文。<br><a id=\"more\"></a></p>\n</blockquote>\n<h2 id=\"配置ip\"><a href=\"#配置ip\" class=\"headerlink\" title=\"配置ip\"></a>配置ip</h2><h3 id=\"使用ifconfig查看网卡名称，然后修改配置文件\"><a href=\"#使用ifconfig查看网卡名称，然后修改配置文件\" class=\"headerlink\" title=\"使用ifconfig查看网卡名称，然后修改配置文件\"></a>使用<code>ifconfig</code>查看网卡名称，然后修改配置文件</h3><h3 id=\"修改-etc-network-interfaces\"><a href=\"#修改-etc-network-interfaces\" class=\"headerlink\" title=\"修改/etc/network/interfaces\"></a>修改<code>/etc/network/interfaces</code></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vi /etc/network/interfaces</div></pre></td></tr></table></figure>\n<p>将内容修改为：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">auto ens33</div><div class=\"line\">iface ens33 inet static</div><div class=\"line\">address 202.201.53.159</div><div class=\"line\">gateway 202.201.53.128</div><div class=\"line\">netmask 255.255.255.0</div></pre></td></tr></table></figure>\n<h3 id=\"重启网络，使之生效：\"><a href=\"#重启网络，使之生效：\" class=\"headerlink\" title=\"重启网络，使之生效：\"></a>重启网络，使之生效：</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo /etc/init.d/networking restart</div></pre></td></tr></table></figure>\n<h3 id=\"配置DNS：\"><a href=\"#配置DNS：\" class=\"headerlink\" title=\"配置DNS：\"></a>配置DNS：</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vi /etc/resolvconf/resolv.conf.d/base</div></pre></td></tr></table></figure>\n<p>添加：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">nameserver 223.5.5.5</div><div class=\"line\">nameserver 223.6.6.6</div></pre></td></tr></table></figure>\n<p>保存后执行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">resolvconf -u</div></pre></td></tr></table></figure>\n<h3 id=\"重启网络\"><a href=\"#重启网络\" class=\"headerlink\" title=\"重启网络\"></a>重启网络</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo ifdown ens33 &amp;&amp; sudo ifup ens33</div></pre></td></tr></table></figure>\n<h2 id=\"更新apt，安装ssh和git\"><a href=\"#更新apt，安装ssh和git\" class=\"headerlink\" title=\"更新apt，安装ssh和git\"></a>更新apt，安装ssh和git</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt install ssh</div><div class=\"line\">sudo apt install git</div></pre></td></tr></table></figure>\n<p>测试ssh安装是否成功：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh localhost</div></pre></td></tr></table></figure>\n<h2 id=\"安装Gitlab并配置依赖关系\"><a href=\"#安装Gitlab并配置依赖关系\" class=\"headerlink\" title=\"安装Gitlab并配置依赖关系\"></a>安装Gitlab并配置依赖关系</h2><h3 id=\"安装邮件服务器：\"><a href=\"#安装邮件服务器：\" class=\"headerlink\" title=\"安装邮件服务器：\"></a>安装邮件服务器：</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install curl openssh-server ca-certificates postfix</div></pre></td></tr></table></figure>\n<h3 id=\"配置安装源：\"><a href=\"#配置安装源：\" class=\"headerlink\" title=\"配置安装源：\"></a>配置安装源：</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash</div></pre></td></tr></table></figure>\n<h3 id=\"安装Gitlab并初始化\"><a href=\"#安装Gitlab并初始化\" class=\"headerlink\" title=\"安装Gitlab并初始化\"></a>安装Gitlab并初始化</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt install gitlab-ce</div><div class=\"line\">sudo gitlab-ctl reconfigure</div></pre></td></tr></table></figure>\n<h3 id=\"修改host\"><a href=\"#修改host\" class=\"headerlink\" title=\"修改host\"></a>修改host</h3><p>修改<code>/etc/gitlab/gitlab.rb</code>中的<code>external_url</code>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">external_url <span class=\"string\">'http://nwnu.git.com'</span></div></pre></td></tr></table></figure>\n<p>在<code>/etc/hosts</code>中添加hosts映射：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">127.0.0.1   nwnu.git.com</div></pre></td></tr></table></figure>\n<p>让Gitlab配置生效：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gitlab-ctl reconfigure</div></pre></td></tr></table></figure>\n<h2 id=\"汉化Gitlab\"><a href=\"#汉化Gitlab\" class=\"headerlink\" title=\"汉化Gitlab\"></a>汉化Gitlab</h2><h3 id=\"确定Gitlab的版本\"><a href=\"#确定Gitlab的版本\" class=\"headerlink\" title=\"确定Gitlab的版本\"></a>确定Gitlab的版本</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo cat /opt/gitlab/embedded/service/gitlab-rails/VERSION</div></pre></td></tr></table></figure>\n<h3 id=\"clone汉化版本库\"><a href=\"#clone汉化版本库\" class=\"headerlink\" title=\"clone汉化版本库\"></a>clone汉化版本库</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> https://gitlab.com/xhang/gitlab.git</div></pre></td></tr></table></figure>\n<h3 id=\"导出diff文件并补丁\"><a href=\"#导出diff文件并补丁\" class=\"headerlink\" title=\"导出diff文件并补丁\"></a>导出diff文件并补丁</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo git diff v10.1.0 v10.1.0-zh &gt; ../10.1.0-zh.diff</div><div class=\"line\">sudo gitlab-ctl stop</div><div class=\"line\">sudo patch <span class=\"_\">-d</span> /opt/gitlab/embedded/service/gitlab-rails -p1 &lt; 10.1.0-zh.diff</div></pre></td></tr></table></figure>\n<h3 id=\"重启Gitlab\"><a href=\"#重启Gitlab\" class=\"headerlink\" title=\"重启Gitlab\"></a>重启Gitlab</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gitlab-ctl start</div><div class=\"line\">sudo gitlab-ctl reconfigure</div></pre></td></tr></table></figure>\n<h2 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h2><p>Gitlab默认的备份目录在<code>/var/opt/gitlab/backups</code>。</p>\n<h3 id=\"手动备份\"><a href=\"#手动备份\" class=\"headerlink\" title=\"手动备份\"></a>手动备份</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gitlab-rake gitlab:backup:create</div></pre></td></tr></table></figure>\n<h3 id=\"自动备份\"><a href=\"#自动备份\" class=\"headerlink\" title=\"自动备份\"></a>自动备份</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 每天2点备份</span></div><div class=\"line\">0 2 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create CRON=1</div></pre></td></tr></table></figure>\n<h3 id=\"恢复\"><a href=\"#恢复\" class=\"headerlink\" title=\"恢复\"></a>恢复</h3><p>恢复之前，确保备份文件所安装 GitLab 和当前要恢复的 GitLab 版本一致。首先，恢复配置文件：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mv /etc/gitlab /etc/gitlab.$(date +%s)</div><div class=\"line\"><span class=\"comment\"># 将下面配置备份文件的时间戳改为你所备份的文件的时间戳</span></div><div class=\"line\">sudo tar -xf etc-gitlab-1399948539.tar -C /</div></pre></td></tr></table></figure>\n<p>恢复数据文件：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 将数据备份文件拷贝至备份目录</span></div><div class=\"line\">sudo cp 1393513186_gitlab_backup.tar /var/opt/gitlab/backups/</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 停止连接数据库的进程</span></div><div class=\"line\">sudo gitlab-ctl stop unicorn</div><div class=\"line\">sudo gitlab-ctl stop sidekiq</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 恢复1393513186这个备份文件，将覆盖GitLab数据库！</span></div><div class=\"line\">sudo gitlab-rake gitlab:backup:restore BACKUP=1393513186</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 启动 GitLab</span></div><div class=\"line\">sudo gitlab-ctl start</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 检查 GitLab</span></div><div class=\"line\">sudo gitlab-rake gitlab:check SANITIZE=<span class=\"literal\">true</span></div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<blockquote>\n<p>在Ubuntu 16.04下快速搭建Gitlab并汉化。<br>这是voidAlex原创的第八篇博文。<br>","more":"</p>\n</blockquote>\n<h2 id=\"配置ip\"><a href=\"#配置ip\" class=\"headerlink\" title=\"配置ip\"></a>配置ip</h2><h3 id=\"使用ifconfig查看网卡名称，然后修改配置文件\"><a href=\"#使用ifconfig查看网卡名称，然后修改配置文件\" class=\"headerlink\" title=\"使用ifconfig查看网卡名称，然后修改配置文件\"></a>使用<code>ifconfig</code>查看网卡名称，然后修改配置文件</h3><h3 id=\"修改-etc-network-interfaces\"><a href=\"#修改-etc-network-interfaces\" class=\"headerlink\" title=\"修改/etc/network/interfaces\"></a>修改<code>/etc/network/interfaces</code></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vi /etc/network/interfaces</div></pre></td></tr></table></figure>\n<p>将内容修改为：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">auto ens33</div><div class=\"line\">iface ens33 inet static</div><div class=\"line\">address 202.201.53.159</div><div class=\"line\">gateway 202.201.53.128</div><div class=\"line\">netmask 255.255.255.0</div></pre></td></tr></table></figure>\n<h3 id=\"重启网络，使之生效：\"><a href=\"#重启网络，使之生效：\" class=\"headerlink\" title=\"重启网络，使之生效：\"></a>重启网络，使之生效：</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo /etc/init.d/networking restart</div></pre></td></tr></table></figure>\n<h3 id=\"配置DNS：\"><a href=\"#配置DNS：\" class=\"headerlink\" title=\"配置DNS：\"></a>配置DNS：</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vi /etc/resolvconf/resolv.conf.d/base</div></pre></td></tr></table></figure>\n<p>添加：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">nameserver 223.5.5.5</div><div class=\"line\">nameserver 223.6.6.6</div></pre></td></tr></table></figure>\n<p>保存后执行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">resolvconf -u</div></pre></td></tr></table></figure>\n<h3 id=\"重启网络\"><a href=\"#重启网络\" class=\"headerlink\" title=\"重启网络\"></a>重启网络</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo ifdown ens33 &amp;&amp; sudo ifup ens33</div></pre></td></tr></table></figure>\n<h2 id=\"更新apt，安装ssh和git\"><a href=\"#更新apt，安装ssh和git\" class=\"headerlink\" title=\"更新apt，安装ssh和git\"></a>更新apt，安装ssh和git</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt install ssh</div><div class=\"line\">sudo apt install git</div></pre></td></tr></table></figure>\n<p>测试ssh安装是否成功：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh localhost</div></pre></td></tr></table></figure>\n<h2 id=\"安装Gitlab并配置依赖关系\"><a href=\"#安装Gitlab并配置依赖关系\" class=\"headerlink\" title=\"安装Gitlab并配置依赖关系\"></a>安装Gitlab并配置依赖关系</h2><h3 id=\"安装邮件服务器：\"><a href=\"#安装邮件服务器：\" class=\"headerlink\" title=\"安装邮件服务器：\"></a>安装邮件服务器：</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install curl openssh-server ca-certificates postfix</div></pre></td></tr></table></figure>\n<h3 id=\"配置安装源：\"><a href=\"#配置安装源：\" class=\"headerlink\" title=\"配置安装源：\"></a>配置安装源：</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash</div></pre></td></tr></table></figure>\n<h3 id=\"安装Gitlab并初始化\"><a href=\"#安装Gitlab并初始化\" class=\"headerlink\" title=\"安装Gitlab并初始化\"></a>安装Gitlab并初始化</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt install gitlab-ce</div><div class=\"line\">sudo gitlab-ctl reconfigure</div></pre></td></tr></table></figure>\n<h3 id=\"修改host\"><a href=\"#修改host\" class=\"headerlink\" title=\"修改host\"></a>修改host</h3><p>修改<code>/etc/gitlab/gitlab.rb</code>中的<code>external_url</code>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">external_url <span class=\"string\">'http://nwnu.git.com'</span></div></pre></td></tr></table></figure>\n<p>在<code>/etc/hosts</code>中添加hosts映射：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">127.0.0.1   nwnu.git.com</div></pre></td></tr></table></figure>\n<p>让Gitlab配置生效：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gitlab-ctl reconfigure</div></pre></td></tr></table></figure>\n<h2 id=\"汉化Gitlab\"><a href=\"#汉化Gitlab\" class=\"headerlink\" title=\"汉化Gitlab\"></a>汉化Gitlab</h2><h3 id=\"确定Gitlab的版本\"><a href=\"#确定Gitlab的版本\" class=\"headerlink\" title=\"确定Gitlab的版本\"></a>确定Gitlab的版本</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo cat /opt/gitlab/embedded/service/gitlab-rails/VERSION</div></pre></td></tr></table></figure>\n<h3 id=\"clone汉化版本库\"><a href=\"#clone汉化版本库\" class=\"headerlink\" title=\"clone汉化版本库\"></a>clone汉化版本库</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> https://gitlab.com/xhang/gitlab.git</div></pre></td></tr></table></figure>\n<h3 id=\"导出diff文件并补丁\"><a href=\"#导出diff文件并补丁\" class=\"headerlink\" title=\"导出diff文件并补丁\"></a>导出diff文件并补丁</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo git diff v10.1.0 v10.1.0-zh &gt; ../10.1.0-zh.diff</div><div class=\"line\">sudo gitlab-ctl stop</div><div class=\"line\">sudo patch <span class=\"_\">-d</span> /opt/gitlab/embedded/service/gitlab-rails -p1 &lt; 10.1.0-zh.diff</div></pre></td></tr></table></figure>\n<h3 id=\"重启Gitlab\"><a href=\"#重启Gitlab\" class=\"headerlink\" title=\"重启Gitlab\"></a>重启Gitlab</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gitlab-ctl start</div><div class=\"line\">sudo gitlab-ctl reconfigure</div></pre></td></tr></table></figure>\n<h2 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h2><p>Gitlab默认的备份目录在<code>/var/opt/gitlab/backups</code>。</p>\n<h3 id=\"手动备份\"><a href=\"#手动备份\" class=\"headerlink\" title=\"手动备份\"></a>手动备份</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gitlab-rake gitlab:backup:create</div></pre></td></tr></table></figure>\n<h3 id=\"自动备份\"><a href=\"#自动备份\" class=\"headerlink\" title=\"自动备份\"></a>自动备份</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 每天2点备份</span></div><div class=\"line\">0 2 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create CRON=1</div></pre></td></tr></table></figure>\n<h3 id=\"恢复\"><a href=\"#恢复\" class=\"headerlink\" title=\"恢复\"></a>恢复</h3><p>恢复之前，确保备份文件所安装 GitLab 和当前要恢复的 GitLab 版本一致。首先，恢复配置文件：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mv /etc/gitlab /etc/gitlab.$(date +%s)</div><div class=\"line\"><span class=\"comment\"># 将下面配置备份文件的时间戳改为你所备份的文件的时间戳</span></div><div class=\"line\">sudo tar -xf etc-gitlab-1399948539.tar -C /</div></pre></td></tr></table></figure>\n<p>恢复数据文件：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 将数据备份文件拷贝至备份目录</span></div><div class=\"line\">sudo cp 1393513186_gitlab_backup.tar /var/opt/gitlab/backups/</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 停止连接数据库的进程</span></div><div class=\"line\">sudo gitlab-ctl stop unicorn</div><div class=\"line\">sudo gitlab-ctl stop sidekiq</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 恢复1393513186这个备份文件，将覆盖GitLab数据库！</span></div><div class=\"line\">sudo gitlab-rake gitlab:backup:restore BACKUP=1393513186</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 启动 GitLab</span></div><div class=\"line\">sudo gitlab-ctl start</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 检查 GitLab</span></div><div class=\"line\">sudo gitlab-rake gitlab:check SANITIZE=<span class=\"literal\">true</span></div></pre></td></tr></table></figure>"},{"title":"Google Java Style Guide在IntelliJ IDEA中的配置","date":"2017-11-04T12:01:52.000Z","_content":"> 这是voidAlex原创的第十二篇博文。\n<!-- more -->\n\n## 下载\n\n```sh\ngit clone git@github.com:google/styleguide.git\n```\n\n## 配置\n\n在clone的仓库中找到`intellij-java-google-style.xml`这个文件，然后打开IDEA，`File->Setting->Editor->Code Style->Java`，把设置文件导入：\n\n![](http://osuro1ft2.bkt.clouddn.com//17-11-4/84524547.jpg)\n\n选择文件，然后点ok：\n\n![](http://osuro1ft2.bkt.clouddn.com//17-11-4/25350534.jpg)\n\n选择Google Style，配置完成：\n\n![](http://osuro1ft2.bkt.clouddn.com//17-11-4/34945388.jpg)","source":"_posts/Google-Java-Style-Guide在IntelliJ-IDEA中的配置.md","raw":"---\ntitle: Google Java Style Guide在IntelliJ IDEA中的配置\ndate: 2017-11-04 20:01:52\ntags: ['配置','杂记']\n---\n> 这是voidAlex原创的第十二篇博文。\n<!-- more -->\n\n## 下载\n\n```sh\ngit clone git@github.com:google/styleguide.git\n```\n\n## 配置\n\n在clone的仓库中找到`intellij-java-google-style.xml`这个文件，然后打开IDEA，`File->Setting->Editor->Code Style->Java`，把设置文件导入：\n\n![](http://osuro1ft2.bkt.clouddn.com//17-11-4/84524547.jpg)\n\n选择文件，然后点ok：\n\n![](http://osuro1ft2.bkt.clouddn.com//17-11-4/25350534.jpg)\n\n选择Google Style，配置完成：\n\n![](http://osuro1ft2.bkt.clouddn.com//17-11-4/34945388.jpg)","slug":"Google-Java-Style-Guide在IntelliJ-IDEA中的配置","published":1,"updated":"2017-11-10T09:27:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhhhvn2v000827xurqbnxkf7","content":"<blockquote>\n<p>这是voidAlex原创的第十二篇博文。<br><a id=\"more\"></a></p>\n</blockquote>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:google/styleguide.git</div></pre></td></tr></table></figure>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>在clone的仓库中找到<code>intellij-java-google-style.xml</code>这个文件，然后打开IDEA，<code>File-&gt;Setting-&gt;Editor-&gt;Code Style-&gt;Java</code>，把设置文件导入：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://osuro1ft2.bkt.clouddn.com//17-11-4/84524547.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>选择文件，然后点ok：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://osuro1ft2.bkt.clouddn.com//17-11-4/25350534.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>选择Google Style，配置完成：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://osuro1ft2.bkt.clouddn.com//17-11-4/34945388.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是voidAlex原创的第十二篇博文。<br>","more":"</p>\n</blockquote>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:google/styleguide.git</div></pre></td></tr></table></figure>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>在clone的仓库中找到<code>intellij-java-google-style.xml</code>这个文件，然后打开IDEA，<code>File-&gt;Setting-&gt;Editor-&gt;Code Style-&gt;Java</code>，把设置文件导入：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://osuro1ft2.bkt.clouddn.com//17-11-4/84524547.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>选择文件，然后点ok：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://osuro1ft2.bkt.clouddn.com//17-11-4/25350534.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>选择Google Style，配置完成：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://osuro1ft2.bkt.clouddn.com//17-11-4/34945388.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>"},{"title":"Java爬虫：上车吧！爬取妹子图","date":"2017-07-20T01:10:38.000Z","_content":"> 这是voidAlex原创的第三篇博文。\n> 源码在[我的GitHub](https://github.com/voidAlex/Meizi_Crawler)\n<!-- more -->\n\n## 爬虫\n\n上一篇博文介绍了如何模拟登录和解析JSON数据，这篇博文介绍怎么爬取不需要登录的网站的信息。\n\n上一篇博文中关于爬虫的介绍可以点[这里](https://voidalex.github.io/2017/07/09/Java%E7%88%AC%E8%99%AB%EF%BC%9A%E7%88%AC%E5%8F%96%E5%AD%A6%E6%A0%A1%E6%95%99%E5%8A%A1%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BF%A1%E6%81%AF/)查看。\n\n## 引入JSOUP\n\n在`pom.xml`中添加JSOUP依赖：\n\n```xml\n<dependency>\n    <groupId>org.jsoup</groupId>\n    <artifactId>jsoup</artifactId>\n    <version>1.10.2</version>\n</dependency>\n```\n\nJSOUP是一款Java的HTML解析库，可以解析HTML中的文本内容。它的官网地址是[https://jsoup.org/](https://jsoup.org/)。\n\n## 查看网页源码\n\n好了，要干正事了。Google一下妹子图，找到这两个网站：[http://jandan.net/ooxx](http://jandan.net/ooxx)，[http://www.youmzi.com/tuinvlang.html](http://www.youmzi.com/tuinvlang.html).先看第一个，它的源码长这样：\n\n![](http://osuro1ft2.bkt.clouddn.com//17-7-20/99168668.jpg)\n\n我们要找的是所有的img标签里的URL，然后把它下载下来。但是这样似乎只能爬取单个页面的妹子图？所以我们还要找到下一页的URL：\n\n![](http://osuro1ft2.bkt.clouddn.com//17-7-20/68438084.jpg)\n\n恩，找到了。开始写代码吧！\n\n## downloadImage方法\n\n首先写一个下载图片的方法，该方法传入图片的URL和要写入的路径，然后将文件写入本地。需要调用`java.net`包中的一些方法。\n\n```Java\npublic static boolean downloadImage(String imageUrl, String path) {\n    try {\n        //分割字符串，获得文件名\n        String filePath = path + imageUrl.substring(imageUrl.lastIndexOf(\"/\"));\n        //获得文件流\n        URL url = new URL(imageUrl);\n        HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n        connection.setConnectTimeout(10000);\n        connection.setReadTimeout(10000);\n        InputStream in = connection.getInputStream();\n\n        //写入本地文件\n        File file = new File(filePath);\n        FileOutputStream out = new FileOutputStream(file);\n        int i = 0;\n        while ((i = in.read()) != -1){\n            out.write(i);\n        }\n        System.out.println(imageUrl + \"下载成功\");\n        out.close();\n        in.close();\n        return true;\n    }catch (Exception e){\n        System.out.println(imageUrl + \"下载失败\");\n        return false;\n    }\n}\n```\n\n需要注意的是要设置超时的时间，要不然会导致很多的图片下载失败。\n\n## 解析HTML\n\n接下来我们需要理一理这个爬虫的思路：\n1. 打开这个网页。获取到网页所有图片的URL，然后遍历这些URL去下载图片；\n2. 当遍历结束后，去找下一页的URL，然后执行1；\n3. 直到找不到下一页的URL为止。\n\n### 煎蛋妹子图\n\n首先用`jsoup`中的方法获取到网页并且得到Document对象：\n\n```Java\nDocument doc = null;\ndoc = Jsoup.connect(url).get();\n```\n\n获得所有的img标签：\n\n```Java\n Elements elements = doc.getElementsByTag(\"img\");\n```\n\n遍历这些标签并且下载：\n\n```Java\nfor (Element element : elements){\n    //获取标签中src属性的绝对路径\n    String imgSrc = element.attr(\"abs:src\");\n    if (downloadImage(imgSrc, path)){\n        count ++;\n    }\n}\n```\n\n获取下一页的地址，如果没有则退出循环:\n\n```Java\ntry {\n    url = doc.getElementsByClass(\"previous-comment-page\").get(0)\n            .getElementsByTag(\"a\").attr(\"abs:href\");\n}catch (Exception e){\n    System.out.println(\"没链接了~\");\n    break;\n}\n```\n\n大功告成！\n\n### 优妹子\n\n第二个网站的略微复杂一点，上方有导航栏，每一页有若干个专题，点击进去了才是大图。所以需要爬取的链接稍微多一点。\n\n首先还是获取到网页并且得到Document对象：\n\n```Java\nDocument doc = null;\ndoc = Jsoup.connect(url).get();\n```\n\n然后获得每一个二级页面（即专题）的URL，并放到一个List里面：\n\n```Java\nElements imageUrl = doc.getElementsByClass(\"tzpic3-mzindex\").get(0).getElementsByTag(\"a\");\nArrayList<String> urlList = new ArrayList<String>();\nfor (Element element : imageUrl){\n    urlList.add(element.attr(\"abs:href\"));\n}\n```\n\n对于List里的每一个URL，去找它每一个的img标签并且获取下一页的URL：\n\n```Java\nfor (String s : urlList){\n    String next = s;\n    while (true){\n        try {\n            doc = Jsoup.connect(next).get();\n        }catch (IOException e){\n            System.out.println(url + \"请求失败\");\n        }\n        Element e = doc.getElementsByClass(\"arpic\").get(0);\n        //获取所有img标签\n        Elements elements = e.getElementsByTag(\"img\");\n        for (Element element : elements){\n            //获取标签中src属性的绝对路径\n            String imgSrc = element.attr(\"abs:src\");\n            if (downloadImage(imgSrc, path)){\n                count ++;\n            }\n        }\n        String tmp = next;\n        try {\n            Elements nextPage = doc.getElementsByClass(\"jogger2\").get(0).getElementsByTag(\"a\");\n\n            next = null;\n            for (Element element : nextPage){\n                //获取标签中src属性的绝对路径\n                if (element.text().equals(\"下一页\")){\n                    next = element.attr(\"abs:href\");\n                }\n            }\n        }catch (Exception ex){\n            System.out.println(\"没链接了~\");\n            break;\n        }\n        if (next == null || tmp.equals(next)){\n            break;\n        }\n\n    }\n\n}\n```\n\n## 运行\n\n```Java\npublic static void main(String args[]) throws Exception{\n    String path = \"image\";\n    jiandan(path);\n    youmeizi(path);\n}\n```\n\n跑了两个多小时终于跑完了，看一下战果：\n\n![](http://osuro1ft2.bkt.clouddn.com//17-7-20/40407389.jpg)\n\n恩，将近1w张。不说了，我先喝瓶营养快线去~","source":"_posts/Java爬虫：爬取妹子图.md","raw":"---\ntitle: Java爬虫：上车吧！爬取妹子图\ndate: 2017-07-20 09:10:38\ntags: ['爬虫','Java']\n---\n> 这是voidAlex原创的第三篇博文。\n> 源码在[我的GitHub](https://github.com/voidAlex/Meizi_Crawler)\n<!-- more -->\n\n## 爬虫\n\n上一篇博文介绍了如何模拟登录和解析JSON数据，这篇博文介绍怎么爬取不需要登录的网站的信息。\n\n上一篇博文中关于爬虫的介绍可以点[这里](https://voidalex.github.io/2017/07/09/Java%E7%88%AC%E8%99%AB%EF%BC%9A%E7%88%AC%E5%8F%96%E5%AD%A6%E6%A0%A1%E6%95%99%E5%8A%A1%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BF%A1%E6%81%AF/)查看。\n\n## 引入JSOUP\n\n在`pom.xml`中添加JSOUP依赖：\n\n```xml\n<dependency>\n    <groupId>org.jsoup</groupId>\n    <artifactId>jsoup</artifactId>\n    <version>1.10.2</version>\n</dependency>\n```\n\nJSOUP是一款Java的HTML解析库，可以解析HTML中的文本内容。它的官网地址是[https://jsoup.org/](https://jsoup.org/)。\n\n## 查看网页源码\n\n好了，要干正事了。Google一下妹子图，找到这两个网站：[http://jandan.net/ooxx](http://jandan.net/ooxx)，[http://www.youmzi.com/tuinvlang.html](http://www.youmzi.com/tuinvlang.html).先看第一个，它的源码长这样：\n\n![](http://osuro1ft2.bkt.clouddn.com//17-7-20/99168668.jpg)\n\n我们要找的是所有的img标签里的URL，然后把它下载下来。但是这样似乎只能爬取单个页面的妹子图？所以我们还要找到下一页的URL：\n\n![](http://osuro1ft2.bkt.clouddn.com//17-7-20/68438084.jpg)\n\n恩，找到了。开始写代码吧！\n\n## downloadImage方法\n\n首先写一个下载图片的方法，该方法传入图片的URL和要写入的路径，然后将文件写入本地。需要调用`java.net`包中的一些方法。\n\n```Java\npublic static boolean downloadImage(String imageUrl, String path) {\n    try {\n        //分割字符串，获得文件名\n        String filePath = path + imageUrl.substring(imageUrl.lastIndexOf(\"/\"));\n        //获得文件流\n        URL url = new URL(imageUrl);\n        HttpURLConnection connection = (HttpURLConnection)url.openConnection();\n        connection.setConnectTimeout(10000);\n        connection.setReadTimeout(10000);\n        InputStream in = connection.getInputStream();\n\n        //写入本地文件\n        File file = new File(filePath);\n        FileOutputStream out = new FileOutputStream(file);\n        int i = 0;\n        while ((i = in.read()) != -1){\n            out.write(i);\n        }\n        System.out.println(imageUrl + \"下载成功\");\n        out.close();\n        in.close();\n        return true;\n    }catch (Exception e){\n        System.out.println(imageUrl + \"下载失败\");\n        return false;\n    }\n}\n```\n\n需要注意的是要设置超时的时间，要不然会导致很多的图片下载失败。\n\n## 解析HTML\n\n接下来我们需要理一理这个爬虫的思路：\n1. 打开这个网页。获取到网页所有图片的URL，然后遍历这些URL去下载图片；\n2. 当遍历结束后，去找下一页的URL，然后执行1；\n3. 直到找不到下一页的URL为止。\n\n### 煎蛋妹子图\n\n首先用`jsoup`中的方法获取到网页并且得到Document对象：\n\n```Java\nDocument doc = null;\ndoc = Jsoup.connect(url).get();\n```\n\n获得所有的img标签：\n\n```Java\n Elements elements = doc.getElementsByTag(\"img\");\n```\n\n遍历这些标签并且下载：\n\n```Java\nfor (Element element : elements){\n    //获取标签中src属性的绝对路径\n    String imgSrc = element.attr(\"abs:src\");\n    if (downloadImage(imgSrc, path)){\n        count ++;\n    }\n}\n```\n\n获取下一页的地址，如果没有则退出循环:\n\n```Java\ntry {\n    url = doc.getElementsByClass(\"previous-comment-page\").get(0)\n            .getElementsByTag(\"a\").attr(\"abs:href\");\n}catch (Exception e){\n    System.out.println(\"没链接了~\");\n    break;\n}\n```\n\n大功告成！\n\n### 优妹子\n\n第二个网站的略微复杂一点，上方有导航栏，每一页有若干个专题，点击进去了才是大图。所以需要爬取的链接稍微多一点。\n\n首先还是获取到网页并且得到Document对象：\n\n```Java\nDocument doc = null;\ndoc = Jsoup.connect(url).get();\n```\n\n然后获得每一个二级页面（即专题）的URL，并放到一个List里面：\n\n```Java\nElements imageUrl = doc.getElementsByClass(\"tzpic3-mzindex\").get(0).getElementsByTag(\"a\");\nArrayList<String> urlList = new ArrayList<String>();\nfor (Element element : imageUrl){\n    urlList.add(element.attr(\"abs:href\"));\n}\n```\n\n对于List里的每一个URL，去找它每一个的img标签并且获取下一页的URL：\n\n```Java\nfor (String s : urlList){\n    String next = s;\n    while (true){\n        try {\n            doc = Jsoup.connect(next).get();\n        }catch (IOException e){\n            System.out.println(url + \"请求失败\");\n        }\n        Element e = doc.getElementsByClass(\"arpic\").get(0);\n        //获取所有img标签\n        Elements elements = e.getElementsByTag(\"img\");\n        for (Element element : elements){\n            //获取标签中src属性的绝对路径\n            String imgSrc = element.attr(\"abs:src\");\n            if (downloadImage(imgSrc, path)){\n                count ++;\n            }\n        }\n        String tmp = next;\n        try {\n            Elements nextPage = doc.getElementsByClass(\"jogger2\").get(0).getElementsByTag(\"a\");\n\n            next = null;\n            for (Element element : nextPage){\n                //获取标签中src属性的绝对路径\n                if (element.text().equals(\"下一页\")){\n                    next = element.attr(\"abs:href\");\n                }\n            }\n        }catch (Exception ex){\n            System.out.println(\"没链接了~\");\n            break;\n        }\n        if (next == null || tmp.equals(next)){\n            break;\n        }\n\n    }\n\n}\n```\n\n## 运行\n\n```Java\npublic static void main(String args[]) throws Exception{\n    String path = \"image\";\n    jiandan(path);\n    youmeizi(path);\n}\n```\n\n跑了两个多小时终于跑完了，看一下战果：\n\n![](http://osuro1ft2.bkt.clouddn.com//17-7-20/40407389.jpg)\n\n恩，将近1w张。不说了，我先喝瓶营养快线去~","slug":"Java爬虫：爬取妹子图","published":1,"updated":"2017-07-20T04:56:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhhhvn2y000a27xuzinkz63w","content":"<blockquote>\n<p>这是voidAlex原创的第三篇博文。<br>源码在<a href=\"https://github.com/voidAlex/Meizi_Crawler\" target=\"_blank\" rel=\"noopener\">我的GitHub</a><br><a id=\"more\"></a></p>\n</blockquote>\n<h2 id=\"爬虫\"><a href=\"#爬虫\" class=\"headerlink\" title=\"爬虫\"></a>爬虫</h2><p>上一篇博文介绍了如何模拟登录和解析JSON数据，这篇博文介绍怎么爬取不需要登录的网站的信息。</p>\n<p>上一篇博文中关于爬虫的介绍可以点<a href=\"https://voidalex.github.io/2017/07/09/Java%E7%88%AC%E8%99%AB%EF%BC%9A%E7%88%AC%E5%8F%96%E5%AD%A6%E6%A0%A1%E6%95%99%E5%8A%A1%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BF%A1%E6%81%AF/\" target=\"_blank\" rel=\"noopener\">这里</a>查看。</p>\n<h2 id=\"引入JSOUP\"><a href=\"#引入JSOUP\" class=\"headerlink\" title=\"引入JSOUP\"></a>引入JSOUP</h2><p>在<code>pom.xml</code>中添加JSOUP依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.jsoup<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jsoup<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.10.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>JSOUP是一款Java的HTML解析库，可以解析HTML中的文本内容。它的官网地址是<a href=\"https://jsoup.org/\" target=\"_blank\" rel=\"noopener\">https://jsoup.org/</a>。</p>\n<h2 id=\"查看网页源码\"><a href=\"#查看网页源码\" class=\"headerlink\" title=\"查看网页源码\"></a>查看网页源码</h2><p>好了，要干正事了。Google一下妹子图，找到这两个网站：<a href=\"http://jandan.net/ooxx\" target=\"_blank\" rel=\"noopener\">http://jandan.net/ooxx</a>，<a href=\"http://www.youmzi.com/tuinvlang.html\" target=\"_blank\" rel=\"noopener\">http://www.youmzi.com/tuinvlang.html</a>.先看第一个，它的源码长这样：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://osuro1ft2.bkt.clouddn.com//17-7-20/99168668.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>我们要找的是所有的img标签里的URL，然后把它下载下来。但是这样似乎只能爬取单个页面的妹子图？所以我们还要找到下一页的URL：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://osuro1ft2.bkt.clouddn.com//17-7-20/68438084.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>恩，找到了。开始写代码吧！</p>\n<h2 id=\"downloadImage方法\"><a href=\"#downloadImage方法\" class=\"headerlink\" title=\"downloadImage方法\"></a>downloadImage方法</h2><p>首先写一个下载图片的方法，该方法传入图片的URL和要写入的路径，然后将文件写入本地。需要调用<code>java.net</code>包中的一些方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">downloadImage</span><span class=\"params\">(String imageUrl, String path)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//分割字符串，获得文件名</span></div><div class=\"line\">        String filePath = path + imageUrl.substring(imageUrl.lastIndexOf(<span class=\"string\">\"/\"</span>));</div><div class=\"line\">        <span class=\"comment\">//获得文件流</span></div><div class=\"line\">        URL url = <span class=\"keyword\">new</span> URL(imageUrl);</div><div class=\"line\">        HttpURLConnection connection = (HttpURLConnection)url.openConnection();</div><div class=\"line\">        connection.setConnectTimeout(<span class=\"number\">10000</span>);</div><div class=\"line\">        connection.setReadTimeout(<span class=\"number\">10000</span>);</div><div class=\"line\">        InputStream in = connection.getInputStream();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//写入本地文件</span></div><div class=\"line\">        File file = <span class=\"keyword\">new</span> File(filePath);</div><div class=\"line\">        FileOutputStream out = <span class=\"keyword\">new</span> FileOutputStream(file);</div><div class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span> ((i = in.read()) != -<span class=\"number\">1</span>)&#123;</div><div class=\"line\">            out.write(i);</div><div class=\"line\">        &#125;</div><div class=\"line\">        System.out.println(imageUrl + <span class=\"string\">\"下载成功\"</span>);</div><div class=\"line\">        out.close();</div><div class=\"line\">        in.close();</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</div><div class=\"line\">        System.out.println(imageUrl + <span class=\"string\">\"下载失败\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>需要注意的是要设置超时的时间，要不然会导致很多的图片下载失败。</p>\n<h2 id=\"解析HTML\"><a href=\"#解析HTML\" class=\"headerlink\" title=\"解析HTML\"></a>解析HTML</h2><p>接下来我们需要理一理这个爬虫的思路：</p>\n<ol>\n<li>打开这个网页。获取到网页所有图片的URL，然后遍历这些URL去下载图片；</li>\n<li>当遍历结束后，去找下一页的URL，然后执行1；</li>\n<li>直到找不到下一页的URL为止。</li>\n</ol>\n<h3 id=\"煎蛋妹子图\"><a href=\"#煎蛋妹子图\" class=\"headerlink\" title=\"煎蛋妹子图\"></a>煎蛋妹子图</h3><p>首先用<code>jsoup</code>中的方法获取到网页并且得到Document对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Document doc = <span class=\"keyword\">null</span>;</div><div class=\"line\">doc = Jsoup.connect(url).get();</div></pre></td></tr></table></figure>\n<p>获得所有的img标签：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Elements elements = doc.getElementsByTag(<span class=\"string\">\"img\"</span>);</div></pre></td></tr></table></figure>\n<p>遍历这些标签并且下载：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (Element element : elements)&#123;</div><div class=\"line\">    <span class=\"comment\">//获取标签中src属性的绝对路径</span></div><div class=\"line\">    String imgSrc = element.attr(<span class=\"string\">\"abs:src\"</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (downloadImage(imgSrc, path))&#123;</div><div class=\"line\">        count ++;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>获取下一页的地址，如果没有则退出循环:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    url = doc.getElementsByClass(<span class=\"string\">\"previous-comment-page\"</span>).get(<span class=\"number\">0</span>)</div><div class=\"line\">            .getElementsByTag(<span class=\"string\">\"a\"</span>).attr(<span class=\"string\">\"abs:href\"</span>);</div><div class=\"line\">&#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"没链接了~\"</span>);</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>大功告成！</p>\n<h3 id=\"优妹子\"><a href=\"#优妹子\" class=\"headerlink\" title=\"优妹子\"></a>优妹子</h3><p>第二个网站的略微复杂一点，上方有导航栏，每一页有若干个专题，点击进去了才是大图。所以需要爬取的链接稍微多一点。</p>\n<p>首先还是获取到网页并且得到Document对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Document doc = <span class=\"keyword\">null</span>;</div><div class=\"line\">doc = Jsoup.connect(url).get();</div></pre></td></tr></table></figure>\n<p>然后获得每一个二级页面（即专题）的URL，并放到一个List里面：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Elements imageUrl = doc.getElementsByClass(<span class=\"string\">\"tzpic3-mzindex\"</span>).get(<span class=\"number\">0</span>).getElementsByTag(<span class=\"string\">\"a\"</span>);</div><div class=\"line\">ArrayList&lt;String&gt; urlList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</div><div class=\"line\"><span class=\"keyword\">for</span> (Element element : imageUrl)&#123;</div><div class=\"line\">    urlList.add(element.attr(<span class=\"string\">\"abs:href\"</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对于List里的每一个URL，去找它每一个的img标签并且获取下一页的URL：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (String s : urlList)&#123;</div><div class=\"line\">    String next = s;</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            doc = Jsoup.connect(next).get();</div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</div><div class=\"line\">            System.out.println(url + <span class=\"string\">\"请求失败\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        Element e = doc.getElementsByClass(<span class=\"string\">\"arpic\"</span>).get(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"comment\">//获取所有img标签</span></div><div class=\"line\">        Elements elements = e.getElementsByTag(<span class=\"string\">\"img\"</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (Element element : elements)&#123;</div><div class=\"line\">            <span class=\"comment\">//获取标签中src属性的绝对路径</span></div><div class=\"line\">            String imgSrc = element.attr(<span class=\"string\">\"abs:src\"</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (downloadImage(imgSrc, path))&#123;</div><div class=\"line\">                count ++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        String tmp = next;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            Elements nextPage = doc.getElementsByClass(<span class=\"string\">\"jogger2\"</span>).get(<span class=\"number\">0</span>).getElementsByTag(<span class=\"string\">\"a\"</span>);</div><div class=\"line\"></div><div class=\"line\">            next = <span class=\"keyword\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Element element : nextPage)&#123;</div><div class=\"line\">                <span class=\"comment\">//获取标签中src属性的绝对路径</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (element.text().equals(<span class=\"string\">\"下一页\"</span>))&#123;</div><div class=\"line\">                    next = element.attr(<span class=\"string\">\"abs:href\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception ex)&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"没链接了~\"</span>);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (next == <span class=\"keyword\">null</span> || tmp.equals(next))&#123;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">    String path = <span class=\"string\">\"image\"</span>;</div><div class=\"line\">    jiandan(path);</div><div class=\"line\">    youmeizi(path);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>跑了两个多小时终于跑完了，看一下战果：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://osuro1ft2.bkt.clouddn.com//17-7-20/40407389.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>恩，将近1w张。不说了，我先喝瓶营养快线去~</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是voidAlex原创的第三篇博文。<br>源码在<a href=\"https://github.com/voidAlex/Meizi_Crawler\" target=\"_blank\" rel=\"noopener\">我的GitHub</a><br>","more":"</p>\n</blockquote>\n<h2 id=\"爬虫\"><a href=\"#爬虫\" class=\"headerlink\" title=\"爬虫\"></a>爬虫</h2><p>上一篇博文介绍了如何模拟登录和解析JSON数据，这篇博文介绍怎么爬取不需要登录的网站的信息。</p>\n<p>上一篇博文中关于爬虫的介绍可以点<a href=\"https://voidalex.github.io/2017/07/09/Java%E7%88%AC%E8%99%AB%EF%BC%9A%E7%88%AC%E5%8F%96%E5%AD%A6%E6%A0%A1%E6%95%99%E5%8A%A1%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BF%A1%E6%81%AF/\" target=\"_blank\" rel=\"noopener\">这里</a>查看。</p>\n<h2 id=\"引入JSOUP\"><a href=\"#引入JSOUP\" class=\"headerlink\" title=\"引入JSOUP\"></a>引入JSOUP</h2><p>在<code>pom.xml</code>中添加JSOUP依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.jsoup<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jsoup<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.10.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>JSOUP是一款Java的HTML解析库，可以解析HTML中的文本内容。它的官网地址是<a href=\"https://jsoup.org/\" target=\"_blank\" rel=\"noopener\">https://jsoup.org/</a>。</p>\n<h2 id=\"查看网页源码\"><a href=\"#查看网页源码\" class=\"headerlink\" title=\"查看网页源码\"></a>查看网页源码</h2><p>好了，要干正事了。Google一下妹子图，找到这两个网站：<a href=\"http://jandan.net/ooxx\" target=\"_blank\" rel=\"noopener\">http://jandan.net/ooxx</a>，<a href=\"http://www.youmzi.com/tuinvlang.html\" target=\"_blank\" rel=\"noopener\">http://www.youmzi.com/tuinvlang.html</a>.先看第一个，它的源码长这样：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://osuro1ft2.bkt.clouddn.com//17-7-20/99168668.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>我们要找的是所有的img标签里的URL，然后把它下载下来。但是这样似乎只能爬取单个页面的妹子图？所以我们还要找到下一页的URL：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://osuro1ft2.bkt.clouddn.com//17-7-20/68438084.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>恩，找到了。开始写代码吧！</p>\n<h2 id=\"downloadImage方法\"><a href=\"#downloadImage方法\" class=\"headerlink\" title=\"downloadImage方法\"></a>downloadImage方法</h2><p>首先写一个下载图片的方法，该方法传入图片的URL和要写入的路径，然后将文件写入本地。需要调用<code>java.net</code>包中的一些方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">downloadImage</span><span class=\"params\">(String imageUrl, String path)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//分割字符串，获得文件名</span></div><div class=\"line\">        String filePath = path + imageUrl.substring(imageUrl.lastIndexOf(<span class=\"string\">\"/\"</span>));</div><div class=\"line\">        <span class=\"comment\">//获得文件流</span></div><div class=\"line\">        URL url = <span class=\"keyword\">new</span> URL(imageUrl);</div><div class=\"line\">        HttpURLConnection connection = (HttpURLConnection)url.openConnection();</div><div class=\"line\">        connection.setConnectTimeout(<span class=\"number\">10000</span>);</div><div class=\"line\">        connection.setReadTimeout(<span class=\"number\">10000</span>);</div><div class=\"line\">        InputStream in = connection.getInputStream();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//写入本地文件</span></div><div class=\"line\">        File file = <span class=\"keyword\">new</span> File(filePath);</div><div class=\"line\">        FileOutputStream out = <span class=\"keyword\">new</span> FileOutputStream(file);</div><div class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span> ((i = in.read()) != -<span class=\"number\">1</span>)&#123;</div><div class=\"line\">            out.write(i);</div><div class=\"line\">        &#125;</div><div class=\"line\">        System.out.println(imageUrl + <span class=\"string\">\"下载成功\"</span>);</div><div class=\"line\">        out.close();</div><div class=\"line\">        in.close();</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</div><div class=\"line\">        System.out.println(imageUrl + <span class=\"string\">\"下载失败\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>需要注意的是要设置超时的时间，要不然会导致很多的图片下载失败。</p>\n<h2 id=\"解析HTML\"><a href=\"#解析HTML\" class=\"headerlink\" title=\"解析HTML\"></a>解析HTML</h2><p>接下来我们需要理一理这个爬虫的思路：</p>\n<ol>\n<li>打开这个网页。获取到网页所有图片的URL，然后遍历这些URL去下载图片；</li>\n<li>当遍历结束后，去找下一页的URL，然后执行1；</li>\n<li>直到找不到下一页的URL为止。</li>\n</ol>\n<h3 id=\"煎蛋妹子图\"><a href=\"#煎蛋妹子图\" class=\"headerlink\" title=\"煎蛋妹子图\"></a>煎蛋妹子图</h3><p>首先用<code>jsoup</code>中的方法获取到网页并且得到Document对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Document doc = <span class=\"keyword\">null</span>;</div><div class=\"line\">doc = Jsoup.connect(url).get();</div></pre></td></tr></table></figure>\n<p>获得所有的img标签：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Elements elements = doc.getElementsByTag(<span class=\"string\">\"img\"</span>);</div></pre></td></tr></table></figure>\n<p>遍历这些标签并且下载：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (Element element : elements)&#123;</div><div class=\"line\">    <span class=\"comment\">//获取标签中src属性的绝对路径</span></div><div class=\"line\">    String imgSrc = element.attr(<span class=\"string\">\"abs:src\"</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (downloadImage(imgSrc, path))&#123;</div><div class=\"line\">        count ++;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>获取下一页的地址，如果没有则退出循环:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    url = doc.getElementsByClass(<span class=\"string\">\"previous-comment-page\"</span>).get(<span class=\"number\">0</span>)</div><div class=\"line\">            .getElementsByTag(<span class=\"string\">\"a\"</span>).attr(<span class=\"string\">\"abs:href\"</span>);</div><div class=\"line\">&#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"没链接了~\"</span>);</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>大功告成！</p>\n<h3 id=\"优妹子\"><a href=\"#优妹子\" class=\"headerlink\" title=\"优妹子\"></a>优妹子</h3><p>第二个网站的略微复杂一点，上方有导航栏，每一页有若干个专题，点击进去了才是大图。所以需要爬取的链接稍微多一点。</p>\n<p>首先还是获取到网页并且得到Document对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Document doc = <span class=\"keyword\">null</span>;</div><div class=\"line\">doc = Jsoup.connect(url).get();</div></pre></td></tr></table></figure>\n<p>然后获得每一个二级页面（即专题）的URL，并放到一个List里面：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Elements imageUrl = doc.getElementsByClass(<span class=\"string\">\"tzpic3-mzindex\"</span>).get(<span class=\"number\">0</span>).getElementsByTag(<span class=\"string\">\"a\"</span>);</div><div class=\"line\">ArrayList&lt;String&gt; urlList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</div><div class=\"line\"><span class=\"keyword\">for</span> (Element element : imageUrl)&#123;</div><div class=\"line\">    urlList.add(element.attr(<span class=\"string\">\"abs:href\"</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对于List里的每一个URL，去找它每一个的img标签并且获取下一页的URL：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (String s : urlList)&#123;</div><div class=\"line\">    String next = s;</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            doc = Jsoup.connect(next).get();</div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</div><div class=\"line\">            System.out.println(url + <span class=\"string\">\"请求失败\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        Element e = doc.getElementsByClass(<span class=\"string\">\"arpic\"</span>).get(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"comment\">//获取所有img标签</span></div><div class=\"line\">        Elements elements = e.getElementsByTag(<span class=\"string\">\"img\"</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (Element element : elements)&#123;</div><div class=\"line\">            <span class=\"comment\">//获取标签中src属性的绝对路径</span></div><div class=\"line\">            String imgSrc = element.attr(<span class=\"string\">\"abs:src\"</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (downloadImage(imgSrc, path))&#123;</div><div class=\"line\">                count ++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        String tmp = next;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            Elements nextPage = doc.getElementsByClass(<span class=\"string\">\"jogger2\"</span>).get(<span class=\"number\">0</span>).getElementsByTag(<span class=\"string\">\"a\"</span>);</div><div class=\"line\"></div><div class=\"line\">            next = <span class=\"keyword\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Element element : nextPage)&#123;</div><div class=\"line\">                <span class=\"comment\">//获取标签中src属性的绝对路径</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (element.text().equals(<span class=\"string\">\"下一页\"</span>))&#123;</div><div class=\"line\">                    next = element.attr(<span class=\"string\">\"abs:href\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception ex)&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"没链接了~\"</span>);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (next == <span class=\"keyword\">null</span> || tmp.equals(next))&#123;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">    String path = <span class=\"string\">\"image\"</span>;</div><div class=\"line\">    jiandan(path);</div><div class=\"line\">    youmeizi(path);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>跑了两个多小时终于跑完了，看一下战果：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://osuro1ft2.bkt.clouddn.com//17-7-20/40407389.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>恩，将近1w张。不说了，我先喝瓶营养快线去~</p>"},{"title":"Java爬虫：爬取学校教务管理系统的信息","date":"2017-07-09T14:15:46.000Z","_content":"> 这是voidAlex原创的第二篇博文。\n> 源码在[我的GitHub](https://github.com/voidAlex/NWNU_Crawler)\n<!-- more -->\n\n## 爬虫\n关于爬虫是什么就不介绍了。这里简单说一下我所理解的爬虫的思路。\n\n就如同把大象放冰箱里分三步一样，爬虫也分三步。第一步，由于教务管理系统这种网站需要登录才能获取信息，我们需要先用抓包工具抓取原始的请求地址；第二步，获得Cookie，伪装请求模拟登录，然后获得原始数据；第三步，解析数据，得到想要的东西。\n\n## 抓包\n学校教务管理系统的地址是[http://210.26.111.34/](http://210.26.111.34/)。登录界面长这样：\n\n![](http://osuro1ft2.bkt.clouddn.com//17-7-10/3887073.jpg)\n\n打开万能的Chrome开发者工具，填好表单点提交，然后在Network中能看到这样的信息：\n\n![](http://osuro1ft2.bkt.clouddn.com//17-7-10/38663337.jpg)\n\n标记的地方是我们要关注的。第一处能得到登录的请求地址是[http://210.26.111.34/mlogin.do](http://210.26.111.34/mlogin.do)，请求方式是POST；第二处能得到请求参数，分别是utype（用户类型），ucode（学号），pwd（密码），rember（记住账号）。原本登录时要输的验证码不见了，interesting。\n\n登录之后通过同样的方式能获取到其他的请求地址，比如成绩，课表，考试安排等等。这里不再一一阐述。\n\n## 模拟登录\n用代码模拟登录请求也分三步：\n\n1. 获取该网站的Cookie，并添加到请求头；\n\n2. 添加参数，模拟登录；\n\n3. 得到请求结果。\n\n这里需要用到Apache HttpClient，它是一个支持Http协议的客户端编程工具包。HttpClient的官网是[https://hc.apache.org/index.html](https://hc.apache.org/index.html)。\n\n### 获取Cookie\n\n```Java\nBasicCookieStore cookieStore = new BasicCookieStore();\nCloseableHttpClient httpclient = HttpClients.custom().setDefaultCookieStore(cookieStore).build();\n\nHttpGet getCookie = new HttpGet(\"http://210.26.111.34\");\nCloseableHttpResponse response1 = httpclient.execute(getCookie);\nresponse1.close();\n```\n\n### 模拟登录\n\n构造一个POST请求，将请求参数加进去，用httpclient提交。\n\n```Java\nHttpUriRequest postLogin = RequestBuilder.post().setUri(new URI(loginUrl))\n                           .addParameter(\"utype\", \"S\")\n                           .addParameter(\"ucode\", username)\n                           .addParameter(\"pwd\", password)\n                           .addParameter(\"rember\", \"true\")\n                           .build();\nCloseableHttpResponse response2 = httpclient.execute(postLogin);\nresponse2.close();\n```\n\n## 得到结果，解析数据\n\n以获取考试成绩为例，通过Chrome开发者工具可以得到考试成绩的原始请求和返回的数据，返回的数据是JSON，这里用Google Gson包去解析。\n\n```Java\nString getExamMark = \"http://210.26.111.34/result/stqryResult/view.do\";\nHttpUriRequest postExamMark = RequestBuilder.post().setUri(new URI(getExamMark))\n                        .build();\n\nCloseableHttpResponse response = httpclient.execute(postExamMark);\nHttpEntity entity = response.getEntity();\nString json = EntityUtils.toString(entity);\nEntityUtils.consume(entity);\n\nGson gson = new Gson();\n\nJsonObject jo = gson.fromJson(json, JsonObject.class);\n```\n\n输出结果得到如下信息：\n```Json\n{\"footer\":[{\"FE_CU_CREDIT\":\"<b>0</b>\",\n\"FE_CU_YEAR\":\"副修学分:\",\n\"FE_CU_NAME\":\"主修学分:[总分<b></b>,必修<b></b>]\"}],\n\"rows\":[{\"FE_CU_NAME\":\"HTML5与JAVASCRIPT\",\n\"FE_CU_YEAR\":\"2016秋季\",\n\"FE_CU_CREDIT\":\"3\",\n\"FE_SR_USUAL1\":86,\n...省略若干字\n```\n\n成功！\n\n爬虫刚入门，不足之处欢迎大家批评指正。","source":"_posts/Java爬虫：爬取学校教务管理系统的信息.md","raw":"---\ntitle: Java爬虫：爬取学校教务管理系统的信息\ndate: 2017-07-09 22:15:46\ntags: ['爬虫','Java']\n---\n> 这是voidAlex原创的第二篇博文。\n> 源码在[我的GitHub](https://github.com/voidAlex/NWNU_Crawler)\n<!-- more -->\n\n## 爬虫\n关于爬虫是什么就不介绍了。这里简单说一下我所理解的爬虫的思路。\n\n就如同把大象放冰箱里分三步一样，爬虫也分三步。第一步，由于教务管理系统这种网站需要登录才能获取信息，我们需要先用抓包工具抓取原始的请求地址；第二步，获得Cookie，伪装请求模拟登录，然后获得原始数据；第三步，解析数据，得到想要的东西。\n\n## 抓包\n学校教务管理系统的地址是[http://210.26.111.34/](http://210.26.111.34/)。登录界面长这样：\n\n![](http://osuro1ft2.bkt.clouddn.com//17-7-10/3887073.jpg)\n\n打开万能的Chrome开发者工具，填好表单点提交，然后在Network中能看到这样的信息：\n\n![](http://osuro1ft2.bkt.clouddn.com//17-7-10/38663337.jpg)\n\n标记的地方是我们要关注的。第一处能得到登录的请求地址是[http://210.26.111.34/mlogin.do](http://210.26.111.34/mlogin.do)，请求方式是POST；第二处能得到请求参数，分别是utype（用户类型），ucode（学号），pwd（密码），rember（记住账号）。原本登录时要输的验证码不见了，interesting。\n\n登录之后通过同样的方式能获取到其他的请求地址，比如成绩，课表，考试安排等等。这里不再一一阐述。\n\n## 模拟登录\n用代码模拟登录请求也分三步：\n\n1. 获取该网站的Cookie，并添加到请求头；\n\n2. 添加参数，模拟登录；\n\n3. 得到请求结果。\n\n这里需要用到Apache HttpClient，它是一个支持Http协议的客户端编程工具包。HttpClient的官网是[https://hc.apache.org/index.html](https://hc.apache.org/index.html)。\n\n### 获取Cookie\n\n```Java\nBasicCookieStore cookieStore = new BasicCookieStore();\nCloseableHttpClient httpclient = HttpClients.custom().setDefaultCookieStore(cookieStore).build();\n\nHttpGet getCookie = new HttpGet(\"http://210.26.111.34\");\nCloseableHttpResponse response1 = httpclient.execute(getCookie);\nresponse1.close();\n```\n\n### 模拟登录\n\n构造一个POST请求，将请求参数加进去，用httpclient提交。\n\n```Java\nHttpUriRequest postLogin = RequestBuilder.post().setUri(new URI(loginUrl))\n                           .addParameter(\"utype\", \"S\")\n                           .addParameter(\"ucode\", username)\n                           .addParameter(\"pwd\", password)\n                           .addParameter(\"rember\", \"true\")\n                           .build();\nCloseableHttpResponse response2 = httpclient.execute(postLogin);\nresponse2.close();\n```\n\n## 得到结果，解析数据\n\n以获取考试成绩为例，通过Chrome开发者工具可以得到考试成绩的原始请求和返回的数据，返回的数据是JSON，这里用Google Gson包去解析。\n\n```Java\nString getExamMark = \"http://210.26.111.34/result/stqryResult/view.do\";\nHttpUriRequest postExamMark = RequestBuilder.post().setUri(new URI(getExamMark))\n                        .build();\n\nCloseableHttpResponse response = httpclient.execute(postExamMark);\nHttpEntity entity = response.getEntity();\nString json = EntityUtils.toString(entity);\nEntityUtils.consume(entity);\n\nGson gson = new Gson();\n\nJsonObject jo = gson.fromJson(json, JsonObject.class);\n```\n\n输出结果得到如下信息：\n```Json\n{\"footer\":[{\"FE_CU_CREDIT\":\"<b>0</b>\",\n\"FE_CU_YEAR\":\"副修学分:\",\n\"FE_CU_NAME\":\"主修学分:[总分<b></b>,必修<b></b>]\"}],\n\"rows\":[{\"FE_CU_NAME\":\"HTML5与JAVASCRIPT\",\n\"FE_CU_YEAR\":\"2016秋季\",\n\"FE_CU_CREDIT\":\"3\",\n\"FE_SR_USUAL1\":86,\n...省略若干字\n```\n\n成功！\n\n爬虫刚入门，不足之处欢迎大家批评指正。","slug":"Java爬虫：爬取学校教务管理系统的信息","published":1,"updated":"2017-07-11T03:32:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhhhvn31000b27xuhajizvxk","content":"<blockquote>\n<p>这是voidAlex原创的第二篇博文。<br>源码在<a href=\"https://github.com/voidAlex/NWNU_Crawler\" target=\"_blank\" rel=\"noopener\">我的GitHub</a><br><a id=\"more\"></a></p>\n</blockquote>\n<h2 id=\"爬虫\"><a href=\"#爬虫\" class=\"headerlink\" title=\"爬虫\"></a>爬虫</h2><p>关于爬虫是什么就不介绍了。这里简单说一下我所理解的爬虫的思路。</p>\n<p>就如同把大象放冰箱里分三步一样，爬虫也分三步。第一步，由于教务管理系统这种网站需要登录才能获取信息，我们需要先用抓包工具抓取原始的请求地址；第二步，获得Cookie，伪装请求模拟登录，然后获得原始数据；第三步，解析数据，得到想要的东西。</p>\n<h2 id=\"抓包\"><a href=\"#抓包\" class=\"headerlink\" title=\"抓包\"></a>抓包</h2><p>学校教务管理系统的地址是<a href=\"http://210.26.111.34/\" target=\"_blank\" rel=\"noopener\">http://210.26.111.34/</a>。登录界面长这样：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://osuro1ft2.bkt.clouddn.com//17-7-10/3887073.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>打开万能的Chrome开发者工具，填好表单点提交，然后在Network中能看到这样的信息：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://osuro1ft2.bkt.clouddn.com//17-7-10/38663337.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>标记的地方是我们要关注的。第一处能得到登录的请求地址是<a href=\"http://210.26.111.34/mlogin.do\" target=\"_blank\" rel=\"noopener\">http://210.26.111.34/mlogin.do</a>，请求方式是POST；第二处能得到请求参数，分别是utype（用户类型），ucode（学号），pwd（密码），rember（记住账号）。原本登录时要输的验证码不见了，interesting。</p>\n<p>登录之后通过同样的方式能获取到其他的请求地址，比如成绩，课表，考试安排等等。这里不再一一阐述。</p>\n<h2 id=\"模拟登录\"><a href=\"#模拟登录\" class=\"headerlink\" title=\"模拟登录\"></a>模拟登录</h2><p>用代码模拟登录请求也分三步：</p>\n<ol>\n<li><p>获取该网站的Cookie，并添加到请求头；</p>\n</li>\n<li><p>添加参数，模拟登录；</p>\n</li>\n<li><p>得到请求结果。</p>\n</li>\n</ol>\n<p>这里需要用到Apache HttpClient，它是一个支持Http协议的客户端编程工具包。HttpClient的官网是<a href=\"https://hc.apache.org/index.html\" target=\"_blank\" rel=\"noopener\">https://hc.apache.org/index.html</a>。</p>\n<h3 id=\"获取Cookie\"><a href=\"#获取Cookie\" class=\"headerlink\" title=\"获取Cookie\"></a>获取Cookie</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">BasicCookieStore cookieStore = <span class=\"keyword\">new</span> BasicCookieStore();</div><div class=\"line\">CloseableHttpClient httpclient = HttpClients.custom().setDefaultCookieStore(cookieStore).build();</div><div class=\"line\"></div><div class=\"line\">HttpGet getCookie = <span class=\"keyword\">new</span> HttpGet(<span class=\"string\">\"http://210.26.111.34\"</span>);</div><div class=\"line\">CloseableHttpResponse response1 = httpclient.execute(getCookie);</div><div class=\"line\">response1.close();</div></pre></td></tr></table></figure>\n<h3 id=\"模拟登录-1\"><a href=\"#模拟登录-1\" class=\"headerlink\" title=\"模拟登录\"></a>模拟登录</h3><p>构造一个POST请求，将请求参数加进去，用httpclient提交。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">HttpUriRequest postLogin = RequestBuilder.post().setUri(<span class=\"keyword\">new</span> URI(loginUrl))</div><div class=\"line\">                           .addParameter(<span class=\"string\">\"utype\"</span>, <span class=\"string\">\"S\"</span>)</div><div class=\"line\">                           .addParameter(<span class=\"string\">\"ucode\"</span>, username)</div><div class=\"line\">                           .addParameter(<span class=\"string\">\"pwd\"</span>, password)</div><div class=\"line\">                           .addParameter(<span class=\"string\">\"rember\"</span>, <span class=\"string\">\"true\"</span>)</div><div class=\"line\">                           .build();</div><div class=\"line\">CloseableHttpResponse response2 = httpclient.execute(postLogin);</div><div class=\"line\">response2.close();</div></pre></td></tr></table></figure>\n<h2 id=\"得到结果，解析数据\"><a href=\"#得到结果，解析数据\" class=\"headerlink\" title=\"得到结果，解析数据\"></a>得到结果，解析数据</h2><p>以获取考试成绩为例，通过Chrome开发者工具可以得到考试成绩的原始请求和返回的数据，返回的数据是JSON，这里用Google Gson包去解析。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">String getExamMark = <span class=\"string\">\"http://210.26.111.34/result/stqryResult/view.do\"</span>;</div><div class=\"line\">HttpUriRequest postExamMark = RequestBuilder.post().setUri(<span class=\"keyword\">new</span> URI(getExamMark))</div><div class=\"line\">                        .build();</div><div class=\"line\"></div><div class=\"line\">CloseableHttpResponse response = httpclient.execute(postExamMark);</div><div class=\"line\">HttpEntity entity = response.getEntity();</div><div class=\"line\">String json = EntityUtils.toString(entity);</div><div class=\"line\">EntityUtils.consume(entity);</div><div class=\"line\"></div><div class=\"line\">Gson gson = <span class=\"keyword\">new</span> Gson();</div><div class=\"line\"></div><div class=\"line\">JsonObject jo = gson.fromJson(json, JsonObject.class);</div></pre></td></tr></table></figure>\n<p>输出结果得到如下信息：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;\"footer\":[&#123;\"FE_CU_CREDIT\":\"&lt;b&gt;0&lt;/b&gt;\",</div><div class=\"line\">\"FE_CU_YEAR\":\"副修学分:\",</div><div class=\"line\">\"FE_CU_NAME\":\"主修学分:[总分&lt;b&gt;&lt;/b&gt;,必修&lt;b&gt;&lt;/b&gt;]\"&#125;],</div><div class=\"line\">\"rows\":[&#123;\"FE_CU_NAME\":\"HTML5与JAVASCRIPT\",</div><div class=\"line\">\"FE_CU_YEAR\":\"2016秋季\",</div><div class=\"line\">\"FE_CU_CREDIT\":\"3\",</div><div class=\"line\">\"FE_SR_USUAL1\":86,</div><div class=\"line\">...省略若干字</div></pre></td></tr></table></figure></p>\n<p>成功！</p>\n<p>爬虫刚入门，不足之处欢迎大家批评指正。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是voidAlex原创的第二篇博文。<br>源码在<a href=\"https://github.com/voidAlex/NWNU_Crawler\" target=\"_blank\" rel=\"noopener\">我的GitHub</a><br>","more":"</p>\n</blockquote>\n<h2 id=\"爬虫\"><a href=\"#爬虫\" class=\"headerlink\" title=\"爬虫\"></a>爬虫</h2><p>关于爬虫是什么就不介绍了。这里简单说一下我所理解的爬虫的思路。</p>\n<p>就如同把大象放冰箱里分三步一样，爬虫也分三步。第一步，由于教务管理系统这种网站需要登录才能获取信息，我们需要先用抓包工具抓取原始的请求地址；第二步，获得Cookie，伪装请求模拟登录，然后获得原始数据；第三步，解析数据，得到想要的东西。</p>\n<h2 id=\"抓包\"><a href=\"#抓包\" class=\"headerlink\" title=\"抓包\"></a>抓包</h2><p>学校教务管理系统的地址是<a href=\"http://210.26.111.34/\" target=\"_blank\" rel=\"noopener\">http://210.26.111.34/</a>。登录界面长这样：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://osuro1ft2.bkt.clouddn.com//17-7-10/3887073.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>打开万能的Chrome开发者工具，填好表单点提交，然后在Network中能看到这样的信息：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://osuro1ft2.bkt.clouddn.com//17-7-10/38663337.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>标记的地方是我们要关注的。第一处能得到登录的请求地址是<a href=\"http://210.26.111.34/mlogin.do\" target=\"_blank\" rel=\"noopener\">http://210.26.111.34/mlogin.do</a>，请求方式是POST；第二处能得到请求参数，分别是utype（用户类型），ucode（学号），pwd（密码），rember（记住账号）。原本登录时要输的验证码不见了，interesting。</p>\n<p>登录之后通过同样的方式能获取到其他的请求地址，比如成绩，课表，考试安排等等。这里不再一一阐述。</p>\n<h2 id=\"模拟登录\"><a href=\"#模拟登录\" class=\"headerlink\" title=\"模拟登录\"></a>模拟登录</h2><p>用代码模拟登录请求也分三步：</p>\n<ol>\n<li><p>获取该网站的Cookie，并添加到请求头；</p>\n</li>\n<li><p>添加参数，模拟登录；</p>\n</li>\n<li><p>得到请求结果。</p>\n</li>\n</ol>\n<p>这里需要用到Apache HttpClient，它是一个支持Http协议的客户端编程工具包。HttpClient的官网是<a href=\"https://hc.apache.org/index.html\" target=\"_blank\" rel=\"noopener\">https://hc.apache.org/index.html</a>。</p>\n<h3 id=\"获取Cookie\"><a href=\"#获取Cookie\" class=\"headerlink\" title=\"获取Cookie\"></a>获取Cookie</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">BasicCookieStore cookieStore = <span class=\"keyword\">new</span> BasicCookieStore();</div><div class=\"line\">CloseableHttpClient httpclient = HttpClients.custom().setDefaultCookieStore(cookieStore).build();</div><div class=\"line\"></div><div class=\"line\">HttpGet getCookie = <span class=\"keyword\">new</span> HttpGet(<span class=\"string\">\"http://210.26.111.34\"</span>);</div><div class=\"line\">CloseableHttpResponse response1 = httpclient.execute(getCookie);</div><div class=\"line\">response1.close();</div></pre></td></tr></table></figure>\n<h3 id=\"模拟登录-1\"><a href=\"#模拟登录-1\" class=\"headerlink\" title=\"模拟登录\"></a>模拟登录</h3><p>构造一个POST请求，将请求参数加进去，用httpclient提交。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">HttpUriRequest postLogin = RequestBuilder.post().setUri(<span class=\"keyword\">new</span> URI(loginUrl))</div><div class=\"line\">                           .addParameter(<span class=\"string\">\"utype\"</span>, <span class=\"string\">\"S\"</span>)</div><div class=\"line\">                           .addParameter(<span class=\"string\">\"ucode\"</span>, username)</div><div class=\"line\">                           .addParameter(<span class=\"string\">\"pwd\"</span>, password)</div><div class=\"line\">                           .addParameter(<span class=\"string\">\"rember\"</span>, <span class=\"string\">\"true\"</span>)</div><div class=\"line\">                           .build();</div><div class=\"line\">CloseableHttpResponse response2 = httpclient.execute(postLogin);</div><div class=\"line\">response2.close();</div></pre></td></tr></table></figure>\n<h2 id=\"得到结果，解析数据\"><a href=\"#得到结果，解析数据\" class=\"headerlink\" title=\"得到结果，解析数据\"></a>得到结果，解析数据</h2><p>以获取考试成绩为例，通过Chrome开发者工具可以得到考试成绩的原始请求和返回的数据，返回的数据是JSON，这里用Google Gson包去解析。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">String getExamMark = <span class=\"string\">\"http://210.26.111.34/result/stqryResult/view.do\"</span>;</div><div class=\"line\">HttpUriRequest postExamMark = RequestBuilder.post().setUri(<span class=\"keyword\">new</span> URI(getExamMark))</div><div class=\"line\">                        .build();</div><div class=\"line\"></div><div class=\"line\">CloseableHttpResponse response = httpclient.execute(postExamMark);</div><div class=\"line\">HttpEntity entity = response.getEntity();</div><div class=\"line\">String json = EntityUtils.toString(entity);</div><div class=\"line\">EntityUtils.consume(entity);</div><div class=\"line\"></div><div class=\"line\">Gson gson = <span class=\"keyword\">new</span> Gson();</div><div class=\"line\"></div><div class=\"line\">JsonObject jo = gson.fromJson(json, JsonObject.class);</div></pre></td></tr></table></figure>\n<p>输出结果得到如下信息：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;\"footer\":[&#123;\"FE_CU_CREDIT\":\"&lt;b&gt;0&lt;/b&gt;\",</div><div class=\"line\">\"FE_CU_YEAR\":\"副修学分:\",</div><div class=\"line\">\"FE_CU_NAME\":\"主修学分:[总分&lt;b&gt;&lt;/b&gt;,必修&lt;b&gt;&lt;/b&gt;]\"&#125;],</div><div class=\"line\">\"rows\":[&#123;\"FE_CU_NAME\":\"HTML5与JAVASCRIPT\",</div><div class=\"line\">\"FE_CU_YEAR\":\"2016秋季\",</div><div class=\"line\">\"FE_CU_CREDIT\":\"3\",</div><div class=\"line\">\"FE_SR_USUAL1\":86,</div><div class=\"line\">...省略若干字</div></pre></td></tr></table></figure></p>\n<p>成功！</p>\n<p>爬虫刚入门，不足之处欢迎大家批评指正。</p>"},{"title":"Java补锅笔记：利用反射获得对象的信息","date":"2017-11-02T03:12:20.000Z","_content":"> 这是voidAlex原创的第十篇博文。\n<!-- more -->\n \nJava中，类的`Class`类的实例对象，类的成员变量也是对象，它是`java.lang.reflect.Field`的实例对象。`Field`类封装了关于成员变量的操作。\n\n同样的，类的方法也是对象，它是`java.lang.reflect.Method`的实例对象。`Methon`类封装了关于类方法的操作。\n\n构造函数是`java.lang.reflect.Constructor`的实例对象。\n\n## 通过反射获取对象的信息\n\n先声明一个普通的`Student`类：\n\n```java\n/**\n * Created by 王麟东 on 2017/11/2 0002 19:12. Email: wangld1994@gmail.com\n */\npublic class Student {\n  private String name;\n  private int age;\n  private String id;\n\n  public Student(){\n\n  }\n\n  public Student(String name, String id){\n    this.name = name;\n    this.id = id;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public int getAge() {\n    return age;\n  }\n\n  public String getId() {\n    return id;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public void setAge(int age) {\n    this.age = age;\n  }\n\n  public void setId(String id) {\n    this.id = id;\n  }\n}\n```\n\n`Student`类有三个私有的成员变量，一个带参数的构造方法和一个不带参数的构造方法，还有对各个成员变量的`getter`和`setter`方法。\n\n```java\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\n\n/**\n * Created by 王麟东 on 2017/11/2 0002 18:01. Email: wangld1994@gmail.com\n */\npublic class ClassMessage {\n  public static void getClassMessage(Object o){\n    //获取类信息\n    Class c = o.getClass();\n\n    //获取类名称\n    System.out.println(\"类名称：\" + c.getName());\n\n    //获取所有的public函数，包括从父类继承而来的\n    Method[] methods = c.getMethods();\n    for (Method method : methods){\n      //获得方法名\n      System.out.println(\"方法名：\" + method.getName());\n\n      //获得方法的返回类型\n      Class returnType = method.getReturnType();\n      System.out.println(\"返回类型：\" + returnType.getName());\n\n      //获得参数类型\n      Class[] paramTypes = method.getParameterTypes();\n      System.out.println(\"参数类型：\");\n      for (Class parmType : paramTypes){\n        System.out.println(parmType.getName());\n      }\n    }\n\n    //获得所有成员变量\n    //getDeclaredFields获得的是该类自己声明的变量的信息\n    //getFields获得的是所有public的成员变量的信息\n    Field[] fields = c.getDeclaredFields();\n    System.out.println(\"成员变量：\");\n    for (Field field : fields){\n      Class fieldType = field.getType();\n      System.out.println(fieldType.getName() + \" \" + field.getName());\n    }\n\n    //获得构造函数的信息\n    Constructor[] constructors = c.getDeclaredConstructors();\n    for (Constructor constructor : constructors){\n      System.out.println(\"构造函数：\" + constructor.getName());\n\n      //获取构造函数的参数列表\n      System.out.println(\"参数类型：\");\n      Class[] cparamTypes = constructor.getParameterTypes();\n      for (Class cparamType : cparamTypes){\n        System.out.println(cparamType.getName());\n      }\n    }\n  }\n}\n```\n\n测试运行：\n\n```java\npublic static void main(String args[]){\n  Student student = new Student();ClassMessage.getClassMessage(student);\n}\n```\n\n输出：\n\n```java\n类名称：Student\n方法名：getName\n返回类型：java.lang.String\n参数类型：\n方法名：getId\n返回类型：java.lang.String\n参数类型：\n方法名：setName\n返回类型：void\n参数类型：\njava.lang.String\n方法名：setId\n返回类型：void\n参数类型：\njava.lang.String\n方法名：setAge\n返回类型：void\n参数类型：\nint\n方法名：getAge\n返回类型：int\n参数类型：\n方法名：wait\n返回类型：void\n参数类型：\n方法名：wait\n返回类型：void\n参数类型：\nlong\nint\n方法名：wait\n返回类型：void\n参数类型：\nlong\n方法名：equals\n返回类型：boolean\n参数类型：\njava.lang.Object\n方法名：toString\n返回类型：java.lang.String\n参数类型：\n方法名：hashCode\n返回类型：int\n参数类型：\n方法名：getClass\n返回类型：java.lang.Class\n参数类型：\n方法名：notify\n返回类型：void\n参数类型：\n方法名：notifyAll\n返回类型：void\n参数类型：\n成员变量：\njava.lang.String name\nint age\njava.lang.String id\n构造函数：Student\n构造函数：Student\njava.lang.String\njava.lang.String\n\nProcess finished with exit code 0\n\n```\n\n## 注意！\n\n在`getDeclaredFields()`方法中，有这么一句注释：\n\n```\n* <p> The elements in the returned array are not sorted and are not in any\n* particular order.\n```\n\n这个注释告诉我们，用户不要在代码中依赖这些方法返回的顺序。它“不保证返回的顺序是怎样的”。这是因为在Java编译器与JVM中都有权利对Java类的字段做重排序。详细的信息可以参考：[https://www.zhihu.com/question/52856385](https://www.zhihu.com/question/52856385)。","source":"_posts/Java补锅笔记：利用反射获得对象的信息.md","raw":"---\ntitle: Java补锅笔记：利用反射获得对象的信息\ndate: 2017-11-02 11:12:20\ntags: ['补锅笔记','Java','反射']\n---\n> 这是voidAlex原创的第十篇博文。\n<!-- more -->\n \nJava中，类的`Class`类的实例对象，类的成员变量也是对象，它是`java.lang.reflect.Field`的实例对象。`Field`类封装了关于成员变量的操作。\n\n同样的，类的方法也是对象，它是`java.lang.reflect.Method`的实例对象。`Methon`类封装了关于类方法的操作。\n\n构造函数是`java.lang.reflect.Constructor`的实例对象。\n\n## 通过反射获取对象的信息\n\n先声明一个普通的`Student`类：\n\n```java\n/**\n * Created by 王麟东 on 2017/11/2 0002 19:12. Email: wangld1994@gmail.com\n */\npublic class Student {\n  private String name;\n  private int age;\n  private String id;\n\n  public Student(){\n\n  }\n\n  public Student(String name, String id){\n    this.name = name;\n    this.id = id;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public int getAge() {\n    return age;\n  }\n\n  public String getId() {\n    return id;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public void setAge(int age) {\n    this.age = age;\n  }\n\n  public void setId(String id) {\n    this.id = id;\n  }\n}\n```\n\n`Student`类有三个私有的成员变量，一个带参数的构造方法和一个不带参数的构造方法，还有对各个成员变量的`getter`和`setter`方法。\n\n```java\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\n\n/**\n * Created by 王麟东 on 2017/11/2 0002 18:01. Email: wangld1994@gmail.com\n */\npublic class ClassMessage {\n  public static void getClassMessage(Object o){\n    //获取类信息\n    Class c = o.getClass();\n\n    //获取类名称\n    System.out.println(\"类名称：\" + c.getName());\n\n    //获取所有的public函数，包括从父类继承而来的\n    Method[] methods = c.getMethods();\n    for (Method method : methods){\n      //获得方法名\n      System.out.println(\"方法名：\" + method.getName());\n\n      //获得方法的返回类型\n      Class returnType = method.getReturnType();\n      System.out.println(\"返回类型：\" + returnType.getName());\n\n      //获得参数类型\n      Class[] paramTypes = method.getParameterTypes();\n      System.out.println(\"参数类型：\");\n      for (Class parmType : paramTypes){\n        System.out.println(parmType.getName());\n      }\n    }\n\n    //获得所有成员变量\n    //getDeclaredFields获得的是该类自己声明的变量的信息\n    //getFields获得的是所有public的成员变量的信息\n    Field[] fields = c.getDeclaredFields();\n    System.out.println(\"成员变量：\");\n    for (Field field : fields){\n      Class fieldType = field.getType();\n      System.out.println(fieldType.getName() + \" \" + field.getName());\n    }\n\n    //获得构造函数的信息\n    Constructor[] constructors = c.getDeclaredConstructors();\n    for (Constructor constructor : constructors){\n      System.out.println(\"构造函数：\" + constructor.getName());\n\n      //获取构造函数的参数列表\n      System.out.println(\"参数类型：\");\n      Class[] cparamTypes = constructor.getParameterTypes();\n      for (Class cparamType : cparamTypes){\n        System.out.println(cparamType.getName());\n      }\n    }\n  }\n}\n```\n\n测试运行：\n\n```java\npublic static void main(String args[]){\n  Student student = new Student();ClassMessage.getClassMessage(student);\n}\n```\n\n输出：\n\n```java\n类名称：Student\n方法名：getName\n返回类型：java.lang.String\n参数类型：\n方法名：getId\n返回类型：java.lang.String\n参数类型：\n方法名：setName\n返回类型：void\n参数类型：\njava.lang.String\n方法名：setId\n返回类型：void\n参数类型：\njava.lang.String\n方法名：setAge\n返回类型：void\n参数类型：\nint\n方法名：getAge\n返回类型：int\n参数类型：\n方法名：wait\n返回类型：void\n参数类型：\n方法名：wait\n返回类型：void\n参数类型：\nlong\nint\n方法名：wait\n返回类型：void\n参数类型：\nlong\n方法名：equals\n返回类型：boolean\n参数类型：\njava.lang.Object\n方法名：toString\n返回类型：java.lang.String\n参数类型：\n方法名：hashCode\n返回类型：int\n参数类型：\n方法名：getClass\n返回类型：java.lang.Class\n参数类型：\n方法名：notify\n返回类型：void\n参数类型：\n方法名：notifyAll\n返回类型：void\n参数类型：\n成员变量：\njava.lang.String name\nint age\njava.lang.String id\n构造函数：Student\n构造函数：Student\njava.lang.String\njava.lang.String\n\nProcess finished with exit code 0\n\n```\n\n## 注意！\n\n在`getDeclaredFields()`方法中，有这么一句注释：\n\n```\n* <p> The elements in the returned array are not sorted and are not in any\n* particular order.\n```\n\n这个注释告诉我们，用户不要在代码中依赖这些方法返回的顺序。它“不保证返回的顺序是怎样的”。这是因为在Java编译器与JVM中都有权利对Java类的字段做重排序。详细的信息可以参考：[https://www.zhihu.com/question/52856385](https://www.zhihu.com/question/52856385)。","slug":"Java补锅笔记：利用反射获得对象的信息","published":1,"updated":"2017-11-10T09:28:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhhhvn37000d27xutoux13jb","content":"<blockquote>\n<p>这是voidAlex原创的第十篇博文。<br><a id=\"more\"></a></p>\n</blockquote>\n<p>Java中，类的<code>Class</code>类的实例对象，类的成员变量也是对象，它是<code>java.lang.reflect.Field</code>的实例对象。<code>Field</code>类封装了关于成员变量的操作。</p>\n<p>同样的，类的方法也是对象，它是<code>java.lang.reflect.Method</code>的实例对象。<code>Methon</code>类封装了关于类方法的操作。</p>\n<p>构造函数是<code>java.lang.reflect.Constructor</code>的实例对象。</p>\n<h2 id=\"通过反射获取对象的信息\"><a href=\"#通过反射获取对象的信息\" class=\"headerlink\" title=\"通过反射获取对象的信息\"></a>通过反射获取对象的信息</h2><p>先声明一个普通的<code>Student</code>类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Created by 王麟东 on 2017/11/2 0002 19:12. Email: wangld1994@gmail.com</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> String name;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">  <span class=\"keyword\">private</span> String id;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name, String id)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> name;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> age;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> id;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(String id)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>Student</code>类有三个私有的成员变量，一个带参数的构造方法和一个不带参数的构造方法，还有对各个成员变量的<code>getter</code>和<code>setter</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Created by 王麟东 on 2017/11/2 0002 18:01. Email: wangld1994@gmail.com</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassMessage</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">getClassMessage</span><span class=\"params\">(Object o)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//获取类信息</span></div><div class=\"line\">    Class c = o.getClass();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//获取类名称</span></div><div class=\"line\">    System.out.println(<span class=\"string\">\"类名称：\"</span> + c.getName());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//获取所有的public函数，包括从父类继承而来的</span></div><div class=\"line\">    Method[] methods = c.getMethods();</div><div class=\"line\">    <span class=\"keyword\">for</span> (Method method : methods)&#123;</div><div class=\"line\">      <span class=\"comment\">//获得方法名</span></div><div class=\"line\">      System.out.println(<span class=\"string\">\"方法名：\"</span> + method.getName());</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//获得方法的返回类型</span></div><div class=\"line\">      Class returnType = method.getReturnType();</div><div class=\"line\">      System.out.println(<span class=\"string\">\"返回类型：\"</span> + returnType.getName());</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//获得参数类型</span></div><div class=\"line\">      Class[] paramTypes = method.getParameterTypes();</div><div class=\"line\">      System.out.println(<span class=\"string\">\"参数类型：\"</span>);</div><div class=\"line\">      <span class=\"keyword\">for</span> (Class parmType : paramTypes)&#123;</div><div class=\"line\">        System.out.println(parmType.getName());</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//获得所有成员变量</span></div><div class=\"line\">    <span class=\"comment\">//getDeclaredFields获得的是该类自己声明的变量的信息</span></div><div class=\"line\">    <span class=\"comment\">//getFields获得的是所有public的成员变量的信息</span></div><div class=\"line\">    Field[] fields = c.getDeclaredFields();</div><div class=\"line\">    System.out.println(<span class=\"string\">\"成员变量：\"</span>);</div><div class=\"line\">    <span class=\"keyword\">for</span> (Field field : fields)&#123;</div><div class=\"line\">      Class fieldType = field.getType();</div><div class=\"line\">      System.out.println(fieldType.getName() + <span class=\"string\">\" \"</span> + field.getName());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//获得构造函数的信息</span></div><div class=\"line\">    Constructor[] constructors = c.getDeclaredConstructors();</div><div class=\"line\">    <span class=\"keyword\">for</span> (Constructor constructor : constructors)&#123;</div><div class=\"line\">      System.out.println(<span class=\"string\">\"构造函数：\"</span> + constructor.getName());</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//获取构造函数的参数列表</span></div><div class=\"line\">      System.out.println(<span class=\"string\">\"参数类型：\"</span>);</div><div class=\"line\">      Class[] cparamTypes = constructor.getParameterTypes();</div><div class=\"line\">      <span class=\"keyword\">for</span> (Class cparamType : cparamTypes)&#123;</div><div class=\"line\">        System.out.println(cparamType.getName());</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试运行：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span></span>&#123;</div><div class=\"line\">  Student student = <span class=\"keyword\">new</span> Student();ClassMessage.getClassMessage(student);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\">类名称：Student</div><div class=\"line\">方法名：getName</div><div class=\"line\">返回类型：java.lang.String</div><div class=\"line\">参数类型：</div><div class=\"line\">方法名：getId</div><div class=\"line\">返回类型：java.lang.String</div><div class=\"line\">参数类型：</div><div class=\"line\">方法名：setName</div><div class=\"line\">返回类型：<span class=\"keyword\">void</span></div><div class=\"line\">参数类型：</div><div class=\"line\">java.lang.String</div><div class=\"line\">方法名：setId</div><div class=\"line\">返回类型：<span class=\"keyword\">void</span></div><div class=\"line\">参数类型：</div><div class=\"line\">java.lang.String</div><div class=\"line\">方法名：setAge</div><div class=\"line\">返回类型：<span class=\"keyword\">void</span></div><div class=\"line\">参数类型：</div><div class=\"line\"><span class=\"keyword\">int</span></div><div class=\"line\">方法名：getAge</div><div class=\"line\">返回类型：<span class=\"keyword\">int</span></div><div class=\"line\">参数类型：</div><div class=\"line\">方法名：wait</div><div class=\"line\">返回类型：<span class=\"keyword\">void</span></div><div class=\"line\">参数类型：</div><div class=\"line\">方法名：wait</div><div class=\"line\">返回类型：<span class=\"keyword\">void</span></div><div class=\"line\">参数类型：</div><div class=\"line\"><span class=\"keyword\">long</span></div><div class=\"line\"><span class=\"keyword\">int</span></div><div class=\"line\">方法名：wait</div><div class=\"line\">返回类型：<span class=\"keyword\">void</span></div><div class=\"line\">参数类型：</div><div class=\"line\"><span class=\"keyword\">long</span></div><div class=\"line\">方法名：equals</div><div class=\"line\">返回类型：<span class=\"keyword\">boolean</span></div><div class=\"line\">参数类型：</div><div class=\"line\">java.lang.Object</div><div class=\"line\">方法名：toString</div><div class=\"line\">返回类型：java.lang.String</div><div class=\"line\">参数类型：</div><div class=\"line\">方法名：hashCode</div><div class=\"line\">返回类型：<span class=\"keyword\">int</span></div><div class=\"line\">参数类型：</div><div class=\"line\">方法名：getClass</div><div class=\"line\">返回类型：java.lang.Class</div><div class=\"line\">参数类型：</div><div class=\"line\">方法名：notify</div><div class=\"line\">返回类型：<span class=\"keyword\">void</span></div><div class=\"line\">参数类型：</div><div class=\"line\">方法名：notifyAll</div><div class=\"line\">返回类型：<span class=\"keyword\">void</span></div><div class=\"line\">参数类型：</div><div class=\"line\">成员变量：</div><div class=\"line\">java.lang.String name</div><div class=\"line\"><span class=\"keyword\">int</span> age</div><div class=\"line\">java.lang.String id</div><div class=\"line\">构造函数：Student</div><div class=\"line\">构造函数：Student</div><div class=\"line\">java.lang.String</div><div class=\"line\">java.lang.String</div><div class=\"line\"></div><div class=\"line\">Process finished with exit code <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<h2 id=\"注意！\"><a href=\"#注意！\" class=\"headerlink\" title=\"注意！\"></a>注意！</h2><p>在<code>getDeclaredFields()</code>方法中，有这么一句注释：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">* &lt;p&gt; The elements in the returned array are not sorted and are not in any</div><div class=\"line\">* particular order.</div></pre></td></tr></table></figure>\n<p>这个注释告诉我们，用户不要在代码中依赖这些方法返回的顺序。它“不保证返回的顺序是怎样的”。这是因为在Java编译器与JVM中都有权利对Java类的字段做重排序。详细的信息可以参考：<a href=\"https://www.zhihu.com/question/52856385\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/52856385</a>。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是voidAlex原创的第十篇博文。<br>","more":"</p>\n</blockquote>\n<p>Java中，类的<code>Class</code>类的实例对象，类的成员变量也是对象，它是<code>java.lang.reflect.Field</code>的实例对象。<code>Field</code>类封装了关于成员变量的操作。</p>\n<p>同样的，类的方法也是对象，它是<code>java.lang.reflect.Method</code>的实例对象。<code>Methon</code>类封装了关于类方法的操作。</p>\n<p>构造函数是<code>java.lang.reflect.Constructor</code>的实例对象。</p>\n<h2 id=\"通过反射获取对象的信息\"><a href=\"#通过反射获取对象的信息\" class=\"headerlink\" title=\"通过反射获取对象的信息\"></a>通过反射获取对象的信息</h2><p>先声明一个普通的<code>Student</code>类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Created by 王麟东 on 2017/11/2 0002 19:12. Email: wangld1994@gmail.com</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> String name;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">  <span class=\"keyword\">private</span> String id;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name, String id)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> name;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> age;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> id;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(String id)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>Student</code>类有三个私有的成员变量，一个带参数的构造方法和一个不带参数的构造方法，还有对各个成员变量的<code>getter</code>和<code>setter</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Created by 王麟东 on 2017/11/2 0002 18:01. Email: wangld1994@gmail.com</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassMessage</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">getClassMessage</span><span class=\"params\">(Object o)</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//获取类信息</span></div><div class=\"line\">    Class c = o.getClass();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//获取类名称</span></div><div class=\"line\">    System.out.println(<span class=\"string\">\"类名称：\"</span> + c.getName());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//获取所有的public函数，包括从父类继承而来的</span></div><div class=\"line\">    Method[] methods = c.getMethods();</div><div class=\"line\">    <span class=\"keyword\">for</span> (Method method : methods)&#123;</div><div class=\"line\">      <span class=\"comment\">//获得方法名</span></div><div class=\"line\">      System.out.println(<span class=\"string\">\"方法名：\"</span> + method.getName());</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//获得方法的返回类型</span></div><div class=\"line\">      Class returnType = method.getReturnType();</div><div class=\"line\">      System.out.println(<span class=\"string\">\"返回类型：\"</span> + returnType.getName());</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//获得参数类型</span></div><div class=\"line\">      Class[] paramTypes = method.getParameterTypes();</div><div class=\"line\">      System.out.println(<span class=\"string\">\"参数类型：\"</span>);</div><div class=\"line\">      <span class=\"keyword\">for</span> (Class parmType : paramTypes)&#123;</div><div class=\"line\">        System.out.println(parmType.getName());</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//获得所有成员变量</span></div><div class=\"line\">    <span class=\"comment\">//getDeclaredFields获得的是该类自己声明的变量的信息</span></div><div class=\"line\">    <span class=\"comment\">//getFields获得的是所有public的成员变量的信息</span></div><div class=\"line\">    Field[] fields = c.getDeclaredFields();</div><div class=\"line\">    System.out.println(<span class=\"string\">\"成员变量：\"</span>);</div><div class=\"line\">    <span class=\"keyword\">for</span> (Field field : fields)&#123;</div><div class=\"line\">      Class fieldType = field.getType();</div><div class=\"line\">      System.out.println(fieldType.getName() + <span class=\"string\">\" \"</span> + field.getName());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//获得构造函数的信息</span></div><div class=\"line\">    Constructor[] constructors = c.getDeclaredConstructors();</div><div class=\"line\">    <span class=\"keyword\">for</span> (Constructor constructor : constructors)&#123;</div><div class=\"line\">      System.out.println(<span class=\"string\">\"构造函数：\"</span> + constructor.getName());</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//获取构造函数的参数列表</span></div><div class=\"line\">      System.out.println(<span class=\"string\">\"参数类型：\"</span>);</div><div class=\"line\">      Class[] cparamTypes = constructor.getParameterTypes();</div><div class=\"line\">      <span class=\"keyword\">for</span> (Class cparamType : cparamTypes)&#123;</div><div class=\"line\">        System.out.println(cparamType.getName());</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试运行：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span></span>&#123;</div><div class=\"line\">  Student student = <span class=\"keyword\">new</span> Student();ClassMessage.getClassMessage(student);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\">类名称：Student</div><div class=\"line\">方法名：getName</div><div class=\"line\">返回类型：java.lang.String</div><div class=\"line\">参数类型：</div><div class=\"line\">方法名：getId</div><div class=\"line\">返回类型：java.lang.String</div><div class=\"line\">参数类型：</div><div class=\"line\">方法名：setName</div><div class=\"line\">返回类型：<span class=\"keyword\">void</span></div><div class=\"line\">参数类型：</div><div class=\"line\">java.lang.String</div><div class=\"line\">方法名：setId</div><div class=\"line\">返回类型：<span class=\"keyword\">void</span></div><div class=\"line\">参数类型：</div><div class=\"line\">java.lang.String</div><div class=\"line\">方法名：setAge</div><div class=\"line\">返回类型：<span class=\"keyword\">void</span></div><div class=\"line\">参数类型：</div><div class=\"line\"><span class=\"keyword\">int</span></div><div class=\"line\">方法名：getAge</div><div class=\"line\">返回类型：<span class=\"keyword\">int</span></div><div class=\"line\">参数类型：</div><div class=\"line\">方法名：wait</div><div class=\"line\">返回类型：<span class=\"keyword\">void</span></div><div class=\"line\">参数类型：</div><div class=\"line\">方法名：wait</div><div class=\"line\">返回类型：<span class=\"keyword\">void</span></div><div class=\"line\">参数类型：</div><div class=\"line\"><span class=\"keyword\">long</span></div><div class=\"line\"><span class=\"keyword\">int</span></div><div class=\"line\">方法名：wait</div><div class=\"line\">返回类型：<span class=\"keyword\">void</span></div><div class=\"line\">参数类型：</div><div class=\"line\"><span class=\"keyword\">long</span></div><div class=\"line\">方法名：equals</div><div class=\"line\">返回类型：<span class=\"keyword\">boolean</span></div><div class=\"line\">参数类型：</div><div class=\"line\">java.lang.Object</div><div class=\"line\">方法名：toString</div><div class=\"line\">返回类型：java.lang.String</div><div class=\"line\">参数类型：</div><div class=\"line\">方法名：hashCode</div><div class=\"line\">返回类型：<span class=\"keyword\">int</span></div><div class=\"line\">参数类型：</div><div class=\"line\">方法名：getClass</div><div class=\"line\">返回类型：java.lang.Class</div><div class=\"line\">参数类型：</div><div class=\"line\">方法名：notify</div><div class=\"line\">返回类型：<span class=\"keyword\">void</span></div><div class=\"line\">参数类型：</div><div class=\"line\">方法名：notifyAll</div><div class=\"line\">返回类型：<span class=\"keyword\">void</span></div><div class=\"line\">参数类型：</div><div class=\"line\">成员变量：</div><div class=\"line\">java.lang.String name</div><div class=\"line\"><span class=\"keyword\">int</span> age</div><div class=\"line\">java.lang.String id</div><div class=\"line\">构造函数：Student</div><div class=\"line\">构造函数：Student</div><div class=\"line\">java.lang.String</div><div class=\"line\">java.lang.String</div><div class=\"line\"></div><div class=\"line\">Process finished with exit code <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<h2 id=\"注意！\"><a href=\"#注意！\" class=\"headerlink\" title=\"注意！\"></a>注意！</h2><p>在<code>getDeclaredFields()</code>方法中，有这么一句注释：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">* &lt;p&gt; The elements in the returned array are not sorted and are not in any</div><div class=\"line\">* particular order.</div></pre></td></tr></table></figure>\n<p>这个注释告诉我们，用户不要在代码中依赖这些方法返回的顺序。它“不保证返回的顺序是怎样的”。这是因为在Java编译器与JVM中都有权利对Java类的字段做重排序。详细的信息可以参考：<a href=\"https://www.zhihu.com/question/52856385\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/52856385</a>。</p>"},{"title":"Java补锅笔记：反射机制","date":"2017-11-02T00:39:31.000Z","_content":"> 这是voidAlex原创的第九篇博文。\n<!-- more -->\n\n## 什么是反射\n\n能够分析类能力的程序成为反射（*reflective*）。Java的反射机制可以让我们在编译期(*Compile Time*)之外的运行期(*Runtime*)检查类，接口，变量以及方法的信息。反射机制可以用来：\n\n>* 在运行中分析类的能力；\n>* 在运行中查看对象,获取成员变量、接口、构造方法等；\n>* 动态创建和访问数组；\n>* 运行时复制对象\n>* ……\n\n## Class类\n\n在面向对象的世界里，一切皆对象。在Java中，只有静态成员变量和普通数据类型不是对象。类也是对象，它是`java.lang.Class`类的实例对象，任何一个类都是`Class`类的实例对象，并且一个类只有可能是`Class`类的一个实例对象。\n\n在`Class`类的源码里，它的构造方法是私有的，上面有这么一段注释：\n\n```\n/*\n * Private constructor. Only the Java Virtual Machine creates Class objects.\n * This constructor is not used and prevents the default constructor being\n * generated.\n */\n```\n\n所以，`Class`类无法通过构造方法去实例化，只有JVM虚拟机才能创建`Class`类的实例对象。获得一个`Class`类的实例对象有下面三种方法：\n\n### 第一种方法直接通过类的隐含的成员变量class去获取\n\n```java\nClass c1 = Student.class;\n```\n\n### 第二种方法，已知该类的实例对象，通过`getClass`方法去获取\n\n```java\nClass c2 = student.getClass;\n```\n\n### 第三种方法，通过完整的类名获得\n\n```java\nClass c3 = Class.forName(\"com.enity.Student\");\n```\n\n所以我们可以通过该类的类类型来创建该类的实例对象，但是前提是该类需要有无参数的构造方法：\n\n```java\nClass c = Student.class;\nStudent student = (Student) c.newInstance();\n```","source":"_posts/Java补锅笔记：反射机制.md","raw":"---\ntitle: Java补锅笔记：反射机制\ndate: 2017-11-02 08:39:31\ntags: ['补锅笔记','Java','反射']\n---\n> 这是voidAlex原创的第九篇博文。\n<!-- more -->\n\n## 什么是反射\n\n能够分析类能力的程序成为反射（*reflective*）。Java的反射机制可以让我们在编译期(*Compile Time*)之外的运行期(*Runtime*)检查类，接口，变量以及方法的信息。反射机制可以用来：\n\n>* 在运行中分析类的能力；\n>* 在运行中查看对象,获取成员变量、接口、构造方法等；\n>* 动态创建和访问数组；\n>* 运行时复制对象\n>* ……\n\n## Class类\n\n在面向对象的世界里，一切皆对象。在Java中，只有静态成员变量和普通数据类型不是对象。类也是对象，它是`java.lang.Class`类的实例对象，任何一个类都是`Class`类的实例对象，并且一个类只有可能是`Class`类的一个实例对象。\n\n在`Class`类的源码里，它的构造方法是私有的，上面有这么一段注释：\n\n```\n/*\n * Private constructor. Only the Java Virtual Machine creates Class objects.\n * This constructor is not used and prevents the default constructor being\n * generated.\n */\n```\n\n所以，`Class`类无法通过构造方法去实例化，只有JVM虚拟机才能创建`Class`类的实例对象。获得一个`Class`类的实例对象有下面三种方法：\n\n### 第一种方法直接通过类的隐含的成员变量class去获取\n\n```java\nClass c1 = Student.class;\n```\n\n### 第二种方法，已知该类的实例对象，通过`getClass`方法去获取\n\n```java\nClass c2 = student.getClass;\n```\n\n### 第三种方法，通过完整的类名获得\n\n```java\nClass c3 = Class.forName(\"com.enity.Student\");\n```\n\n所以我们可以通过该类的类类型来创建该类的实例对象，但是前提是该类需要有无参数的构造方法：\n\n```java\nClass c = Student.class;\nStudent student = (Student) c.newInstance();\n```","slug":"Java补锅笔记：反射机制","published":1,"updated":"2017-11-10T09:28:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhhhvn39000f27xuhfcnoiid","content":"<blockquote>\n<p>这是voidAlex原创的第九篇博文。<br><a id=\"more\"></a></p>\n</blockquote>\n<h2 id=\"什么是反射\"><a href=\"#什么是反射\" class=\"headerlink\" title=\"什么是反射\"></a>什么是反射</h2><p>能够分析类能力的程序成为反射（<em>reflective</em>）。Java的反射机制可以让我们在编译期(<em>Compile Time</em>)之外的运行期(<em>Runtime</em>)检查类，接口，变量以及方法的信息。反射机制可以用来：</p>\n<blockquote>\n<ul>\n<li>在运行中分析类的能力；</li>\n<li>在运行中查看对象,获取成员变量、接口、构造方法等；</li>\n<li>动态创建和访问数组；</li>\n<li>运行时复制对象</li>\n<li>……</li>\n</ul>\n</blockquote>\n<h2 id=\"Class类\"><a href=\"#Class类\" class=\"headerlink\" title=\"Class类\"></a>Class类</h2><p>在面向对象的世界里，一切皆对象。在Java中，只有静态成员变量和普通数据类型不是对象。类也是对象，它是<code>java.lang.Class</code>类的实例对象，任何一个类都是<code>Class</code>类的实例对象，并且一个类只有可能是<code>Class</code>类的一个实例对象。</p>\n<p>在<code>Class</code>类的源码里，它的构造方法是私有的，上面有这么一段注释：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*</div><div class=\"line\"> * Private constructor. Only the Java Virtual Machine creates Class objects.</div><div class=\"line\"> * This constructor is not used and prevents the default constructor being</div><div class=\"line\"> * generated.</div><div class=\"line\"> */</div></pre></td></tr></table></figure>\n<p>所以，<code>Class</code>类无法通过构造方法去实例化，只有JVM虚拟机才能创建<code>Class</code>类的实例对象。获得一个<code>Class</code>类的实例对象有下面三种方法：</p>\n<h3 id=\"第一种方法直接通过类的隐含的成员变量class去获取\"><a href=\"#第一种方法直接通过类的隐含的成员变量class去获取\" class=\"headerlink\" title=\"第一种方法直接通过类的隐含的成员变量class去获取\"></a>第一种方法直接通过类的隐含的成员变量class去获取</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class c1 = Student.class;</div></pre></td></tr></table></figure>\n<h3 id=\"第二种方法，已知该类的实例对象，通过getClass方法去获取\"><a href=\"#第二种方法，已知该类的实例对象，通过getClass方法去获取\" class=\"headerlink\" title=\"第二种方法，已知该类的实例对象，通过getClass方法去获取\"></a>第二种方法，已知该类的实例对象，通过<code>getClass</code>方法去获取</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class c2 = student.getClass;</div></pre></td></tr></table></figure>\n<h3 id=\"第三种方法，通过完整的类名获得\"><a href=\"#第三种方法，通过完整的类名获得\" class=\"headerlink\" title=\"第三种方法，通过完整的类名获得\"></a>第三种方法，通过完整的类名获得</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class c3 = Class.forName(<span class=\"string\">\"com.enity.Student\"</span>);</div></pre></td></tr></table></figure>\n<p>所以我们可以通过该类的类类型来创建该类的实例对象，但是前提是该类需要有无参数的构造方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class c = Student.class;</div><div class=\"line\">Student student = (Student) c.newInstance();</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是voidAlex原创的第九篇博文。<br>","more":"</p>\n</blockquote>\n<h2 id=\"什么是反射\"><a href=\"#什么是反射\" class=\"headerlink\" title=\"什么是反射\"></a>什么是反射</h2><p>能够分析类能力的程序成为反射（<em>reflective</em>）。Java的反射机制可以让我们在编译期(<em>Compile Time</em>)之外的运行期(<em>Runtime</em>)检查类，接口，变量以及方法的信息。反射机制可以用来：</p>\n<blockquote>\n<ul>\n<li>在运行中分析类的能力；</li>\n<li>在运行中查看对象,获取成员变量、接口、构造方法等；</li>\n<li>动态创建和访问数组；</li>\n<li>运行时复制对象</li>\n<li>……</li>\n</ul>\n</blockquote>\n<h2 id=\"Class类\"><a href=\"#Class类\" class=\"headerlink\" title=\"Class类\"></a>Class类</h2><p>在面向对象的世界里，一切皆对象。在Java中，只有静态成员变量和普通数据类型不是对象。类也是对象，它是<code>java.lang.Class</code>类的实例对象，任何一个类都是<code>Class</code>类的实例对象，并且一个类只有可能是<code>Class</code>类的一个实例对象。</p>\n<p>在<code>Class</code>类的源码里，它的构造方法是私有的，上面有这么一段注释：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*</div><div class=\"line\"> * Private constructor. Only the Java Virtual Machine creates Class objects.</div><div class=\"line\"> * This constructor is not used and prevents the default constructor being</div><div class=\"line\"> * generated.</div><div class=\"line\"> */</div></pre></td></tr></table></figure>\n<p>所以，<code>Class</code>类无法通过构造方法去实例化，只有JVM虚拟机才能创建<code>Class</code>类的实例对象。获得一个<code>Class</code>类的实例对象有下面三种方法：</p>\n<h3 id=\"第一种方法直接通过类的隐含的成员变量class去获取\"><a href=\"#第一种方法直接通过类的隐含的成员变量class去获取\" class=\"headerlink\" title=\"第一种方法直接通过类的隐含的成员变量class去获取\"></a>第一种方法直接通过类的隐含的成员变量class去获取</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class c1 = Student.class;</div></pre></td></tr></table></figure>\n<h3 id=\"第二种方法，已知该类的实例对象，通过getClass方法去获取\"><a href=\"#第二种方法，已知该类的实例对象，通过getClass方法去获取\" class=\"headerlink\" title=\"第二种方法，已知该类的实例对象，通过getClass方法去获取\"></a>第二种方法，已知该类的实例对象，通过<code>getClass</code>方法去获取</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class c2 = student.getClass;</div></pre></td></tr></table></figure>\n<h3 id=\"第三种方法，通过完整的类名获得\"><a href=\"#第三种方法，通过完整的类名获得\" class=\"headerlink\" title=\"第三种方法，通过完整的类名获得\"></a>第三种方法，通过完整的类名获得</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class c3 = Class.forName(<span class=\"string\">\"com.enity.Student\"</span>);</div></pre></td></tr></table></figure>\n<p>所以我们可以通过该类的类类型来创建该类的实例对象，但是前提是该类需要有无参数的构造方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class c = Student.class;</div><div class=\"line\">Student student = (Student) c.newInstance();</div></pre></td></tr></table></figure>"},{"title":"Hello World","date":"2017-03-02T07:33:50.000Z","_content":"你好，世界。\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2017-03-02 15:33:50\ntags: ['随笔']\n---\n你好，世界。\n","slug":"hello-world","published":1,"updated":"2017-07-08T03:24:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhhhvn3b000i27xubcsorig1","content":"<p>你好，世界。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>你好，世界。</p>\n"},{"title":"一种在服务器上部署Hexo博客的思路","author":"voidAlex","date":"2018-02-19T05:01:00.000Z","_content":"\n## 前言\n\n笔者在过年期间买了域名和VPS，打算迁移博客到VPS上（GitHub Page访问速度实在是……你懂得）。由于平时使用的主力语言是Java，所以找了两个开源的Java博客系统[Solo](https://github.com/b3log/solo)和[Tale](https://github.com/otale/tale)，试用了之后发现都有不满意的地方，比如说：\n- 主题少\n- 有广告（虽然是开源的能理解，但是强迫症接受不了……）\n- 不支持MathJax渲染（虽然自己加上了，但还是有问题，强迫症同样无法接受……）\n- ……\n\n思来想去还是hexo好，遂决定把hexo部署在服务器上。搜了一下发现大家都是把VPS当做Git服务器在用，然后用Nginx去解析静态资源。这种方式本质上和托管在GitHub上没什么区别，无非就是解析速度快点而已。这样做除了加快解析速度外，并没有任何好处。写一篇博文还是要经历`创建文件--写博文--预览--生成静态资源--使用Git同步`这么一个过程。而且在更换电脑后必须配置`Node.js`、`Git`、`Hexo`等一大堆东西之后才能写，等于花VPS的钱，只起到了一个加速效果。\n\n好在`Hexo`还有`hexo-server`和`hexo-admin`这样的插件。之前并没有觉得`hexo-admin`这样的插件有什么用，但是在VPS上，它的价值体现出来了。于是，一个部署的思路诞生了：\n- 使用`hexo-server`作为hexo的服务器\n- 使用`hexo-admin`作为hexo的管理后台\n- 使用`Nginx`作为反向代理服务器\n- 使用`Git`与GitHub仓库同步（可选）\n\n这样的话，等于给Hexo博客多了一个后台。成功部署后在本地只需要一个浏览器就可以美滋滋的写博客了~\n\n阅读前方内容需要一定的基础，假设你已经在GitHub Page上成功的部署了你的博客，并且有一定的Linux基础知识。如果你还没有使用过Hexo，那么可以先看看[官方文档](https://hexo.io/zh-cn/docs/index.html)和[这篇教程](https://zhuanlan.zhihu.com/p/25471760)。\n\n## （题外话）域名和VPS\n\n在国内购买服务器和域名需要备案。为了避免麻烦笔者选择了[狗爹](https://godaddy.com/)和[vultr](https://www.vultr.com/?ref=7336080)。VPS套餐选择的是每个月5刀的套餐，配置只有1核CUP和1GB内存（编译Node.js用了40分钟），但是已经足够。\n\n## 服务器的环境配置\n\n服务器配置的所有操作均为在Ubuntu 16.04下的操作。\n\n### 安装Node.js\n\nHexo是在Node.js上构建的博客系统，通过Node.js将`.md`文件渲染为`.html`文件。所以，安装Node.js必不可少。\n\n安装Node.js的方法很多，笔者选择下载源码编译安装。注意，编译安装的时间长短视你的服务器配置而定，笔者的小水管上编译了40多分钟才玩。\n\n首先安装`gcc`、`g++`、`make`、`python`等编译解释环境：\n```\nsudo apt update #老版本Ubuntu请使用apt-get\nsudo apt install gcc g++ make python\n```\n获取Node.js的源码：\n```\nwget http://nodejs.org/dist/latest-v8.x/node-v8.9.4.tar.gz\ntar zxvf node-v8.9.4.tar.gz\n```\n开始安装：\n```\ncd node-v8.9.4\n./configure\t#如果gcc、make等依赖未安装会报错\nmake install\t#安装时间较长\n```\n安装完成之后验证：\n```\nnode -v\nv8.9.4\n```\n\n### 安装Nginx并配置反向代理\n\nNginx在Ubuntu下的安装较为简单，直接通过apt源即可安装：\n\n```\nsudo apt update\nsudo apt install nginx\n```\n\n启动Nginx：\n```\nservice nginx start\n```\n\n在浏览器中输入你的服务器ip进行验证（不用加端口号），如果能看见Nginx的欢迎页面说明安装成功。\n\n编辑`/etc/nginx/nginx.conf`，配置反向代理：\n```\nserver {\n\tlisten       80; #监听端口，默认为http请求的80端口\n    server_name  voidalex.one;\t#你的域名\n    \n    location / {\n        proxy_pass http://localhost:4000/;\t#代理转发，你的hexo服务器的地址\n    }\n}\n```\n\n保存完毕，执行`service nginx reload`重启Nginx服务器。\n\n## 配置DNS解析\n\n在你购买的域名服务商的控制面板中，配置DNS解析，IP为你的服务器公网IP（不加端口）。设置完毕稍等一会（DNS服务器需要刷新缓存），访问你的域名即可看到Nginx的欢迎页面。\n\n## 本地配置Hexo\n\n### 安装插件\n\n在服务器运行Hexo需要依赖于`hexo-server`和`hexo-admin`。如果你在本地已经安装这两个插件，请跳过这一步。（当然你也可以直接copy你的hexo博客目录到服务器上安装这两个插件，不过在本地先安装方便调试）\n\ncd到你的博客根目录下，执行：\n```\nnpm install hexo-server@0.3.1 --save\nnpm install hexo-admin@2.3.0 --save\n```\n\n安装完毕后，执行：\n```\nhexo s\n```\n打开浏览器，访问http://localhost:4000 即可预览博客，访问http://localhost:4000/admin 即可进入`hexo-admin`后台管理界面。\n\n### 配置hexo-admin\n\nhexo-admin默认没有开启密码保护，需要自己手动开启。\n\n访问http://localhost:4000/admin 点击`Settings--Setup authentification here`进行密码设置：\n![](https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/93762063.jpg)\n\n输入用户名、密码后，将生成的代码复制：\n\n![](https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/98662173.jpg)\n\n然后打开博客根目录下的`_config.yml`，将复制的代码粘贴到末尾。\n\n重新启动hexo服务器，访问http://localhost:4000/admin 如果出现登录界面，则配置成功。\n\n## 将Hexo博客迁移至服务器\n\n很简单，将你的整个博客目录打包，然后上传到服务器，然后解包。你在本地使用npm安装的hexo插件都在博客根目录下的`node_modules`目录下。如果你没有动这个目录，那么在服务器上解包之后就能直接用了。解包推荐使用`unzip`。\n\n```\nunzip blog.zip\ncd blog\nhexo s\n```\n\n如果一切正常，访问你的域名就可以看到博客了，访问域名/admin就能进入到后台界面。\n\n> Tips：如果执行hexo相关命令报错的话，按照博客根目录下`package.json`中列出的插件名和版本重新按照一遍就好了。如：`npm install hexo@3.5.0 --save`\n\n## 善后工作\n\n实际上，到上一步已经成功的把Hexo部署在服务器上了。但是为了获得更好的体验还是需要再进行一些配置。\n\n### 后台运行hexo\n直接使用`hexo s`启动服务器，Ctrl+C或者shell关掉就结束进程了。可以使用`nohup`来后台运行hexo。在博客根目录下，执行：\n\n```\nnohup hexo s &\n```\n这样hexo就会运行在后台，输出的日志会被记录在`nohup.out`中。\n\n### 优化解析速度\n部署好了，但是加载速度仍然很慢。原因是每次访问的时候hexo都会动态的去加载`.md`文件，然后由Node.js渲染成html，再展示出来。看到hexo的官方文档中提了这么一句：\n![](https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/65761270.jpg)\n重启服务器之后，果然加载快了很多很多。\n\n然而，这样启动服务器，你在后台编辑过的文章都不会被加载出来。需要你手动的执行`hexo g`命令，才能加载出来。\n\n强迫症是忍受不了这样的操作的，好在`hexo-admin`中提供了这样一个功能：\n\n![](https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/5139675.jpg)\n\n点击按钮就能执行你的部署脚本。在博客根目录下的`_config.yml`中添加配置：\n```\nadmin:\n\tdeployCommand: './hexo-deploy.sh'\n```\n\n然后在博客根目录下创建`hexo-deploy.sh`，并编辑：\n```\n#!/usr/bin/env sh\nhexo g\n```\n\n给`hexo-deploy.sh`授予权限：\n```\nchmod a+x hexo-deploy.sh\n```\n\n重启服务器，编辑博文后点击Deploy按钮就可以把文章渲染成html页面来访问了。\n\n### 与GitHub Page同步\n\n如果想在服务器上和原仓库同步的话，只需要配置Git，然后修改部署脚本就行了。Git的安装和配置不在赘述，要注意的是服务器上安装的Git不是用来配置Git服务器的，而是当做一个用户来提交代码的。配置完记得在你的GitHub中添加秘钥。\n\n配置完之后，只需要修改`hexo-deploy.sh`就可以了：\n```\n#!/usr/bin/env sh\nhexo g -d\n```\n\n然后重启服务器，以后每次点击deploy按钮时都会把渲染的html页面提交到GitHub仓库里。输出信息如下图：\n\n![](https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/8761275.jpg)\n\n![](https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/27412.jpg)\n\n如果看到这些信息，说明配置没有问题，代码已经提交成功了。\n\n验证一下：\n\n![](https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/52277650.jpg)\n\n![](https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/51560676.jpg)\n\n## 安利一下\n\n安利几个好东西吧。\n\n[狗爹](https://sg.godaddy.com/zh/)，全球最大的域名服务商\n\n[vultr](https://www.vultr.com/?ref=7336080)，美帝的VPS提供商，按分钟计费。推荐每个月5刀的套餐，硅谷节点（千万不要选新加坡和日本节点，很容易被墙而且速度奇慢）\n\n[Moeditor](https://github.com/Moeditor/Moeditor)，十分简洁舒服的Markdown编辑器\n\n[indigo](https://github.com/yscoder/hexo-theme-indigo)，很好看的一个Hexo主题\n\n\n\n\n","source":"_posts/一种在服务器上部署Hexo博客的思路.md","raw":"title: 一种在服务器上部署Hexo博客的思路\nauthor: voidAlex\ntags:\n  - 杂记\n  - 配置\ncategories: []\ndate: 2018-02-19 13:01:00\n---\n\n## 前言\n\n笔者在过年期间买了域名和VPS，打算迁移博客到VPS上（GitHub Page访问速度实在是……你懂得）。由于平时使用的主力语言是Java，所以找了两个开源的Java博客系统[Solo](https://github.com/b3log/solo)和[Tale](https://github.com/otale/tale)，试用了之后发现都有不满意的地方，比如说：\n- 主题少\n- 有广告（虽然是开源的能理解，但是强迫症接受不了……）\n- 不支持MathJax渲染（虽然自己加上了，但还是有问题，强迫症同样无法接受……）\n- ……\n\n思来想去还是hexo好，遂决定把hexo部署在服务器上。搜了一下发现大家都是把VPS当做Git服务器在用，然后用Nginx去解析静态资源。这种方式本质上和托管在GitHub上没什么区别，无非就是解析速度快点而已。这样做除了加快解析速度外，并没有任何好处。写一篇博文还是要经历`创建文件--写博文--预览--生成静态资源--使用Git同步`这么一个过程。而且在更换电脑后必须配置`Node.js`、`Git`、`Hexo`等一大堆东西之后才能写，等于花VPS的钱，只起到了一个加速效果。\n\n好在`Hexo`还有`hexo-server`和`hexo-admin`这样的插件。之前并没有觉得`hexo-admin`这样的插件有什么用，但是在VPS上，它的价值体现出来了。于是，一个部署的思路诞生了：\n- 使用`hexo-server`作为hexo的服务器\n- 使用`hexo-admin`作为hexo的管理后台\n- 使用`Nginx`作为反向代理服务器\n- 使用`Git`与GitHub仓库同步（可选）\n\n这样的话，等于给Hexo博客多了一个后台。成功部署后在本地只需要一个浏览器就可以美滋滋的写博客了~\n\n阅读前方内容需要一定的基础，假设你已经在GitHub Page上成功的部署了你的博客，并且有一定的Linux基础知识。如果你还没有使用过Hexo，那么可以先看看[官方文档](https://hexo.io/zh-cn/docs/index.html)和[这篇教程](https://zhuanlan.zhihu.com/p/25471760)。\n\n## （题外话）域名和VPS\n\n在国内购买服务器和域名需要备案。为了避免麻烦笔者选择了[狗爹](https://godaddy.com/)和[vultr](https://www.vultr.com/?ref=7336080)。VPS套餐选择的是每个月5刀的套餐，配置只有1核CUP和1GB内存（编译Node.js用了40分钟），但是已经足够。\n\n## 服务器的环境配置\n\n服务器配置的所有操作均为在Ubuntu 16.04下的操作。\n\n### 安装Node.js\n\nHexo是在Node.js上构建的博客系统，通过Node.js将`.md`文件渲染为`.html`文件。所以，安装Node.js必不可少。\n\n安装Node.js的方法很多，笔者选择下载源码编译安装。注意，编译安装的时间长短视你的服务器配置而定，笔者的小水管上编译了40多分钟才玩。\n\n首先安装`gcc`、`g++`、`make`、`python`等编译解释环境：\n```\nsudo apt update #老版本Ubuntu请使用apt-get\nsudo apt install gcc g++ make python\n```\n获取Node.js的源码：\n```\nwget http://nodejs.org/dist/latest-v8.x/node-v8.9.4.tar.gz\ntar zxvf node-v8.9.4.tar.gz\n```\n开始安装：\n```\ncd node-v8.9.4\n./configure\t#如果gcc、make等依赖未安装会报错\nmake install\t#安装时间较长\n```\n安装完成之后验证：\n```\nnode -v\nv8.9.4\n```\n\n### 安装Nginx并配置反向代理\n\nNginx在Ubuntu下的安装较为简单，直接通过apt源即可安装：\n\n```\nsudo apt update\nsudo apt install nginx\n```\n\n启动Nginx：\n```\nservice nginx start\n```\n\n在浏览器中输入你的服务器ip进行验证（不用加端口号），如果能看见Nginx的欢迎页面说明安装成功。\n\n编辑`/etc/nginx/nginx.conf`，配置反向代理：\n```\nserver {\n\tlisten       80; #监听端口，默认为http请求的80端口\n    server_name  voidalex.one;\t#你的域名\n    \n    location / {\n        proxy_pass http://localhost:4000/;\t#代理转发，你的hexo服务器的地址\n    }\n}\n```\n\n保存完毕，执行`service nginx reload`重启Nginx服务器。\n\n## 配置DNS解析\n\n在你购买的域名服务商的控制面板中，配置DNS解析，IP为你的服务器公网IP（不加端口）。设置完毕稍等一会（DNS服务器需要刷新缓存），访问你的域名即可看到Nginx的欢迎页面。\n\n## 本地配置Hexo\n\n### 安装插件\n\n在服务器运行Hexo需要依赖于`hexo-server`和`hexo-admin`。如果你在本地已经安装这两个插件，请跳过这一步。（当然你也可以直接copy你的hexo博客目录到服务器上安装这两个插件，不过在本地先安装方便调试）\n\ncd到你的博客根目录下，执行：\n```\nnpm install hexo-server@0.3.1 --save\nnpm install hexo-admin@2.3.0 --save\n```\n\n安装完毕后，执行：\n```\nhexo s\n```\n打开浏览器，访问http://localhost:4000 即可预览博客，访问http://localhost:4000/admin 即可进入`hexo-admin`后台管理界面。\n\n### 配置hexo-admin\n\nhexo-admin默认没有开启密码保护，需要自己手动开启。\n\n访问http://localhost:4000/admin 点击`Settings--Setup authentification here`进行密码设置：\n![](https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/93762063.jpg)\n\n输入用户名、密码后，将生成的代码复制：\n\n![](https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/98662173.jpg)\n\n然后打开博客根目录下的`_config.yml`，将复制的代码粘贴到末尾。\n\n重新启动hexo服务器，访问http://localhost:4000/admin 如果出现登录界面，则配置成功。\n\n## 将Hexo博客迁移至服务器\n\n很简单，将你的整个博客目录打包，然后上传到服务器，然后解包。你在本地使用npm安装的hexo插件都在博客根目录下的`node_modules`目录下。如果你没有动这个目录，那么在服务器上解包之后就能直接用了。解包推荐使用`unzip`。\n\n```\nunzip blog.zip\ncd blog\nhexo s\n```\n\n如果一切正常，访问你的域名就可以看到博客了，访问域名/admin就能进入到后台界面。\n\n> Tips：如果执行hexo相关命令报错的话，按照博客根目录下`package.json`中列出的插件名和版本重新按照一遍就好了。如：`npm install hexo@3.5.0 --save`\n\n## 善后工作\n\n实际上，到上一步已经成功的把Hexo部署在服务器上了。但是为了获得更好的体验还是需要再进行一些配置。\n\n### 后台运行hexo\n直接使用`hexo s`启动服务器，Ctrl+C或者shell关掉就结束进程了。可以使用`nohup`来后台运行hexo。在博客根目录下，执行：\n\n```\nnohup hexo s &\n```\n这样hexo就会运行在后台，输出的日志会被记录在`nohup.out`中。\n\n### 优化解析速度\n部署好了，但是加载速度仍然很慢。原因是每次访问的时候hexo都会动态的去加载`.md`文件，然后由Node.js渲染成html，再展示出来。看到hexo的官方文档中提了这么一句：\n![](https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/65761270.jpg)\n重启服务器之后，果然加载快了很多很多。\n\n然而，这样启动服务器，你在后台编辑过的文章都不会被加载出来。需要你手动的执行`hexo g`命令，才能加载出来。\n\n强迫症是忍受不了这样的操作的，好在`hexo-admin`中提供了这样一个功能：\n\n![](https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/5139675.jpg)\n\n点击按钮就能执行你的部署脚本。在博客根目录下的`_config.yml`中添加配置：\n```\nadmin:\n\tdeployCommand: './hexo-deploy.sh'\n```\n\n然后在博客根目录下创建`hexo-deploy.sh`，并编辑：\n```\n#!/usr/bin/env sh\nhexo g\n```\n\n给`hexo-deploy.sh`授予权限：\n```\nchmod a+x hexo-deploy.sh\n```\n\n重启服务器，编辑博文后点击Deploy按钮就可以把文章渲染成html页面来访问了。\n\n### 与GitHub Page同步\n\n如果想在服务器上和原仓库同步的话，只需要配置Git，然后修改部署脚本就行了。Git的安装和配置不在赘述，要注意的是服务器上安装的Git不是用来配置Git服务器的，而是当做一个用户来提交代码的。配置完记得在你的GitHub中添加秘钥。\n\n配置完之后，只需要修改`hexo-deploy.sh`就可以了：\n```\n#!/usr/bin/env sh\nhexo g -d\n```\n\n然后重启服务器，以后每次点击deploy按钮时都会把渲染的html页面提交到GitHub仓库里。输出信息如下图：\n\n![](https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/8761275.jpg)\n\n![](https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/27412.jpg)\n\n如果看到这些信息，说明配置没有问题，代码已经提交成功了。\n\n验证一下：\n\n![](https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/52277650.jpg)\n\n![](https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/51560676.jpg)\n\n## 安利一下\n\n安利几个好东西吧。\n\n[狗爹](https://sg.godaddy.com/zh/)，全球最大的域名服务商\n\n[vultr](https://www.vultr.com/?ref=7336080)，美帝的VPS提供商，按分钟计费。推荐每个月5刀的套餐，硅谷节点（千万不要选新加坡和日本节点，很容易被墙而且速度奇慢）\n\n[Moeditor](https://github.com/Moeditor/Moeditor)，十分简洁舒服的Markdown编辑器\n\n[indigo](https://github.com/yscoder/hexo-theme-indigo)，很好看的一个Hexo主题\n\n\n\n\n","slug":"一种在服务器上部署Hexo博客的思路","published":1,"updated":"2018-02-21T09:31:01.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhhhvn3f000j27xuz7gz4wf8","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>笔者在过年期间买了域名和VPS，打算迁移博客到VPS上（GitHub Page访问速度实在是……你懂得）。由于平时使用的主力语言是Java，所以找了两个开源的Java博客系统<a href=\"https://github.com/b3log/solo\" target=\"_blank\" rel=\"noopener\">Solo</a>和<a href=\"https://github.com/otale/tale\" target=\"_blank\" rel=\"noopener\">Tale</a>，试用了之后发现都有不满意的地方，比如说：</p>\n<ul>\n<li>主题少</li>\n<li>有广告（虽然是开源的能理解，但是强迫症接受不了……）</li>\n<li>不支持MathJax渲染（虽然自己加上了，但还是有问题，强迫症同样无法接受……）</li>\n<li>……</li>\n</ul>\n<p>思来想去还是hexo好，遂决定把hexo部署在服务器上。搜了一下发现大家都是把VPS当做Git服务器在用，然后用Nginx去解析静态资源。这种方式本质上和托管在GitHub上没什么区别，无非就是解析速度快点而已。这样做除了加快解析速度外，并没有任何好处。写一篇博文还是要经历<code>创建文件--写博文--预览--生成静态资源--使用Git同步</code>这么一个过程。而且在更换电脑后必须配置<code>Node.js</code>、<code>Git</code>、<code>Hexo</code>等一大堆东西之后才能写，等于花VPS的钱，只起到了一个加速效果。</p>\n<p>好在<code>Hexo</code>还有<code>hexo-server</code>和<code>hexo-admin</code>这样的插件。之前并没有觉得<code>hexo-admin</code>这样的插件有什么用，但是在VPS上，它的价值体现出来了。于是，一个部署的思路诞生了：</p>\n<ul>\n<li>使用<code>hexo-server</code>作为hexo的服务器</li>\n<li>使用<code>hexo-admin</code>作为hexo的管理后台</li>\n<li>使用<code>Nginx</code>作为反向代理服务器</li>\n<li>使用<code>Git</code>与GitHub仓库同步（可选）</li>\n</ul>\n<p>这样的话，等于给Hexo博客多了一个后台。成功部署后在本地只需要一个浏览器就可以美滋滋的写博客了~</p>\n<p>阅读前方内容需要一定的基础，假设你已经在GitHub Page上成功的部署了你的博客，并且有一定的Linux基础知识。如果你还没有使用过Hexo，那么可以先看看<a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>和<a href=\"https://zhuanlan.zhihu.com/p/25471760\" target=\"_blank\" rel=\"noopener\">这篇教程</a>。</p>\n<h2 id=\"（题外话）域名和VPS\"><a href=\"#（题外话）域名和VPS\" class=\"headerlink\" title=\"（题外话）域名和VPS\"></a>（题外话）域名和VPS</h2><p>在国内购买服务器和域名需要备案。为了避免麻烦笔者选择了<a href=\"https://godaddy.com/\" target=\"_blank\" rel=\"noopener\">狗爹</a>和<a href=\"https://www.vultr.com/?ref=7336080\" target=\"_blank\" rel=\"noopener\">vultr</a>。VPS套餐选择的是每个月5刀的套餐，配置只有1核CUP和1GB内存（编译Node.js用了40分钟），但是已经足够。</p>\n<h2 id=\"服务器的环境配置\"><a href=\"#服务器的环境配置\" class=\"headerlink\" title=\"服务器的环境配置\"></a>服务器的环境配置</h2><p>服务器配置的所有操作均为在Ubuntu 16.04下的操作。</p>\n<h3 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h3><p>Hexo是在Node.js上构建的博客系统，通过Node.js将<code>.md</code>文件渲染为<code>.html</code>文件。所以，安装Node.js必不可少。</p>\n<p>安装Node.js的方法很多，笔者选择下载源码编译安装。注意，编译安装的时间长短视你的服务器配置而定，笔者的小水管上编译了40多分钟才玩。</p>\n<p>首先安装<code>gcc</code>、<code>g++</code>、<code>make</code>、<code>python</code>等编译解释环境：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt update #老版本Ubuntu请使用apt-get</div><div class=\"line\">sudo apt install gcc g++ make python</div></pre></td></tr></table></figure></p>\n<p>获取Node.js的源码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://nodejs.org/dist/latest-v8.x/node-v8.9.4.tar.gz</div><div class=\"line\">tar zxvf node-v8.9.4.tar.gz</div></pre></td></tr></table></figure></p>\n<p>开始安装：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd node-v8.9.4</div><div class=\"line\">./configure\t#如果gcc、make等依赖未安装会报错</div><div class=\"line\">make install\t#安装时间较长</div></pre></td></tr></table></figure></p>\n<p>安装完成之后验证：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node -v</div><div class=\"line\">v8.9.4</div></pre></td></tr></table></figure></p>\n<h3 id=\"安装Nginx并配置反向代理\"><a href=\"#安装Nginx并配置反向代理\" class=\"headerlink\" title=\"安装Nginx并配置反向代理\"></a>安装Nginx并配置反向代理</h3><p>Nginx在Ubuntu下的安装较为简单，直接通过apt源即可安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt update</div><div class=\"line\">sudo apt install nginx</div></pre></td></tr></table></figure>\n<p>启动Nginx：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service nginx start</div></pre></td></tr></table></figure></p>\n<p>在浏览器中输入你的服务器ip进行验证（不用加端口号），如果能看见Nginx的欢迎页面说明安装成功。</p>\n<p>编辑<code>/etc/nginx/nginx.conf</code>，配置反向代理：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">\tlisten       80; #监听端口，默认为http请求的80端口</div><div class=\"line\">    server_name  voidalex.one;\t#你的域名</div><div class=\"line\">    </div><div class=\"line\">    location / &#123;</div><div class=\"line\">        proxy_pass http://localhost:4000/;\t#代理转发，你的hexo服务器的地址</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>保存完毕，执行<code>service nginx reload</code>重启Nginx服务器。</p>\n<h2 id=\"配置DNS解析\"><a href=\"#配置DNS解析\" class=\"headerlink\" title=\"配置DNS解析\"></a>配置DNS解析</h2><p>在你购买的域名服务商的控制面板中，配置DNS解析，IP为你的服务器公网IP（不加端口）。设置完毕稍等一会（DNS服务器需要刷新缓存），访问你的域名即可看到Nginx的欢迎页面。</p>\n<h2 id=\"本地配置Hexo\"><a href=\"#本地配置Hexo\" class=\"headerlink\" title=\"本地配置Hexo\"></a>本地配置Hexo</h2><h3 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><p>在服务器运行Hexo需要依赖于<code>hexo-server</code>和<code>hexo-admin</code>。如果你在本地已经安装这两个插件，请跳过这一步。（当然你也可以直接copy你的hexo博客目录到服务器上安装这两个插件，不过在本地先安装方便调试）</p>\n<p>cd到你的博客根目录下，执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-server@0.3.1 --save</div><div class=\"line\">npm install hexo-admin@2.3.0 --save</div></pre></td></tr></table></figure></p>\n<p>安装完毕后，执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo s</div></pre></td></tr></table></figure></p>\n<p>打开浏览器，访问<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a> 即可预览博客，访问<a href=\"http://localhost:4000/admin\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/admin</a> 即可进入<code>hexo-admin</code>后台管理界面。</p>\n<h3 id=\"配置hexo-admin\"><a href=\"#配置hexo-admin\" class=\"headerlink\" title=\"配置hexo-admin\"></a>配置hexo-admin</h3><p>hexo-admin默认没有开启密码保护，需要自己手动开启。</p>\n<p>访问<a href=\"http://localhost:4000/admin\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/admin</a> 点击<code>Settings--Setup authentification here</code>进行密码设置：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/93762063.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>输入用户名、密码后，将生成的代码复制：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/98662173.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>然后打开博客根目录下的<code>_config.yml</code>，将复制的代码粘贴到末尾。</p>\n<p>重新启动hexo服务器，访问<a href=\"http://localhost:4000/admin\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/admin</a> 如果出现登录界面，则配置成功。</p>\n<h2 id=\"将Hexo博客迁移至服务器\"><a href=\"#将Hexo博客迁移至服务器\" class=\"headerlink\" title=\"将Hexo博客迁移至服务器\"></a>将Hexo博客迁移至服务器</h2><p>很简单，将你的整个博客目录打包，然后上传到服务器，然后解包。你在本地使用npm安装的hexo插件都在博客根目录下的<code>node_modules</code>目录下。如果你没有动这个目录，那么在服务器上解包之后就能直接用了。解包推荐使用<code>unzip</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">unzip blog.zip</div><div class=\"line\">cd blog</div><div class=\"line\">hexo s</div></pre></td></tr></table></figure>\n<p>如果一切正常，访问你的域名就可以看到博客了，访问域名/admin就能进入到后台界面。</p>\n<blockquote>\n<p>Tips：如果执行hexo相关命令报错的话，按照博客根目录下<code>package.json</code>中列出的插件名和版本重新按照一遍就好了。如：<code>npm install hexo@3.5.0 --save</code></p>\n</blockquote>\n<h2 id=\"善后工作\"><a href=\"#善后工作\" class=\"headerlink\" title=\"善后工作\"></a>善后工作</h2><p>实际上，到上一步已经成功的把Hexo部署在服务器上了。但是为了获得更好的体验还是需要再进行一些配置。</p>\n<h3 id=\"后台运行hexo\"><a href=\"#后台运行hexo\" class=\"headerlink\" title=\"后台运行hexo\"></a>后台运行hexo</h3><p>直接使用<code>hexo s</code>启动服务器，Ctrl+C或者shell关掉就结束进程了。可以使用<code>nohup</code>来后台运行hexo。在博客根目录下，执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nohup hexo s &amp;</div></pre></td></tr></table></figure>\n<p>这样hexo就会运行在后台，输出的日志会被记录在<code>nohup.out</code>中。</p>\n<h3 id=\"优化解析速度\"><a href=\"#优化解析速度\" class=\"headerlink\" title=\"优化解析速度\"></a>优化解析速度</h3><p>部署好了，但是加载速度仍然很慢。原因是每次访问的时候hexo都会动态的去加载<code>.md</code>文件，然后由Node.js渲染成html，再展示出来。看到hexo的官方文档中提了这么一句：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/65761270.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>重启服务器之后，果然加载快了很多很多。</p>\n<p>然而，这样启动服务器，你在后台编辑过的文章都不会被加载出来。需要你手动的执行<code>hexo g</code>命令，才能加载出来。</p>\n<p>强迫症是忍受不了这样的操作的，好在<code>hexo-admin</code>中提供了这样一个功能：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/5139675.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>点击按钮就能执行你的部署脚本。在博客根目录下的<code>_config.yml</code>中添加配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">admin:</div><div class=\"line\">\tdeployCommand: &apos;./hexo-deploy.sh&apos;</div></pre></td></tr></table></figure></p>\n<p>然后在博客根目录下创建<code>hexo-deploy.sh</code>，并编辑：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/usr/bin/env sh</div><div class=\"line\">hexo g</div></pre></td></tr></table></figure></p>\n<p>给<code>hexo-deploy.sh</code>授予权限：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod a+x hexo-deploy.sh</div></pre></td></tr></table></figure></p>\n<p>重启服务器，编辑博文后点击Deploy按钮就可以把文章渲染成html页面来访问了。</p>\n<h3 id=\"与GitHub-Page同步\"><a href=\"#与GitHub-Page同步\" class=\"headerlink\" title=\"与GitHub Page同步\"></a>与GitHub Page同步</h3><p>如果想在服务器上和原仓库同步的话，只需要配置Git，然后修改部署脚本就行了。Git的安装和配置不在赘述，要注意的是服务器上安装的Git不是用来配置Git服务器的，而是当做一个用户来提交代码的。配置完记得在你的GitHub中添加秘钥。</p>\n<p>配置完之后，只需要修改<code>hexo-deploy.sh</code>就可以了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/usr/bin/env sh</div><div class=\"line\">hexo g -d</div></pre></td></tr></table></figure></p>\n<p>然后重启服务器，以后每次点击deploy按钮时都会把渲染的html页面提交到GitHub仓库里。输出信息如下图：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/8761275.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/27412.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>如果看到这些信息，说明配置没有问题，代码已经提交成功了。</p>\n<p>验证一下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/52277650.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/51560676.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"安利一下\"><a href=\"#安利一下\" class=\"headerlink\" title=\"安利一下\"></a>安利一下</h2><p>安利几个好东西吧。</p>\n<p><a href=\"https://sg.godaddy.com/zh/\" target=\"_blank\" rel=\"noopener\">狗爹</a>，全球最大的域名服务商</p>\n<p><a href=\"https://www.vultr.com/?ref=7336080\" target=\"_blank\" rel=\"noopener\">vultr</a>，美帝的VPS提供商，按分钟计费。推荐每个月5刀的套餐，硅谷节点（千万不要选新加坡和日本节点，很容易被墙而且速度奇慢）</p>\n<p><a href=\"https://github.com/Moeditor/Moeditor\" target=\"_blank\" rel=\"noopener\">Moeditor</a>，十分简洁舒服的Markdown编辑器</p>\n<p><a href=\"https://github.com/yscoder/hexo-theme-indigo\" target=\"_blank\" rel=\"noopener\">indigo</a>，很好看的一个Hexo主题</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>笔者在过年期间买了域名和VPS，打算迁移博客到VPS上（GitHub Page访问速度实在是……你懂得）。由于平时使用的主力语言是Java，所以找了两个开源的Java博客系统<a href=\"https://github.com/b3log/solo\" target=\"_blank\" rel=\"noopener\">Solo</a>和<a href=\"https://github.com/otale/tale\" target=\"_blank\" rel=\"noopener\">Tale</a>，试用了之后发现都有不满意的地方，比如说：</p>\n<ul>\n<li>主题少</li>\n<li>有广告（虽然是开源的能理解，但是强迫症接受不了……）</li>\n<li>不支持MathJax渲染（虽然自己加上了，但还是有问题，强迫症同样无法接受……）</li>\n<li>……</li>\n</ul>\n<p>思来想去还是hexo好，遂决定把hexo部署在服务器上。搜了一下发现大家都是把VPS当做Git服务器在用，然后用Nginx去解析静态资源。这种方式本质上和托管在GitHub上没什么区别，无非就是解析速度快点而已。这样做除了加快解析速度外，并没有任何好处。写一篇博文还是要经历<code>创建文件--写博文--预览--生成静态资源--使用Git同步</code>这么一个过程。而且在更换电脑后必须配置<code>Node.js</code>、<code>Git</code>、<code>Hexo</code>等一大堆东西之后才能写，等于花VPS的钱，只起到了一个加速效果。</p>\n<p>好在<code>Hexo</code>还有<code>hexo-server</code>和<code>hexo-admin</code>这样的插件。之前并没有觉得<code>hexo-admin</code>这样的插件有什么用，但是在VPS上，它的价值体现出来了。于是，一个部署的思路诞生了：</p>\n<ul>\n<li>使用<code>hexo-server</code>作为hexo的服务器</li>\n<li>使用<code>hexo-admin</code>作为hexo的管理后台</li>\n<li>使用<code>Nginx</code>作为反向代理服务器</li>\n<li>使用<code>Git</code>与GitHub仓库同步（可选）</li>\n</ul>\n<p>这样的话，等于给Hexo博客多了一个后台。成功部署后在本地只需要一个浏览器就可以美滋滋的写博客了~</p>\n<p>阅读前方内容需要一定的基础，假设你已经在GitHub Page上成功的部署了你的博客，并且有一定的Linux基础知识。如果你还没有使用过Hexo，那么可以先看看<a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>和<a href=\"https://zhuanlan.zhihu.com/p/25471760\" target=\"_blank\" rel=\"noopener\">这篇教程</a>。</p>\n<h2 id=\"（题外话）域名和VPS\"><a href=\"#（题外话）域名和VPS\" class=\"headerlink\" title=\"（题外话）域名和VPS\"></a>（题外话）域名和VPS</h2><p>在国内购买服务器和域名需要备案。为了避免麻烦笔者选择了<a href=\"https://godaddy.com/\" target=\"_blank\" rel=\"noopener\">狗爹</a>和<a href=\"https://www.vultr.com/?ref=7336080\" target=\"_blank\" rel=\"noopener\">vultr</a>。VPS套餐选择的是每个月5刀的套餐，配置只有1核CUP和1GB内存（编译Node.js用了40分钟），但是已经足够。</p>\n<h2 id=\"服务器的环境配置\"><a href=\"#服务器的环境配置\" class=\"headerlink\" title=\"服务器的环境配置\"></a>服务器的环境配置</h2><p>服务器配置的所有操作均为在Ubuntu 16.04下的操作。</p>\n<h3 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h3><p>Hexo是在Node.js上构建的博客系统，通过Node.js将<code>.md</code>文件渲染为<code>.html</code>文件。所以，安装Node.js必不可少。</p>\n<p>安装Node.js的方法很多，笔者选择下载源码编译安装。注意，编译安装的时间长短视你的服务器配置而定，笔者的小水管上编译了40多分钟才玩。</p>\n<p>首先安装<code>gcc</code>、<code>g++</code>、<code>make</code>、<code>python</code>等编译解释环境：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt update #老版本Ubuntu请使用apt-get</div><div class=\"line\">sudo apt install gcc g++ make python</div></pre></td></tr></table></figure></p>\n<p>获取Node.js的源码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://nodejs.org/dist/latest-v8.x/node-v8.9.4.tar.gz</div><div class=\"line\">tar zxvf node-v8.9.4.tar.gz</div></pre></td></tr></table></figure></p>\n<p>开始安装：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd node-v8.9.4</div><div class=\"line\">./configure\t#如果gcc、make等依赖未安装会报错</div><div class=\"line\">make install\t#安装时间较长</div></pre></td></tr></table></figure></p>\n<p>安装完成之后验证：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node -v</div><div class=\"line\">v8.9.4</div></pre></td></tr></table></figure></p>\n<h3 id=\"安装Nginx并配置反向代理\"><a href=\"#安装Nginx并配置反向代理\" class=\"headerlink\" title=\"安装Nginx并配置反向代理\"></a>安装Nginx并配置反向代理</h3><p>Nginx在Ubuntu下的安装较为简单，直接通过apt源即可安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt update</div><div class=\"line\">sudo apt install nginx</div></pre></td></tr></table></figure>\n<p>启动Nginx：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service nginx start</div></pre></td></tr></table></figure></p>\n<p>在浏览器中输入你的服务器ip进行验证（不用加端口号），如果能看见Nginx的欢迎页面说明安装成功。</p>\n<p>编辑<code>/etc/nginx/nginx.conf</code>，配置反向代理：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">\tlisten       80; #监听端口，默认为http请求的80端口</div><div class=\"line\">    server_name  voidalex.one;\t#你的域名</div><div class=\"line\">    </div><div class=\"line\">    location / &#123;</div><div class=\"line\">        proxy_pass http://localhost:4000/;\t#代理转发，你的hexo服务器的地址</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>保存完毕，执行<code>service nginx reload</code>重启Nginx服务器。</p>\n<h2 id=\"配置DNS解析\"><a href=\"#配置DNS解析\" class=\"headerlink\" title=\"配置DNS解析\"></a>配置DNS解析</h2><p>在你购买的域名服务商的控制面板中，配置DNS解析，IP为你的服务器公网IP（不加端口）。设置完毕稍等一会（DNS服务器需要刷新缓存），访问你的域名即可看到Nginx的欢迎页面。</p>\n<h2 id=\"本地配置Hexo\"><a href=\"#本地配置Hexo\" class=\"headerlink\" title=\"本地配置Hexo\"></a>本地配置Hexo</h2><h3 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><p>在服务器运行Hexo需要依赖于<code>hexo-server</code>和<code>hexo-admin</code>。如果你在本地已经安装这两个插件，请跳过这一步。（当然你也可以直接copy你的hexo博客目录到服务器上安装这两个插件，不过在本地先安装方便调试）</p>\n<p>cd到你的博客根目录下，执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-server@0.3.1 --save</div><div class=\"line\">npm install hexo-admin@2.3.0 --save</div></pre></td></tr></table></figure></p>\n<p>安装完毕后，执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo s</div></pre></td></tr></table></figure></p>\n<p>打开浏览器，访问<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a> 即可预览博客，访问<a href=\"http://localhost:4000/admin\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/admin</a> 即可进入<code>hexo-admin</code>后台管理界面。</p>\n<h3 id=\"配置hexo-admin\"><a href=\"#配置hexo-admin\" class=\"headerlink\" title=\"配置hexo-admin\"></a>配置hexo-admin</h3><p>hexo-admin默认没有开启密码保护，需要自己手动开启。</p>\n<p>访问<a href=\"http://localhost:4000/admin\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/admin</a> 点击<code>Settings--Setup authentification here</code>进行密码设置：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/93762063.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>输入用户名、密码后，将生成的代码复制：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/98662173.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>然后打开博客根目录下的<code>_config.yml</code>，将复制的代码粘贴到末尾。</p>\n<p>重新启动hexo服务器，访问<a href=\"http://localhost:4000/admin\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/admin</a> 如果出现登录界面，则配置成功。</p>\n<h2 id=\"将Hexo博客迁移至服务器\"><a href=\"#将Hexo博客迁移至服务器\" class=\"headerlink\" title=\"将Hexo博客迁移至服务器\"></a>将Hexo博客迁移至服务器</h2><p>很简单，将你的整个博客目录打包，然后上传到服务器，然后解包。你在本地使用npm安装的hexo插件都在博客根目录下的<code>node_modules</code>目录下。如果你没有动这个目录，那么在服务器上解包之后就能直接用了。解包推荐使用<code>unzip</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">unzip blog.zip</div><div class=\"line\">cd blog</div><div class=\"line\">hexo s</div></pre></td></tr></table></figure>\n<p>如果一切正常，访问你的域名就可以看到博客了，访问域名/admin就能进入到后台界面。</p>\n<blockquote>\n<p>Tips：如果执行hexo相关命令报错的话，按照博客根目录下<code>package.json</code>中列出的插件名和版本重新按照一遍就好了。如：<code>npm install hexo@3.5.0 --save</code></p>\n</blockquote>\n<h2 id=\"善后工作\"><a href=\"#善后工作\" class=\"headerlink\" title=\"善后工作\"></a>善后工作</h2><p>实际上，到上一步已经成功的把Hexo部署在服务器上了。但是为了获得更好的体验还是需要再进行一些配置。</p>\n<h3 id=\"后台运行hexo\"><a href=\"#后台运行hexo\" class=\"headerlink\" title=\"后台运行hexo\"></a>后台运行hexo</h3><p>直接使用<code>hexo s</code>启动服务器，Ctrl+C或者shell关掉就结束进程了。可以使用<code>nohup</code>来后台运行hexo。在博客根目录下，执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nohup hexo s &amp;</div></pre></td></tr></table></figure>\n<p>这样hexo就会运行在后台，输出的日志会被记录在<code>nohup.out</code>中。</p>\n<h3 id=\"优化解析速度\"><a href=\"#优化解析速度\" class=\"headerlink\" title=\"优化解析速度\"></a>优化解析速度</h3><p>部署好了，但是加载速度仍然很慢。原因是每次访问的时候hexo都会动态的去加载<code>.md</code>文件，然后由Node.js渲染成html，再展示出来。看到hexo的官方文档中提了这么一句：<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/65761270.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure><br>重启服务器之后，果然加载快了很多很多。</p>\n<p>然而，这样启动服务器，你在后台编辑过的文章都不会被加载出来。需要你手动的执行<code>hexo g</code>命令，才能加载出来。</p>\n<p>强迫症是忍受不了这样的操作的，好在<code>hexo-admin</code>中提供了这样一个功能：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/5139675.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>点击按钮就能执行你的部署脚本。在博客根目录下的<code>_config.yml</code>中添加配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">admin:</div><div class=\"line\">\tdeployCommand: &apos;./hexo-deploy.sh&apos;</div></pre></td></tr></table></figure></p>\n<p>然后在博客根目录下创建<code>hexo-deploy.sh</code>，并编辑：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/usr/bin/env sh</div><div class=\"line\">hexo g</div></pre></td></tr></table></figure></p>\n<p>给<code>hexo-deploy.sh</code>授予权限：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod a+x hexo-deploy.sh</div></pre></td></tr></table></figure></p>\n<p>重启服务器，编辑博文后点击Deploy按钮就可以把文章渲染成html页面来访问了。</p>\n<h3 id=\"与GitHub-Page同步\"><a href=\"#与GitHub-Page同步\" class=\"headerlink\" title=\"与GitHub Page同步\"></a>与GitHub Page同步</h3><p>如果想在服务器上和原仓库同步的话，只需要配置Git，然后修改部署脚本就行了。Git的安装和配置不在赘述，要注意的是服务器上安装的Git不是用来配置Git服务器的，而是当做一个用户来提交代码的。配置完记得在你的GitHub中添加秘钥。</p>\n<p>配置完之后，只需要修改<code>hexo-deploy.sh</code>就可以了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/usr/bin/env sh</div><div class=\"line\">hexo g -d</div></pre></td></tr></table></figure></p>\n<p>然后重启服务器，以后每次点击deploy按钮时都会把渲染的html页面提交到GitHub仓库里。输出信息如下图：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/8761275.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/27412.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>如果看到这些信息，说明配置没有问题，代码已经提交成功了。</p>\n<p>验证一下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/52277650.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/51560676.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"安利一下\"><a href=\"#安利一下\" class=\"headerlink\" title=\"安利一下\"></a>安利一下</h2><p>安利几个好东西吧。</p>\n<p><a href=\"https://sg.godaddy.com/zh/\" target=\"_blank\" rel=\"noopener\">狗爹</a>，全球最大的域名服务商</p>\n<p><a href=\"https://www.vultr.com/?ref=7336080\" target=\"_blank\" rel=\"noopener\">vultr</a>，美帝的VPS提供商，按分钟计费。推荐每个月5刀的套餐，硅谷节点（千万不要选新加坡和日本节点，很容易被墙而且速度奇慢）</p>\n<p><a href=\"https://github.com/Moeditor/Moeditor\" target=\"_blank\" rel=\"noopener\">Moeditor</a>，十分简洁舒服的Markdown编辑器</p>\n<p><a href=\"https://github.com/yscoder/hexo-theme-indigo\" target=\"_blank\" rel=\"noopener\">indigo</a>，很好看的一个Hexo主题</p>\n"},{"title":"使用Docker打包和部署Spring Boot应用","date":"2017-11-04T03:46:13.000Z","_content":"> 在Ubuntu 16.04下使用Docker部署Spring Boot应用。\n> 这是voidAlex原创的第十一篇博文。\n<!-- more -->\n\n## Docker\n\n### Docker简介\n\n简单的来说，Docker是一种容器，属于操作系统层面的虚拟化技术，基于Linux内核对进程进行封装隔离。Docker从文件系统、网络通信到进程隔离等等，极大的简化了容器的创建与维护，使得Docker比传统的虚拟机技术更加轻便快捷。\n\n### 与虚拟机技术的比较\n\n传统虚拟机技术是虚拟出一套硬件，然后在其上运行一个完整的操作系统，在该系统上再运行所需要应用进程。而容器内的进程则直接运行在宿主的内核上，容器没有自己的内核，没有进行硬件虚拟。因此容器比传统的虚拟机更为轻便。\n\n![](http://osuro1ft2.bkt.clouddn.com//17-11-4/82954513.jpg)\n\n![](http://osuro1ft2.bkt.clouddn.com//17-11-4/18362650.jpg)\n\n### Docker的优势\n\n1. 更高效的利用系统资源\n2. 更快速的启动时间\n3. 一致的运行环境\n4. 持续交付和部署\n5. 更轻松的迁移\n6. 更轻松的维护和扩展\n\n## 准备工作\n\n首先安装Oracle JDK和Maven，在编译Spring Boot应用时会用到。\n\n```sh\nsudo apt update\n# 配置安装源\nsudo apt install python-software-properties\nsudo apt install software-properties-common\nsudo add-apt-repository ppa:webupd8team/java\n# 安装Oracle JDK\nsudo apt update\nsudo apt install oracle-java8-installer\n# 安装Maven\nsudo apt install maven\n```\n\n查看安装信息：\n\n```sh\njava -version\nmvn -v\n```\n\n确保JDK版本为8及以上，Maven版本为3及以上。\n\n## 安装和配置Docker\n\n### 配置国内安装源\n\n```sh\nsudo apt-get update\n\nsudo apt-get install apt-transport-https\nsudo apt-get install ca-certificates\nsudo apt-get install curl\nsudo apt-get install software-properties-common\n\ncurl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -\n\nsudo add-apt-repository \\\n    \"deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \\\n    $(lsb_release -cs) \\\n    stable\"\n```\n\n### 安装Docker CE\n\n```sh\nsudo apt-get update\nsudo apt-get install docker-ce\n```\n\n### 脚本自动安装\n\n可以使用Docker官方提供的脚本来简化安装流程：\n\n```sh\ncurl -fsSL get.docker.com -o get-docker.sh\nsudo sh get-docker.sh --mirror Aliyun\n```\n\n### 启动Docker\n\n```sh\nsudo systemctl enable docker\nsudo systemctl start docker\n# 建立Docker用户组\nsudo groupadd docker\n# 将当前用户加入到用户组\nsudo usermod -aG docker $USER\n```\n\n### 配置Docker远程访问\n\nDocker默认不会监听任何端口，因此只能在本地使用Docker。如果先在其他机器上操作Docker主机，就要让Docker守护进程监听一个端口。修改Docker服务配置文件，添加一个未被占用的端口后，重启Docker服务：\n\n```sh\nvi /etc/default/docker\n```\n\n添加：\n\n```sh\nDOCKER_OPTS=\"-H 0.0.0.0:6000\"\nDOCKER_OPTS=\"-H unix:///var/run/docker.sock -H 0.0.0.0:5555\"\n```\n\n重启Docker：\n\n```sh\nservice docker restart\n```\n\n## Spring Boot应用配置\n\n### 配置Maven依赖\n\n在`pom.xml`中，加入这些内容：\n\n```xml\n<properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n    <java.version>1.8</java.version>\n    <docker.image.prefix>jzfp</docker.image.prefix>\n</properties>\n\n<build>\n    <plugins>\n        <plugin>\n            <groupId>com.spotify</groupId>\n            <artifactId>docker-maven-plugin</artifactId>\n            <version>0.4.13</version>\n            <configuration>\n                <imageName>${docker.image.prefix}/${project.artifactId}</imageName>\n                <dockerHost>http://host:port</dockerHost>\n                <dockerDirectory>src/main/docker</dockerDirectory>\n                <resources>\n                    <resource>\n                        <targetPath>/</targetPath>\n                        <directory>${project.build.directory}</directory>\n                        <include>${project.build.finalName}.jar</include>\n                    </resource>\n                </resources>\n            </configuration>\n        </plugin>\n\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n        </plugin>\n    </plugins>\n</build>\n```\n\nSpotify的`docker-maven-plugin`插件是用于构建Maven的Docker镜像。`imageName`指定了镜像的名称，`dockerHost`指定了Docker主机的地址，`dockerDirectory`指定了Dockerfile文件的路径。\n\n### 配置Dockerfile\n\n在`src/main/docker`下创建`Dockerfile`，然后编辑：\n\n```\nFROM frolvlad/alpine-oraclejdk8\nVOLUME /tmp\nADD gsjzfp-0.0.1-SNAPSHOT.jar app.jar\nENV JAVA_OPTS=\"\"\nENTRYPOINT [ \"sh\", \"-c\", \"java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar /app.jar\" ]\n```\n\n其中，`FROM`指定了当前镜像集成的基镜像为`oraclejdk8`；`VOLUME`指定了临时文件目录为`/tmp`，该配置会在`/var/lib/docker`下创建一个临时文件并链接到容器的`/tmp`目录下；`ADD`将该应用的jar文件作为`app.jar`添加到容器里；`ENTRYPOINT`执行`app.jar`。\n\n## 打包运行\n\n### 编译并构建为Docker镜像\n\n将整个项目目录copy到Docker主机，cd到项目目录下，执行：\n\n```sh\nmvn clean package docker:build\n```\n\n### 运行\n\n```sh\ndocker run -p 8848:8848 -t jzfp/gsjzfp\n```\n\n如果程序运行正确，浏览器访问`http://host:8848`就能看到Spring Boot应用的主页了。","source":"_posts/使用Docker打包和部署Spring-Boot应用.md","raw":"---\ntitle: 使用Docker打包和部署Spring Boot应用\ndate: 2017-11-04 11:46:13\ntags: ['Docker','Spring Boot']\n---\n> 在Ubuntu 16.04下使用Docker部署Spring Boot应用。\n> 这是voidAlex原创的第十一篇博文。\n<!-- more -->\n\n## Docker\n\n### Docker简介\n\n简单的来说，Docker是一种容器，属于操作系统层面的虚拟化技术，基于Linux内核对进程进行封装隔离。Docker从文件系统、网络通信到进程隔离等等，极大的简化了容器的创建与维护，使得Docker比传统的虚拟机技术更加轻便快捷。\n\n### 与虚拟机技术的比较\n\n传统虚拟机技术是虚拟出一套硬件，然后在其上运行一个完整的操作系统，在该系统上再运行所需要应用进程。而容器内的进程则直接运行在宿主的内核上，容器没有自己的内核，没有进行硬件虚拟。因此容器比传统的虚拟机更为轻便。\n\n![](http://osuro1ft2.bkt.clouddn.com//17-11-4/82954513.jpg)\n\n![](http://osuro1ft2.bkt.clouddn.com//17-11-4/18362650.jpg)\n\n### Docker的优势\n\n1. 更高效的利用系统资源\n2. 更快速的启动时间\n3. 一致的运行环境\n4. 持续交付和部署\n5. 更轻松的迁移\n6. 更轻松的维护和扩展\n\n## 准备工作\n\n首先安装Oracle JDK和Maven，在编译Spring Boot应用时会用到。\n\n```sh\nsudo apt update\n# 配置安装源\nsudo apt install python-software-properties\nsudo apt install software-properties-common\nsudo add-apt-repository ppa:webupd8team/java\n# 安装Oracle JDK\nsudo apt update\nsudo apt install oracle-java8-installer\n# 安装Maven\nsudo apt install maven\n```\n\n查看安装信息：\n\n```sh\njava -version\nmvn -v\n```\n\n确保JDK版本为8及以上，Maven版本为3及以上。\n\n## 安装和配置Docker\n\n### 配置国内安装源\n\n```sh\nsudo apt-get update\n\nsudo apt-get install apt-transport-https\nsudo apt-get install ca-certificates\nsudo apt-get install curl\nsudo apt-get install software-properties-common\n\ncurl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -\n\nsudo add-apt-repository \\\n    \"deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \\\n    $(lsb_release -cs) \\\n    stable\"\n```\n\n### 安装Docker CE\n\n```sh\nsudo apt-get update\nsudo apt-get install docker-ce\n```\n\n### 脚本自动安装\n\n可以使用Docker官方提供的脚本来简化安装流程：\n\n```sh\ncurl -fsSL get.docker.com -o get-docker.sh\nsudo sh get-docker.sh --mirror Aliyun\n```\n\n### 启动Docker\n\n```sh\nsudo systemctl enable docker\nsudo systemctl start docker\n# 建立Docker用户组\nsudo groupadd docker\n# 将当前用户加入到用户组\nsudo usermod -aG docker $USER\n```\n\n### 配置Docker远程访问\n\nDocker默认不会监听任何端口，因此只能在本地使用Docker。如果先在其他机器上操作Docker主机，就要让Docker守护进程监听一个端口。修改Docker服务配置文件，添加一个未被占用的端口后，重启Docker服务：\n\n```sh\nvi /etc/default/docker\n```\n\n添加：\n\n```sh\nDOCKER_OPTS=\"-H 0.0.0.0:6000\"\nDOCKER_OPTS=\"-H unix:///var/run/docker.sock -H 0.0.0.0:5555\"\n```\n\n重启Docker：\n\n```sh\nservice docker restart\n```\n\n## Spring Boot应用配置\n\n### 配置Maven依赖\n\n在`pom.xml`中，加入这些内容：\n\n```xml\n<properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n    <java.version>1.8</java.version>\n    <docker.image.prefix>jzfp</docker.image.prefix>\n</properties>\n\n<build>\n    <plugins>\n        <plugin>\n            <groupId>com.spotify</groupId>\n            <artifactId>docker-maven-plugin</artifactId>\n            <version>0.4.13</version>\n            <configuration>\n                <imageName>${docker.image.prefix}/${project.artifactId}</imageName>\n                <dockerHost>http://host:port</dockerHost>\n                <dockerDirectory>src/main/docker</dockerDirectory>\n                <resources>\n                    <resource>\n                        <targetPath>/</targetPath>\n                        <directory>${project.build.directory}</directory>\n                        <include>${project.build.finalName}.jar</include>\n                    </resource>\n                </resources>\n            </configuration>\n        </plugin>\n\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n        </plugin>\n    </plugins>\n</build>\n```\n\nSpotify的`docker-maven-plugin`插件是用于构建Maven的Docker镜像。`imageName`指定了镜像的名称，`dockerHost`指定了Docker主机的地址，`dockerDirectory`指定了Dockerfile文件的路径。\n\n### 配置Dockerfile\n\n在`src/main/docker`下创建`Dockerfile`，然后编辑：\n\n```\nFROM frolvlad/alpine-oraclejdk8\nVOLUME /tmp\nADD gsjzfp-0.0.1-SNAPSHOT.jar app.jar\nENV JAVA_OPTS=\"\"\nENTRYPOINT [ \"sh\", \"-c\", \"java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar /app.jar\" ]\n```\n\n其中，`FROM`指定了当前镜像集成的基镜像为`oraclejdk8`；`VOLUME`指定了临时文件目录为`/tmp`，该配置会在`/var/lib/docker`下创建一个临时文件并链接到容器的`/tmp`目录下；`ADD`将该应用的jar文件作为`app.jar`添加到容器里；`ENTRYPOINT`执行`app.jar`。\n\n## 打包运行\n\n### 编译并构建为Docker镜像\n\n将整个项目目录copy到Docker主机，cd到项目目录下，执行：\n\n```sh\nmvn clean package docker:build\n```\n\n### 运行\n\n```sh\ndocker run -p 8848:8848 -t jzfp/gsjzfp\n```\n\n如果程序运行正确，浏览器访问`http://host:8848`就能看到Spring Boot应用的主页了。","slug":"使用Docker打包和部署Spring-Boot应用","published":1,"updated":"2017-11-10T09:29:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhhhvn3i000l27xuq2i0osgn","content":"<blockquote>\n<p>在Ubuntu 16.04下使用Docker部署Spring Boot应用。<br>这是voidAlex原创的第十一篇博文。<br><a id=\"more\"></a></p>\n</blockquote>\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><h3 id=\"Docker简介\"><a href=\"#Docker简介\" class=\"headerlink\" title=\"Docker简介\"></a>Docker简介</h3><p>简单的来说，Docker是一种容器，属于操作系统层面的虚拟化技术，基于Linux内核对进程进行封装隔离。Docker从文件系统、网络通信到进程隔离等等，极大的简化了容器的创建与维护，使得Docker比传统的虚拟机技术更加轻便快捷。</p>\n<h3 id=\"与虚拟机技术的比较\"><a href=\"#与虚拟机技术的比较\" class=\"headerlink\" title=\"与虚拟机技术的比较\"></a>与虚拟机技术的比较</h3><p>传统虚拟机技术是虚拟出一套硬件，然后在其上运行一个完整的操作系统，在该系统上再运行所需要应用进程。而容器内的进程则直接运行在宿主的内核上，容器没有自己的内核，没有进行硬件虚拟。因此容器比传统的虚拟机更为轻便。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://osuro1ft2.bkt.clouddn.com//17-11-4/82954513.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://osuro1ft2.bkt.clouddn.com//17-11-4/18362650.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"Docker的优势\"><a href=\"#Docker的优势\" class=\"headerlink\" title=\"Docker的优势\"></a>Docker的优势</h3><ol>\n<li>更高效的利用系统资源</li>\n<li>更快速的启动时间</li>\n<li>一致的运行环境</li>\n<li>持续交付和部署</li>\n<li>更轻松的迁移</li>\n<li>更轻松的维护和扩展</li>\n</ol>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>首先安装Oracle JDK和Maven，在编译Spring Boot应用时会用到。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt update</div><div class=\"line\"><span class=\"comment\"># 配置安装源</span></div><div class=\"line\">sudo apt install python-software-properties</div><div class=\"line\">sudo apt install software-properties-common</div><div class=\"line\">sudo add-apt-repository ppa:webupd8team/java</div><div class=\"line\"><span class=\"comment\"># 安装Oracle JDK</span></div><div class=\"line\">sudo apt update</div><div class=\"line\">sudo apt install oracle-java8-installer</div><div class=\"line\"><span class=\"comment\"># 安装Maven</span></div><div class=\"line\">sudo apt install maven</div></pre></td></tr></table></figure>\n<p>查看安装信息：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">java -version</div><div class=\"line\">mvn -v</div></pre></td></tr></table></figure>\n<p>确保JDK版本为8及以上，Maven版本为3及以上。</p>\n<h2 id=\"安装和配置Docker\"><a href=\"#安装和配置Docker\" class=\"headerlink\" title=\"安装和配置Docker\"></a>安装和配置Docker</h2><h3 id=\"配置国内安装源\"><a href=\"#配置国内安装源\" class=\"headerlink\" title=\"配置国内安装源\"></a>配置国内安装源</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update</div><div class=\"line\"></div><div class=\"line\">sudo apt-get install apt-transport-https</div><div class=\"line\">sudo apt-get install ca-certificates</div><div class=\"line\">sudo apt-get install curl</div><div class=\"line\">sudo apt-get install software-properties-common</div><div class=\"line\"></div><div class=\"line\">curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</div><div class=\"line\"></div><div class=\"line\">sudo add-apt-repository \\</div><div class=\"line\">    <span class=\"string\">\"deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \\</span></div><div class=\"line\">    <span class=\"variable\">$(lsb_release -cs)</span> \\</div><div class=\"line\">    stable\"</div></pre></td></tr></table></figure>\n<h3 id=\"安装Docker-CE\"><a href=\"#安装Docker-CE\" class=\"headerlink\" title=\"安装Docker CE\"></a>安装Docker CE</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install docker-ce</div></pre></td></tr></table></figure>\n<h3 id=\"脚本自动安装\"><a href=\"#脚本自动安装\" class=\"headerlink\" title=\"脚本自动安装\"></a>脚本自动安装</h3><p>可以使用Docker官方提供的脚本来简化安装流程：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -fsSL get.docker.com -o get-docker.sh</div><div class=\"line\">sudo sh get-docker.sh --mirror Aliyun</div></pre></td></tr></table></figure>\n<h3 id=\"启动Docker\"><a href=\"#启动Docker\" class=\"headerlink\" title=\"启动Docker\"></a>启动Docker</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> docker</div><div class=\"line\">sudo systemctl start docker</div><div class=\"line\"><span class=\"comment\"># 建立Docker用户组</span></div><div class=\"line\">sudo groupadd docker</div><div class=\"line\"><span class=\"comment\"># 将当前用户加入到用户组</span></div><div class=\"line\">sudo usermod <span class=\"_\">-a</span>G docker <span class=\"variable\">$USER</span></div></pre></td></tr></table></figure>\n<h3 id=\"配置Docker远程访问\"><a href=\"#配置Docker远程访问\" class=\"headerlink\" title=\"配置Docker远程访问\"></a>配置Docker远程访问</h3><p>Docker默认不会监听任何端口，因此只能在本地使用Docker。如果先在其他机器上操作Docker主机，就要让Docker守护进程监听一个端口。修改Docker服务配置文件，添加一个未被占用的端口后，重启Docker服务：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /etc/default/docker</div></pre></td></tr></table></figure>\n<p>添加：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">DOCKER_OPTS=<span class=\"string\">\"-H 0.0.0.0:6000\"</span></div><div class=\"line\">DOCKER_OPTS=<span class=\"string\">\"-H unix:///var/run/docker.sock -H 0.0.0.0:5555\"</span></div></pre></td></tr></table></figure>\n<p>重启Docker：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service docker restart</div></pre></td></tr></table></figure>\n<h2 id=\"Spring-Boot应用配置\"><a href=\"#Spring-Boot应用配置\" class=\"headerlink\" title=\"Spring Boot应用配置\"></a>Spring Boot应用配置</h2><h3 id=\"配置Maven依赖\"><a href=\"#配置Maven依赖\" class=\"headerlink\" title=\"配置Maven依赖\"></a>配置Maven依赖</h3><p>在<code>pom.xml</code>中，加入这些内容：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">docker.image.prefix</span>&gt;</span>jzfp<span class=\"tag\">&lt;/<span class=\"name\">docker.image.prefix</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.spotify<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>docker-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.4.13<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">imageName</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;<span class=\"tag\">&lt;/<span class=\"name\">imageName</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">dockerHost</span>&gt;</span>http://host:port<span class=\"tag\">&lt;/<span class=\"name\">dockerHost</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">dockerDirectory</span>&gt;</span>src/main/docker<span class=\"tag\">&lt;/<span class=\"name\">dockerDirectory</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">targetPath</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">targetPath</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Spotify的<code>docker-maven-plugin</code>插件是用于构建Maven的Docker镜像。<code>imageName</code>指定了镜像的名称，<code>dockerHost</code>指定了Docker主机的地址，<code>dockerDirectory</code>指定了Dockerfile文件的路径。</p>\n<h3 id=\"配置Dockerfile\"><a href=\"#配置Dockerfile\" class=\"headerlink\" title=\"配置Dockerfile\"></a>配置Dockerfile</h3><p>在<code>src/main/docker</code>下创建<code>Dockerfile</code>，然后编辑：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">FROM frolvlad/alpine-oraclejdk8</div><div class=\"line\">VOLUME /tmp</div><div class=\"line\">ADD gsjzfp-0.0.1-SNAPSHOT.jar app.jar</div><div class=\"line\">ENV JAVA_OPTS=&quot;&quot;</div><div class=\"line\">ENTRYPOINT [ &quot;sh&quot;, &quot;-c&quot;, &quot;java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar /app.jar&quot; ]</div></pre></td></tr></table></figure>\n<p>其中，<code>FROM</code>指定了当前镜像集成的基镜像为<code>oraclejdk8</code>；<code>VOLUME</code>指定了临时文件目录为<code>/tmp</code>，该配置会在<code>/var/lib/docker</code>下创建一个临时文件并链接到容器的<code>/tmp</code>目录下；<code>ADD</code>将该应用的jar文件作为<code>app.jar</code>添加到容器里；<code>ENTRYPOINT</code>执行<code>app.jar</code>。</p>\n<h2 id=\"打包运行\"><a href=\"#打包运行\" class=\"headerlink\" title=\"打包运行\"></a>打包运行</h2><h3 id=\"编译并构建为Docker镜像\"><a href=\"#编译并构建为Docker镜像\" class=\"headerlink\" title=\"编译并构建为Docker镜像\"></a>编译并构建为Docker镜像</h3><p>将整个项目目录copy到Docker主机，cd到项目目录下，执行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mvn clean package docker:build</div></pre></td></tr></table></figure>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -p 8848:8848 -t jzfp/gsjzfp</div></pre></td></tr></table></figure>\n<p>如果程序运行正确，浏览器访问<code>http://host:8848</code>就能看到Spring Boot应用的主页了。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>在Ubuntu 16.04下使用Docker部署Spring Boot应用。<br>这是voidAlex原创的第十一篇博文。<br>","more":"</p>\n</blockquote>\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><h3 id=\"Docker简介\"><a href=\"#Docker简介\" class=\"headerlink\" title=\"Docker简介\"></a>Docker简介</h3><p>简单的来说，Docker是一种容器，属于操作系统层面的虚拟化技术，基于Linux内核对进程进行封装隔离。Docker从文件系统、网络通信到进程隔离等等，极大的简化了容器的创建与维护，使得Docker比传统的虚拟机技术更加轻便快捷。</p>\n<h3 id=\"与虚拟机技术的比较\"><a href=\"#与虚拟机技术的比较\" class=\"headerlink\" title=\"与虚拟机技术的比较\"></a>与虚拟机技术的比较</h3><p>传统虚拟机技术是虚拟出一套硬件，然后在其上运行一个完整的操作系统，在该系统上再运行所需要应用进程。而容器内的进程则直接运行在宿主的内核上，容器没有自己的内核，没有进行硬件虚拟。因此容器比传统的虚拟机更为轻便。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://osuro1ft2.bkt.clouddn.com//17-11-4/82954513.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://osuro1ft2.bkt.clouddn.com//17-11-4/18362650.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"Docker的优势\"><a href=\"#Docker的优势\" class=\"headerlink\" title=\"Docker的优势\"></a>Docker的优势</h3><ol>\n<li>更高效的利用系统资源</li>\n<li>更快速的启动时间</li>\n<li>一致的运行环境</li>\n<li>持续交付和部署</li>\n<li>更轻松的迁移</li>\n<li>更轻松的维护和扩展</li>\n</ol>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>首先安装Oracle JDK和Maven，在编译Spring Boot应用时会用到。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt update</div><div class=\"line\"><span class=\"comment\"># 配置安装源</span></div><div class=\"line\">sudo apt install python-software-properties</div><div class=\"line\">sudo apt install software-properties-common</div><div class=\"line\">sudo add-apt-repository ppa:webupd8team/java</div><div class=\"line\"><span class=\"comment\"># 安装Oracle JDK</span></div><div class=\"line\">sudo apt update</div><div class=\"line\">sudo apt install oracle-java8-installer</div><div class=\"line\"><span class=\"comment\"># 安装Maven</span></div><div class=\"line\">sudo apt install maven</div></pre></td></tr></table></figure>\n<p>查看安装信息：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">java -version</div><div class=\"line\">mvn -v</div></pre></td></tr></table></figure>\n<p>确保JDK版本为8及以上，Maven版本为3及以上。</p>\n<h2 id=\"安装和配置Docker\"><a href=\"#安装和配置Docker\" class=\"headerlink\" title=\"安装和配置Docker\"></a>安装和配置Docker</h2><h3 id=\"配置国内安装源\"><a href=\"#配置国内安装源\" class=\"headerlink\" title=\"配置国内安装源\"></a>配置国内安装源</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update</div><div class=\"line\"></div><div class=\"line\">sudo apt-get install apt-transport-https</div><div class=\"line\">sudo apt-get install ca-certificates</div><div class=\"line\">sudo apt-get install curl</div><div class=\"line\">sudo apt-get install software-properties-common</div><div class=\"line\"></div><div class=\"line\">curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</div><div class=\"line\"></div><div class=\"line\">sudo add-apt-repository \\</div><div class=\"line\">    <span class=\"string\">\"deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \\</span></div><div class=\"line\">    <span class=\"variable\">$(lsb_release -cs)</span> \\</div><div class=\"line\">    stable\"</div></pre></td></tr></table></figure>\n<h3 id=\"安装Docker-CE\"><a href=\"#安装Docker-CE\" class=\"headerlink\" title=\"安装Docker CE\"></a>安装Docker CE</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install docker-ce</div></pre></td></tr></table></figure>\n<h3 id=\"脚本自动安装\"><a href=\"#脚本自动安装\" class=\"headerlink\" title=\"脚本自动安装\"></a>脚本自动安装</h3><p>可以使用Docker官方提供的脚本来简化安装流程：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -fsSL get.docker.com -o get-docker.sh</div><div class=\"line\">sudo sh get-docker.sh --mirror Aliyun</div></pre></td></tr></table></figure>\n<h3 id=\"启动Docker\"><a href=\"#启动Docker\" class=\"headerlink\" title=\"启动Docker\"></a>启动Docker</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> docker</div><div class=\"line\">sudo systemctl start docker</div><div class=\"line\"><span class=\"comment\"># 建立Docker用户组</span></div><div class=\"line\">sudo groupadd docker</div><div class=\"line\"><span class=\"comment\"># 将当前用户加入到用户组</span></div><div class=\"line\">sudo usermod <span class=\"_\">-a</span>G docker <span class=\"variable\">$USER</span></div></pre></td></tr></table></figure>\n<h3 id=\"配置Docker远程访问\"><a href=\"#配置Docker远程访问\" class=\"headerlink\" title=\"配置Docker远程访问\"></a>配置Docker远程访问</h3><p>Docker默认不会监听任何端口，因此只能在本地使用Docker。如果先在其他机器上操作Docker主机，就要让Docker守护进程监听一个端口。修改Docker服务配置文件，添加一个未被占用的端口后，重启Docker服务：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /etc/default/docker</div></pre></td></tr></table></figure>\n<p>添加：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">DOCKER_OPTS=<span class=\"string\">\"-H 0.0.0.0:6000\"</span></div><div class=\"line\">DOCKER_OPTS=<span class=\"string\">\"-H unix:///var/run/docker.sock -H 0.0.0.0:5555\"</span></div></pre></td></tr></table></figure>\n<p>重启Docker：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service docker restart</div></pre></td></tr></table></figure>\n<h2 id=\"Spring-Boot应用配置\"><a href=\"#Spring-Boot应用配置\" class=\"headerlink\" title=\"Spring Boot应用配置\"></a>Spring Boot应用配置</h2><h3 id=\"配置Maven依赖\"><a href=\"#配置Maven依赖\" class=\"headerlink\" title=\"配置Maven依赖\"></a>配置Maven依赖</h3><p>在<code>pom.xml</code>中，加入这些内容：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">docker.image.prefix</span>&gt;</span>jzfp<span class=\"tag\">&lt;/<span class=\"name\">docker.image.prefix</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.spotify<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>docker-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.4.13<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">imageName</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;<span class=\"tag\">&lt;/<span class=\"name\">imageName</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">dockerHost</span>&gt;</span>http://host:port<span class=\"tag\">&lt;/<span class=\"name\">dockerHost</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">dockerDirectory</span>&gt;</span>src/main/docker<span class=\"tag\">&lt;/<span class=\"name\">dockerDirectory</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">targetPath</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">targetPath</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Spotify的<code>docker-maven-plugin</code>插件是用于构建Maven的Docker镜像。<code>imageName</code>指定了镜像的名称，<code>dockerHost</code>指定了Docker主机的地址，<code>dockerDirectory</code>指定了Dockerfile文件的路径。</p>\n<h3 id=\"配置Dockerfile\"><a href=\"#配置Dockerfile\" class=\"headerlink\" title=\"配置Dockerfile\"></a>配置Dockerfile</h3><p>在<code>src/main/docker</code>下创建<code>Dockerfile</code>，然后编辑：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">FROM frolvlad/alpine-oraclejdk8</div><div class=\"line\">VOLUME /tmp</div><div class=\"line\">ADD gsjzfp-0.0.1-SNAPSHOT.jar app.jar</div><div class=\"line\">ENV JAVA_OPTS=&quot;&quot;</div><div class=\"line\">ENTRYPOINT [ &quot;sh&quot;, &quot;-c&quot;, &quot;java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar /app.jar&quot; ]</div></pre></td></tr></table></figure>\n<p>其中，<code>FROM</code>指定了当前镜像集成的基镜像为<code>oraclejdk8</code>；<code>VOLUME</code>指定了临时文件目录为<code>/tmp</code>，该配置会在<code>/var/lib/docker</code>下创建一个临时文件并链接到容器的<code>/tmp</code>目录下；<code>ADD</code>将该应用的jar文件作为<code>app.jar</code>添加到容器里；<code>ENTRYPOINT</code>执行<code>app.jar</code>。</p>\n<h2 id=\"打包运行\"><a href=\"#打包运行\" class=\"headerlink\" title=\"打包运行\"></a>打包运行</h2><h3 id=\"编译并构建为Docker镜像\"><a href=\"#编译并构建为Docker镜像\" class=\"headerlink\" title=\"编译并构建为Docker镜像\"></a>编译并构建为Docker镜像</h3><p>将整个项目目录copy到Docker主机，cd到项目目录下，执行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mvn clean package docker:build</div></pre></td></tr></table></figure>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -p 8848:8848 -t jzfp/gsjzfp</div></pre></td></tr></table></figure>\n<p>如果程序运行正确，浏览器访问<code>http://host:8848</code>就能看到Spring Boot应用的主页了。</p>"},{"title":"使用PageRank算法计算球队排名","date":"2017-07-08T03:27:00.000Z","mathjax":true,"_content":"> 这是voidAlex原创的第一篇博文。\n> 源码在[我的GitHub](https://github.com/voidAlex/pagerank)\n<!-- more -->\n\n## PageRank算法\nPageRank算法，又叫佩奇排名。是由Google公司创始人拉里佩奇（Larry Page）发明的一种由搜索引擎根据网页之间相互的超链接计算的技术。\n\n对于某个互联网网页A来说，该网页PageRank的计算基于以下两个基本假设：\n>* 数量假设：在Web图模型中，如果一个页面节点接收到的其他网页指向的入链数量越多，那么这个页面越重要；\n>* 质量假设：指向页面A的入链质量不同，质量高的页面会通过链接向其他页面传递更多的权重。所以越是质量高的页面指向页面A，则页面A越重要。\n\n根据上面的两个假设，PageRank的计算步骤如下：\n1. 网页通过链接关系构建起Web图，每个页面设置相同的PageRank值，通过若干轮的计算，会得到每个页面所获得的最终PageRank值。随着每一轮的计算进行，网页当前的PageRank值会不断得到更新。\n\n2. 在一轮中更新页面PageRank得分的计算方法：在一轮更新页面PageRank得分的计算中，每个页面将其当前的PageRank值平均分配到本页面包含的出链上，这样每个链接即获得了相应的权值。而每个页面将所有指向本页面的入链所传入的权值求和，即可得到新的PageRank得分。当每个页面都获得了更新后的PageRank值，就完成了一轮PageRank计算。\n\n## 使用PageRank算法计算球队实力\n将PageRank算法应用到球队中后，球队的PageRank分数的计算依然基于两个假设：\n>* 数量假设：比赛中A在其他球队身上取得的分数（战胜或战平）越多，那么这个球队实力越强；\n>* 质量假设：取得积分的对手实力强弱不同，实力强的球队会提供更多的权重。所以A取得战胜或战平的球队实力越强，则球队A越强。\n\n利用以上两个假设，PageRank算法刚开始赋予每个球队相同的重要性得分（PR值），通过迭代递归计算来更新每个球队节点的PageRank得分，直到得分稳定为止。\n\n假设一个由4支球队组成的足球联赛：A，B，C和D。给定所有球队一个相同的初始PageRank值PR。在第一轮计算中，对于球队A，假设它在对阵B、C、D球队取得的积分分别为P1、P2、P3，那么它的PageRank值将被更新为：\n\n$$ PR(A) = (PR(B)∙P1+PR(C)∙P2+PR(D)∙P3)/3 $$\n\n同样的，B、C、D队的PageRank值也将通过此方法更新。在进行若干次迭代后，所有球队的PageRank值将会趋向于稳定，也就是收敛状态。这时所有球队的PageRank值就是它们的最终得分。\n\n## 意义\n灵感来源于虎扑的一个[帖子](https://bbs.hupu.com/18776888.html)，里面提到了球队的硬仗能力，或者球队上限。原贴的作者计算了上赛季的英超的PageRank分，自己看了之后比较感兴趣，就实现了一遍。原贴作者提到：\n> *一支球队的联赛排名是其硬仗水平与虐菜能力的共同作用，然而由联赛排名决定的欧战资格，尤其是淘汰赛阶段，更看中的却是球队的硬仗水平，即话题区里所谓的球队上限。于是问题来了，是否存在有些球队主要靠虐菜能力进入欧战区，然后面对他国豪强一泻千里，给本国联赛拖了后腿的情况？我试着用PageRank算法来验证这一猜想。*\n\n> *一支球队的PageRank评分都是从其他球队手中抢来的，要知道一支球队的PageRank评分就必须先知道其他球队的评分，这是鸡生蛋蛋生鸡的难题。PageRank算法的做法是给每个队一个初始分数，比如1，然后通过交战记录互相贡献分数，这样每支队的分数都会有变化；再拿这些分数重复一遍计算，每支队的分数又会变化；重复N次后，变化会趋于0（有数学证明），这时的分数就是最终结果。*\n\n一支球队的所谓硬仗能力或球队上限是比较抽（xuan）象（xue）的东西，PageRank算法可以比较好的量化它。\n\n本文中计算了本赛季（2016-2017赛季）英超、西甲、NBA各个球队的PageRank值。数据来源于[虎扑](https://soccer.hupu.com/table/)。\n\n## 核心代码\n\n核心代码有两部分，PageRank算法和爬虫。\n\n### PageRank算法\n用PageRank算法计算球队PageRank值比较简单。就是通过大量的交手记录来更新PageRank值。计算方法在第二部分已经说明。\n\n用爬虫爬取的球队信息和比赛记录存放在文件中。球队信息以JSON的形式存放，比赛结果以文本的形式存放，一行表示一条比赛记录。类似于：\n> 莱加内斯 2-4 皇马\n\n这样的格式。\n\n首先构造TeamItem类来存放球队信息，该类有两个字段：name和pagerank。\n\n```Java\npackage com.pagerank.core;\n\n/**\n * 球队类\n * Created by 王麟东 on 2017/7/8 0008.\n */\npublic class TeamItem {\n    private String name;\n    private double pagerank;\n\n    public TeamItem(){\n        this.pagerank = 1;\n    }\n\n\n    public String getName() {\n        return name;\n    }\n\n\n    public double getPagerank() {\n        return pagerank;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public void setPagerank(double pagerank) {\n        this.pagerank = pagerank;\n    }\n}\n```\n\n然后构造MatchResult类来存放比赛结果。在MatchResult类中，有获取比赛结果的方法getWeight。根据比赛结果，返回对应的权重。\n\n```Java\npackage com.pagerank.core;\n\n/**\n * 比赛结果类\n * Created by 王麟东 on 2017/7/8 0008.\n */\npublic class MatchResult {\n    private String teamA;\n    private String teamB;\n    private int scoreA;\n    private int scoreB;\n\n    public MatchResult(String line) {\n        String temp[] = line.split(\"-\");\n\n        this.teamA = temp[0].split(\" \")[0];\n        this.scoreA = Integer.parseInt(temp[0].split(\" \")[1]);\n\n        this.teamB = temp[1].split(\" \")[1];\n        this.scoreB = Integer.parseInt(temp[1].split(\" \")[0]);\n    }\n\n    /**\n     * 获得权重（比赛结果）\n     * @param team 球队名\n     * @return 该球队在本条比赛记录中的比赛结果，胜3平1负0，若本条比赛记录中没有这个球队，返回-1\n     */\n\n    public int getWeight(String team){\n        int weight = -1;\n        if (team.equals(this.teamA)){\n            if (this.scoreA == this.scoreB){\n                weight = 1;\n            }else if (this.scoreA > this.scoreB){\n                weight = 3;\n            }else if (this.scoreA < this.scoreB){\n                weight = 0;\n            }\n        }else if (team.equals(this.teamB)){\n            if (this.scoreB == this.scoreA){\n                weight = 1;\n            }else if (this.scoreB > this.scoreA){\n                weight = 3;\n            }else if (this.scoreB < this.scoreA){\n                weight = 0;\n            }\n        }\n\n        return weight;\n    }\n\n    /**\n     * 在获得比赛权重不为-1的情况下，获得对手球队名\n     * @param team 球队名\n     * @return 本条比赛记录中的对手球队名\n     */\n\n    public String getOtherTeam(String team){\n        String otherTeam = this.teamA;\n\n        if (team.equals(this.teamA)){\n            otherTeam = this.teamB;\n        }\n\n        return otherTeam;\n    }\n}\n```\n然后是PageRank类。在PageRank类中，构造方法首先将球队信息和比赛结果读取到内存中，并且给每个球队赋初始PageRank值1。\n\n```Java\npackage com.pagerank.core;\n\nimport com.google.gson.Gson;\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonObject;\n\nimport java.io.*;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by 王麟东 on 2017/7/8 0008.\n */\npublic class PageRank {\n    private Map<String, TeamItem> teamMap;\n    private List<MatchResult> matchResultList;\n    private String teamInfopath;\n    private String matchResultPath;\n    private int max;\n\n    public PageRank(String teamInfopath, String matchResultPath, int max){\n        this.teamInfopath = teamInfopath;\n        this.matchResultPath = matchResultPath;\n        this.max = max;\n        init();\n    }\n\n    /**\n     * 初始化，将球队信息和比赛结果读取到内存\n     */\n\n    private void init(){\n        try {\n            BufferedReader teamReader = new BufferedReader(new FileReader(new File(this.teamInfopath)));\n            Gson gson = new Gson();\n            JsonArray jsonArray = gson.fromJson(teamReader.readLine(), JsonArray.class);\n            teamReader.close();\n\n            this.teamMap = new HashMap<String, TeamItem>();\n            for (JsonElement jsonElement : jsonArray){\n                TeamItem teamItem = new TeamItem();\n                teamItem.setName(jsonElement.getAsJsonObject().get(\"team\").getAsString());\n                this.teamMap.put(teamItem.getName(), teamItem);\n            }\n\n            BufferedReader matchReader = new BufferedReader(new FileReader(new File(this.matchResultPath)));\n            String line = \"\";\n\n            this.matchResultList = new ArrayList<MatchResult>();\n            while ((line = matchReader.readLine()) != null){\n                MatchResult matchResult = new MatchResult(line);\n                this.matchResultList.add(matchResult);\n            }\n            matchReader.close();\n        }catch (IOException e){\n            System.out.println(\"读取失败\");\n            System.exit(1);\n        }\n\n    }\n\n    public Map<String, TeamItem> getTeamMap() {\n        return teamMap;\n    }\n\n    public int getMax() {\n        return max;\n    }\n}\n```\n\n初始化之后，开始递归的计算每个球队的PageRank值：\n\n```Java\n    /**\n     * PageRank算法迭代器\n     * @param teamMaps 球队信息\n     * @param max 迭代次数\n     */\n\n    public void Iteration(Map<String, TeamItem> teamMaps, int max){\n        Map<String, TeamItem> tmp = new HashMap<String, TeamItem>();\n\n        for (TeamItem teamItem : teamMaps.values()){\n            TeamItem tmpTeam = new TeamItem();\n            tmpTeam.setName(teamItem.getName());\n            double pagerank = 0;\n            int count = 0;\n\n            for (MatchResult matchResult : this.matchResultList){\n                int weight = matchResult.getWeight(teamItem.getName());\n                if (weight != -1){\n                    double pr = teamMaps.get(matchResult.getOtherTeam(teamItem.getName())).getPagerank();\n                    pagerank += (weight * pr);\n                    count ++;\n                }\n            }\n\n            tmpTeam.setPagerank(pagerank / count);\n            tmp.put(tmpTeam.getName(), tmpTeam);\n        }\n        max --;\n        this.teamMap = tmp;\n        if (max > 0){\n            Iteration(this.teamMap, max);\n        }\n    }\n```\n\n使用爬取的数据测试：\n```Java\nString team = \"nba_team_list.json\";\nString match = \"nba_result_list\";\nint max = 20;\n\nPageRank pageRank = new PageRank(team, match, max);\npageRank.Iteration(pageRank.getTeamMap(), pageRank.getMax());\npageRank.wirteToFile();\npageRank.print();\n```\n\n由于数据量不大，迭代10-20次已经能够达到收敛状态。\n\n### 爬虫\n数据全部来源于虎扑，但是虎扑已经更新到了新赛季（2017-2018赛季）的数据，原来的爬虫失效，所以就不贴出来了。爬取的数据放在我的github。\n\n## 结果\n废话不多说，直接上结果。表格中的变化值为相比较原排名的变化程度。\n### NBA\n数据为2016-2017赛季常规赛的全部数据。\n\n东部联盟\n\n|球队 |PageRank |排名 |变化值 |\n|----|----|----|----|\n|凯尔特人 |1.9366 |1 |0 |\n|猛龙 |1.8867 |2 |+1 |\n|骑士 |1.8766 |3 |-1 |\n|奇才 |1.7852 |4 |0 |\n|老鹰 |1.6612 |5 |0 |\n|公牛 |1.5974 |6 |+2 |\n|热火 |1.5771 |7 |+2 |\n|雄鹿 |1.5465 |8 |-2 |\n|步行者 |1.5442 |9 |-2 |\n|活塞 |1.3974 |10 |0 |\n|黄蜂 |1.2995 |11 |0 |\n|尼克斯 |1.1173 |12 |0 |\n|魔术 |1.0865 |13 |0 |\n|76人 |1.0001 |14 |0 |\n|篮网 |0.6985 |15 |0 |\n\n西部联盟\n\n|球队 |PageRank |排名 |变化值 |\n|----|----|----|----|\n|勇士 |2.5695 |1 |0 |\n|马刺 |2.3791 |2 |0 |\n|火箭 |2.0306 |3 |0 |\n|快船 |1.9787 |4 |0 |\n|爵士 |1.8741 |5 |0 |\n|雷霆 |1.7872 |6 |0 |\n|灰熊 |1.7141 |7 |0 |\n|开拓者 |1.5253 |8 |0 |\n|掘金 |1.4822 |9 |0 |\n|小牛 |1.2437 |10 |+1 |\n|鹈鹕 |1.2392 |11 |-1 |\n|国王 |1.1998 |12 |0 |\n|森林狼 |1.1934 |13 |0 |\n|湖人 |1.0070 |14 |0 |\n|太阳 |0.9156 |15 |0 |\n\n### 西甲\n数据为2016-2017赛季西甲联赛的全部数据。\n\n|球队 |PageRank |排名 |变化值 |\n|----|----|----|----|\n|巴萨 |2.3323 |1 |+1 |\n|皇马 |2.2955 |2 |-1 |\n|马竞 |1.8039 |3 |0 |\n|塞维利亚 |1.7653 |4 |0 |\n|比利亚雷亚尔 |1.6181 |5 |0 |\n|毕尔巴鄂 |1.4819 |6 |+1 |\n|阿拉维斯 |1.4205 |7 |+2 |\n|皇家社会 |1.3817 |8 |-1 |\n|埃瓦尔 |1.2816 |9 |+1 |\n|西班牙人 |1.2111 |10 |-2 |\n|马拉加 |1.1516 |11 |0 |\n|瓦伦西亚 |1.1018 |12 |0 |\n|塞尔塔 |0.9893 |13 |0 |\n|拉斯帕尔马斯 |0.9532 |14 |0 |\n|拉科鲁尼亚 |0.8892 |15 |+1 |\n|皇家贝蒂斯 |0.8815 |16 |-1 |\n|莱加内斯 |0.7624 |17 |0 |\n|希洪竞技 |0.6651 |18 |0 |\n|格拉纳达 |0.5086 |19 |+1 |\n|奥萨苏纳 |0.4939 |20 |-1 |\n\n### 英超\n数据为2016-2017赛季英超联赛的全部数据。\n\n|球队 |PageRank |排名 |变化值 |\n|----|----|----|----|\n|切尔西 |5.3667 |1 |0 |\n|热刺 |4.9594 |2 |0 |\n|利物浦 |4.7785 |3 |+1 |\n|曼城 |4.2577 |4 |-1 |\n|阿森纳 |4.1272 |5 |0 |\n|曼联 |3.9255 |6 |0 |\n|埃弗顿 |3.3458 |7 |0 |\n|伯恩茅斯 |2.6264 |8 |+1 |\n|莱斯特 |2.5141 |9 |+3 |\n|南安普顿 |2.4357 |10 |-2 |\n|西汉姆联 |2.4165 |11 |0 |\n|水晶宫 |2.4097 |12 |+2 |\n|西布朗 |2.3787 |13 |+3 |\n|斯旺西 |2.3119 |14 |+1 |\n|伯恩利 |2.2320 |15 |+1 |\n|沃特福德 |2.2083 |16 |+1 |\n|斯托克城 |2.1396 |17 |-4 |\n|胡尔城 |1.9424 |18 |0 |\n|米德尔斯堡 |1.4478 |19 |0 |\n|桑德兰 |1.3255 |20 |0 |\n\n至于结果能看出来什么信息，大家就见仁见智了。","source":"_posts/使用PageRank算法计算球队排名.md","raw":"---\ntitle: 使用PageRank算法计算球队排名\ndate: 2017-07-08 11:27:00\ntags: ['数据挖掘','足球','算法','Java']\nmathjax: true\n---\n> 这是voidAlex原创的第一篇博文。\n> 源码在[我的GitHub](https://github.com/voidAlex/pagerank)\n<!-- more -->\n\n## PageRank算法\nPageRank算法，又叫佩奇排名。是由Google公司创始人拉里佩奇（Larry Page）发明的一种由搜索引擎根据网页之间相互的超链接计算的技术。\n\n对于某个互联网网页A来说，该网页PageRank的计算基于以下两个基本假设：\n>* 数量假设：在Web图模型中，如果一个页面节点接收到的其他网页指向的入链数量越多，那么这个页面越重要；\n>* 质量假设：指向页面A的入链质量不同，质量高的页面会通过链接向其他页面传递更多的权重。所以越是质量高的页面指向页面A，则页面A越重要。\n\n根据上面的两个假设，PageRank的计算步骤如下：\n1. 网页通过链接关系构建起Web图，每个页面设置相同的PageRank值，通过若干轮的计算，会得到每个页面所获得的最终PageRank值。随着每一轮的计算进行，网页当前的PageRank值会不断得到更新。\n\n2. 在一轮中更新页面PageRank得分的计算方法：在一轮更新页面PageRank得分的计算中，每个页面将其当前的PageRank值平均分配到本页面包含的出链上，这样每个链接即获得了相应的权值。而每个页面将所有指向本页面的入链所传入的权值求和，即可得到新的PageRank得分。当每个页面都获得了更新后的PageRank值，就完成了一轮PageRank计算。\n\n## 使用PageRank算法计算球队实力\n将PageRank算法应用到球队中后，球队的PageRank分数的计算依然基于两个假设：\n>* 数量假设：比赛中A在其他球队身上取得的分数（战胜或战平）越多，那么这个球队实力越强；\n>* 质量假设：取得积分的对手实力强弱不同，实力强的球队会提供更多的权重。所以A取得战胜或战平的球队实力越强，则球队A越强。\n\n利用以上两个假设，PageRank算法刚开始赋予每个球队相同的重要性得分（PR值），通过迭代递归计算来更新每个球队节点的PageRank得分，直到得分稳定为止。\n\n假设一个由4支球队组成的足球联赛：A，B，C和D。给定所有球队一个相同的初始PageRank值PR。在第一轮计算中，对于球队A，假设它在对阵B、C、D球队取得的积分分别为P1、P2、P3，那么它的PageRank值将被更新为：\n\n$$ PR(A) = (PR(B)∙P1+PR(C)∙P2+PR(D)∙P3)/3 $$\n\n同样的，B、C、D队的PageRank值也将通过此方法更新。在进行若干次迭代后，所有球队的PageRank值将会趋向于稳定，也就是收敛状态。这时所有球队的PageRank值就是它们的最终得分。\n\n## 意义\n灵感来源于虎扑的一个[帖子](https://bbs.hupu.com/18776888.html)，里面提到了球队的硬仗能力，或者球队上限。原贴的作者计算了上赛季的英超的PageRank分，自己看了之后比较感兴趣，就实现了一遍。原贴作者提到：\n> *一支球队的联赛排名是其硬仗水平与虐菜能力的共同作用，然而由联赛排名决定的欧战资格，尤其是淘汰赛阶段，更看中的却是球队的硬仗水平，即话题区里所谓的球队上限。于是问题来了，是否存在有些球队主要靠虐菜能力进入欧战区，然后面对他国豪强一泻千里，给本国联赛拖了后腿的情况？我试着用PageRank算法来验证这一猜想。*\n\n> *一支球队的PageRank评分都是从其他球队手中抢来的，要知道一支球队的PageRank评分就必须先知道其他球队的评分，这是鸡生蛋蛋生鸡的难题。PageRank算法的做法是给每个队一个初始分数，比如1，然后通过交战记录互相贡献分数，这样每支队的分数都会有变化；再拿这些分数重复一遍计算，每支队的分数又会变化；重复N次后，变化会趋于0（有数学证明），这时的分数就是最终结果。*\n\n一支球队的所谓硬仗能力或球队上限是比较抽（xuan）象（xue）的东西，PageRank算法可以比较好的量化它。\n\n本文中计算了本赛季（2016-2017赛季）英超、西甲、NBA各个球队的PageRank值。数据来源于[虎扑](https://soccer.hupu.com/table/)。\n\n## 核心代码\n\n核心代码有两部分，PageRank算法和爬虫。\n\n### PageRank算法\n用PageRank算法计算球队PageRank值比较简单。就是通过大量的交手记录来更新PageRank值。计算方法在第二部分已经说明。\n\n用爬虫爬取的球队信息和比赛记录存放在文件中。球队信息以JSON的形式存放，比赛结果以文本的形式存放，一行表示一条比赛记录。类似于：\n> 莱加内斯 2-4 皇马\n\n这样的格式。\n\n首先构造TeamItem类来存放球队信息，该类有两个字段：name和pagerank。\n\n```Java\npackage com.pagerank.core;\n\n/**\n * 球队类\n * Created by 王麟东 on 2017/7/8 0008.\n */\npublic class TeamItem {\n    private String name;\n    private double pagerank;\n\n    public TeamItem(){\n        this.pagerank = 1;\n    }\n\n\n    public String getName() {\n        return name;\n    }\n\n\n    public double getPagerank() {\n        return pagerank;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public void setPagerank(double pagerank) {\n        this.pagerank = pagerank;\n    }\n}\n```\n\n然后构造MatchResult类来存放比赛结果。在MatchResult类中，有获取比赛结果的方法getWeight。根据比赛结果，返回对应的权重。\n\n```Java\npackage com.pagerank.core;\n\n/**\n * 比赛结果类\n * Created by 王麟东 on 2017/7/8 0008.\n */\npublic class MatchResult {\n    private String teamA;\n    private String teamB;\n    private int scoreA;\n    private int scoreB;\n\n    public MatchResult(String line) {\n        String temp[] = line.split(\"-\");\n\n        this.teamA = temp[0].split(\" \")[0];\n        this.scoreA = Integer.parseInt(temp[0].split(\" \")[1]);\n\n        this.teamB = temp[1].split(\" \")[1];\n        this.scoreB = Integer.parseInt(temp[1].split(\" \")[0]);\n    }\n\n    /**\n     * 获得权重（比赛结果）\n     * @param team 球队名\n     * @return 该球队在本条比赛记录中的比赛结果，胜3平1负0，若本条比赛记录中没有这个球队，返回-1\n     */\n\n    public int getWeight(String team){\n        int weight = -1;\n        if (team.equals(this.teamA)){\n            if (this.scoreA == this.scoreB){\n                weight = 1;\n            }else if (this.scoreA > this.scoreB){\n                weight = 3;\n            }else if (this.scoreA < this.scoreB){\n                weight = 0;\n            }\n        }else if (team.equals(this.teamB)){\n            if (this.scoreB == this.scoreA){\n                weight = 1;\n            }else if (this.scoreB > this.scoreA){\n                weight = 3;\n            }else if (this.scoreB < this.scoreA){\n                weight = 0;\n            }\n        }\n\n        return weight;\n    }\n\n    /**\n     * 在获得比赛权重不为-1的情况下，获得对手球队名\n     * @param team 球队名\n     * @return 本条比赛记录中的对手球队名\n     */\n\n    public String getOtherTeam(String team){\n        String otherTeam = this.teamA;\n\n        if (team.equals(this.teamA)){\n            otherTeam = this.teamB;\n        }\n\n        return otherTeam;\n    }\n}\n```\n然后是PageRank类。在PageRank类中，构造方法首先将球队信息和比赛结果读取到内存中，并且给每个球队赋初始PageRank值1。\n\n```Java\npackage com.pagerank.core;\n\nimport com.google.gson.Gson;\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonObject;\n\nimport java.io.*;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by 王麟东 on 2017/7/8 0008.\n */\npublic class PageRank {\n    private Map<String, TeamItem> teamMap;\n    private List<MatchResult> matchResultList;\n    private String teamInfopath;\n    private String matchResultPath;\n    private int max;\n\n    public PageRank(String teamInfopath, String matchResultPath, int max){\n        this.teamInfopath = teamInfopath;\n        this.matchResultPath = matchResultPath;\n        this.max = max;\n        init();\n    }\n\n    /**\n     * 初始化，将球队信息和比赛结果读取到内存\n     */\n\n    private void init(){\n        try {\n            BufferedReader teamReader = new BufferedReader(new FileReader(new File(this.teamInfopath)));\n            Gson gson = new Gson();\n            JsonArray jsonArray = gson.fromJson(teamReader.readLine(), JsonArray.class);\n            teamReader.close();\n\n            this.teamMap = new HashMap<String, TeamItem>();\n            for (JsonElement jsonElement : jsonArray){\n                TeamItem teamItem = new TeamItem();\n                teamItem.setName(jsonElement.getAsJsonObject().get(\"team\").getAsString());\n                this.teamMap.put(teamItem.getName(), teamItem);\n            }\n\n            BufferedReader matchReader = new BufferedReader(new FileReader(new File(this.matchResultPath)));\n            String line = \"\";\n\n            this.matchResultList = new ArrayList<MatchResult>();\n            while ((line = matchReader.readLine()) != null){\n                MatchResult matchResult = new MatchResult(line);\n                this.matchResultList.add(matchResult);\n            }\n            matchReader.close();\n        }catch (IOException e){\n            System.out.println(\"读取失败\");\n            System.exit(1);\n        }\n\n    }\n\n    public Map<String, TeamItem> getTeamMap() {\n        return teamMap;\n    }\n\n    public int getMax() {\n        return max;\n    }\n}\n```\n\n初始化之后，开始递归的计算每个球队的PageRank值：\n\n```Java\n    /**\n     * PageRank算法迭代器\n     * @param teamMaps 球队信息\n     * @param max 迭代次数\n     */\n\n    public void Iteration(Map<String, TeamItem> teamMaps, int max){\n        Map<String, TeamItem> tmp = new HashMap<String, TeamItem>();\n\n        for (TeamItem teamItem : teamMaps.values()){\n            TeamItem tmpTeam = new TeamItem();\n            tmpTeam.setName(teamItem.getName());\n            double pagerank = 0;\n            int count = 0;\n\n            for (MatchResult matchResult : this.matchResultList){\n                int weight = matchResult.getWeight(teamItem.getName());\n                if (weight != -1){\n                    double pr = teamMaps.get(matchResult.getOtherTeam(teamItem.getName())).getPagerank();\n                    pagerank += (weight * pr);\n                    count ++;\n                }\n            }\n\n            tmpTeam.setPagerank(pagerank / count);\n            tmp.put(tmpTeam.getName(), tmpTeam);\n        }\n        max --;\n        this.teamMap = tmp;\n        if (max > 0){\n            Iteration(this.teamMap, max);\n        }\n    }\n```\n\n使用爬取的数据测试：\n```Java\nString team = \"nba_team_list.json\";\nString match = \"nba_result_list\";\nint max = 20;\n\nPageRank pageRank = new PageRank(team, match, max);\npageRank.Iteration(pageRank.getTeamMap(), pageRank.getMax());\npageRank.wirteToFile();\npageRank.print();\n```\n\n由于数据量不大，迭代10-20次已经能够达到收敛状态。\n\n### 爬虫\n数据全部来源于虎扑，但是虎扑已经更新到了新赛季（2017-2018赛季）的数据，原来的爬虫失效，所以就不贴出来了。爬取的数据放在我的github。\n\n## 结果\n废话不多说，直接上结果。表格中的变化值为相比较原排名的变化程度。\n### NBA\n数据为2016-2017赛季常规赛的全部数据。\n\n东部联盟\n\n|球队 |PageRank |排名 |变化值 |\n|----|----|----|----|\n|凯尔特人 |1.9366 |1 |0 |\n|猛龙 |1.8867 |2 |+1 |\n|骑士 |1.8766 |3 |-1 |\n|奇才 |1.7852 |4 |0 |\n|老鹰 |1.6612 |5 |0 |\n|公牛 |1.5974 |6 |+2 |\n|热火 |1.5771 |7 |+2 |\n|雄鹿 |1.5465 |8 |-2 |\n|步行者 |1.5442 |9 |-2 |\n|活塞 |1.3974 |10 |0 |\n|黄蜂 |1.2995 |11 |0 |\n|尼克斯 |1.1173 |12 |0 |\n|魔术 |1.0865 |13 |0 |\n|76人 |1.0001 |14 |0 |\n|篮网 |0.6985 |15 |0 |\n\n西部联盟\n\n|球队 |PageRank |排名 |变化值 |\n|----|----|----|----|\n|勇士 |2.5695 |1 |0 |\n|马刺 |2.3791 |2 |0 |\n|火箭 |2.0306 |3 |0 |\n|快船 |1.9787 |4 |0 |\n|爵士 |1.8741 |5 |0 |\n|雷霆 |1.7872 |6 |0 |\n|灰熊 |1.7141 |7 |0 |\n|开拓者 |1.5253 |8 |0 |\n|掘金 |1.4822 |9 |0 |\n|小牛 |1.2437 |10 |+1 |\n|鹈鹕 |1.2392 |11 |-1 |\n|国王 |1.1998 |12 |0 |\n|森林狼 |1.1934 |13 |0 |\n|湖人 |1.0070 |14 |0 |\n|太阳 |0.9156 |15 |0 |\n\n### 西甲\n数据为2016-2017赛季西甲联赛的全部数据。\n\n|球队 |PageRank |排名 |变化值 |\n|----|----|----|----|\n|巴萨 |2.3323 |1 |+1 |\n|皇马 |2.2955 |2 |-1 |\n|马竞 |1.8039 |3 |0 |\n|塞维利亚 |1.7653 |4 |0 |\n|比利亚雷亚尔 |1.6181 |5 |0 |\n|毕尔巴鄂 |1.4819 |6 |+1 |\n|阿拉维斯 |1.4205 |7 |+2 |\n|皇家社会 |1.3817 |8 |-1 |\n|埃瓦尔 |1.2816 |9 |+1 |\n|西班牙人 |1.2111 |10 |-2 |\n|马拉加 |1.1516 |11 |0 |\n|瓦伦西亚 |1.1018 |12 |0 |\n|塞尔塔 |0.9893 |13 |0 |\n|拉斯帕尔马斯 |0.9532 |14 |0 |\n|拉科鲁尼亚 |0.8892 |15 |+1 |\n|皇家贝蒂斯 |0.8815 |16 |-1 |\n|莱加内斯 |0.7624 |17 |0 |\n|希洪竞技 |0.6651 |18 |0 |\n|格拉纳达 |0.5086 |19 |+1 |\n|奥萨苏纳 |0.4939 |20 |-1 |\n\n### 英超\n数据为2016-2017赛季英超联赛的全部数据。\n\n|球队 |PageRank |排名 |变化值 |\n|----|----|----|----|\n|切尔西 |5.3667 |1 |0 |\n|热刺 |4.9594 |2 |0 |\n|利物浦 |4.7785 |3 |+1 |\n|曼城 |4.2577 |4 |-1 |\n|阿森纳 |4.1272 |5 |0 |\n|曼联 |3.9255 |6 |0 |\n|埃弗顿 |3.3458 |7 |0 |\n|伯恩茅斯 |2.6264 |8 |+1 |\n|莱斯特 |2.5141 |9 |+3 |\n|南安普顿 |2.4357 |10 |-2 |\n|西汉姆联 |2.4165 |11 |0 |\n|水晶宫 |2.4097 |12 |+2 |\n|西布朗 |2.3787 |13 |+3 |\n|斯旺西 |2.3119 |14 |+1 |\n|伯恩利 |2.2320 |15 |+1 |\n|沃特福德 |2.2083 |16 |+1 |\n|斯托克城 |2.1396 |17 |-4 |\n|胡尔城 |1.9424 |18 |0 |\n|米德尔斯堡 |1.4478 |19 |0 |\n|桑德兰 |1.3255 |20 |0 |\n\n至于结果能看出来什么信息，大家就见仁见智了。","slug":"使用PageRank算法计算球队排名","published":1,"updated":"2017-07-14T01:38:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhhhvn3k000n27xuktxlgngh","content":"<blockquote>\n<p>这是voidAlex原创的第一篇博文。<br>源码在<a href=\"https://github.com/voidAlex/pagerank\" target=\"_blank\" rel=\"noopener\">我的GitHub</a><br><a id=\"more\"></a></p>\n</blockquote>\n<h2 id=\"PageRank算法\"><a href=\"#PageRank算法\" class=\"headerlink\" title=\"PageRank算法\"></a>PageRank算法</h2><p>PageRank算法，又叫佩奇排名。是由Google公司创始人拉里佩奇（Larry Page）发明的一种由搜索引擎根据网页之间相互的超链接计算的技术。</p>\n<p>对于某个互联网网页A来说，该网页PageRank的计算基于以下两个基本假设：</p>\n<blockquote>\n<ul>\n<li>数量假设：在Web图模型中，如果一个页面节点接收到的其他网页指向的入链数量越多，那么这个页面越重要；</li>\n<li>质量假设：指向页面A的入链质量不同，质量高的页面会通过链接向其他页面传递更多的权重。所以越是质量高的页面指向页面A，则页面A越重要。</li>\n</ul>\n</blockquote>\n<p>根据上面的两个假设，PageRank的计算步骤如下：</p>\n<ol>\n<li><p>网页通过链接关系构建起Web图，每个页面设置相同的PageRank值，通过若干轮的计算，会得到每个页面所获得的最终PageRank值。随着每一轮的计算进行，网页当前的PageRank值会不断得到更新。</p>\n</li>\n<li><p>在一轮中更新页面PageRank得分的计算方法：在一轮更新页面PageRank得分的计算中，每个页面将其当前的PageRank值平均分配到本页面包含的出链上，这样每个链接即获得了相应的权值。而每个页面将所有指向本页面的入链所传入的权值求和，即可得到新的PageRank得分。当每个页面都获得了更新后的PageRank值，就完成了一轮PageRank计算。</p>\n</li>\n</ol>\n<h2 id=\"使用PageRank算法计算球队实力\"><a href=\"#使用PageRank算法计算球队实力\" class=\"headerlink\" title=\"使用PageRank算法计算球队实力\"></a>使用PageRank算法计算球队实力</h2><p>将PageRank算法应用到球队中后，球队的PageRank分数的计算依然基于两个假设：</p>\n<blockquote>\n<ul>\n<li>数量假设：比赛中A在其他球队身上取得的分数（战胜或战平）越多，那么这个球队实力越强；</li>\n<li>质量假设：取得积分的对手实力强弱不同，实力强的球队会提供更多的权重。所以A取得战胜或战平的球队实力越强，则球队A越强。</li>\n</ul>\n</blockquote>\n<p>利用以上两个假设，PageRank算法刚开始赋予每个球队相同的重要性得分（PR值），通过迭代递归计算来更新每个球队节点的PageRank得分，直到得分稳定为止。</p>\n<p>假设一个由4支球队组成的足球联赛：A，B，C和D。给定所有球队一个相同的初始PageRank值PR。在第一轮计算中，对于球队A，假设它在对阵B、C、D球队取得的积分分别为P1、P2、P3，那么它的PageRank值将被更新为：</p>\n<p>$$ PR(A) = (PR(B)∙P1+PR(C)∙P2+PR(D)∙P3)/3 $$</p>\n<p>同样的，B、C、D队的PageRank值也将通过此方法更新。在进行若干次迭代后，所有球队的PageRank值将会趋向于稳定，也就是收敛状态。这时所有球队的PageRank值就是它们的最终得分。</p>\n<h2 id=\"意义\"><a href=\"#意义\" class=\"headerlink\" title=\"意义\"></a>意义</h2><p>灵感来源于虎扑的一个<a href=\"https://bbs.hupu.com/18776888.html\" target=\"_blank\" rel=\"noopener\">帖子</a>，里面提到了球队的硬仗能力，或者球队上限。原贴的作者计算了上赛季的英超的PageRank分，自己看了之后比较感兴趣，就实现了一遍。原贴作者提到：</p>\n<blockquote>\n<p><em>一支球队的联赛排名是其硬仗水平与虐菜能力的共同作用，然而由联赛排名决定的欧战资格，尤其是淘汰赛阶段，更看中的却是球队的硬仗水平，即话题区里所谓的球队上限。于是问题来了，是否存在有些球队主要靠虐菜能力进入欧战区，然后面对他国豪强一泻千里，给本国联赛拖了后腿的情况？我试着用PageRank算法来验证这一猜想。</em></p>\n</blockquote>\n<blockquote>\n<p><em>一支球队的PageRank评分都是从其他球队手中抢来的，要知道一支球队的PageRank评分就必须先知道其他球队的评分，这是鸡生蛋蛋生鸡的难题。PageRank算法的做法是给每个队一个初始分数，比如1，然后通过交战记录互相贡献分数，这样每支队的分数都会有变化；再拿这些分数重复一遍计算，每支队的分数又会变化；重复N次后，变化会趋于0（有数学证明），这时的分数就是最终结果。</em></p>\n</blockquote>\n<p>一支球队的所谓硬仗能力或球队上限是比较抽（xuan）象（xue）的东西，PageRank算法可以比较好的量化它。</p>\n<p>本文中计算了本赛季（2016-2017赛季）英超、西甲、NBA各个球队的PageRank值。数据来源于<a href=\"https://soccer.hupu.com/table/\" target=\"_blank\" rel=\"noopener\">虎扑</a>。</p>\n<h2 id=\"核心代码\"><a href=\"#核心代码\" class=\"headerlink\" title=\"核心代码\"></a>核心代码</h2><p>核心代码有两部分，PageRank算法和爬虫。</p>\n<h3 id=\"PageRank算法-1\"><a href=\"#PageRank算法-1\" class=\"headerlink\" title=\"PageRank算法\"></a>PageRank算法</h3><p>用PageRank算法计算球队PageRank值比较简单。就是通过大量的交手记录来更新PageRank值。计算方法在第二部分已经说明。</p>\n<p>用爬虫爬取的球队信息和比赛记录存放在文件中。球队信息以JSON的形式存放，比赛结果以文本的形式存放，一行表示一条比赛记录。类似于：</p>\n<blockquote>\n<p>莱加内斯 2-4 皇马</p>\n</blockquote>\n<p>这样的格式。</p>\n<p>首先构造TeamItem类来存放球队信息，该类有两个字段：name和pagerank。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.pagerank.core;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 球队类</div><div class=\"line\"> * Created by 王麟东 on 2017/7/8 0008.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TeamItem</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> pagerank;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TeamItem</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.pagerank = <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getPagerank</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> pagerank;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPagerank</span><span class=\"params\">(<span class=\"keyword\">double</span> pagerank)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.pagerank = pagerank;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后构造MatchResult类来存放比赛结果。在MatchResult类中，有获取比赛结果的方法getWeight。根据比赛结果，返回对应的权重。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.pagerank.core;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 比赛结果类</div><div class=\"line\"> * Created by 王麟东 on 2017/7/8 0008.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MatchResult</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String teamA;</div><div class=\"line\">    <span class=\"keyword\">private</span> String teamB;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> scoreA;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> scoreB;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MatchResult</span><span class=\"params\">(String line)</span> </span>&#123;</div><div class=\"line\">        String temp[] = line.split(<span class=\"string\">\"-\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.teamA = temp[<span class=\"number\">0</span>].split(<span class=\"string\">\" \"</span>)[<span class=\"number\">0</span>];</div><div class=\"line\">        <span class=\"keyword\">this</span>.scoreA = Integer.parseInt(temp[<span class=\"number\">0</span>].split(<span class=\"string\">\" \"</span>)[<span class=\"number\">1</span>]);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.teamB = temp[<span class=\"number\">1</span>].split(<span class=\"string\">\" \"</span>)[<span class=\"number\">1</span>];</div><div class=\"line\">        <span class=\"keyword\">this</span>.scoreB = Integer.parseInt(temp[<span class=\"number\">1</span>].split(<span class=\"string\">\" \"</span>)[<span class=\"number\">0</span>]);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 获得权重（比赛结果）</div><div class=\"line\">     * <span class=\"doctag\">@param</span> team 球队名</div><div class=\"line\">     * <span class=\"doctag\">@return</span> 该球队在本条比赛记录中的比赛结果，胜3平1负0，若本条比赛记录中没有这个球队，返回-1</div><div class=\"line\">     */</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getWeight</span><span class=\"params\">(String team)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> weight = -<span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (team.equals(<span class=\"keyword\">this</span>.teamA))&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.scoreA == <span class=\"keyword\">this</span>.scoreB)&#123;</div><div class=\"line\">                weight = <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.scoreA &gt; <span class=\"keyword\">this</span>.scoreB)&#123;</div><div class=\"line\">                weight = <span class=\"number\">3</span>;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.scoreA &lt; <span class=\"keyword\">this</span>.scoreB)&#123;</div><div class=\"line\">                weight = <span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (team.equals(<span class=\"keyword\">this</span>.teamB))&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.scoreB == <span class=\"keyword\">this</span>.scoreA)&#123;</div><div class=\"line\">                weight = <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.scoreB &gt; <span class=\"keyword\">this</span>.scoreA)&#123;</div><div class=\"line\">                weight = <span class=\"number\">3</span>;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.scoreB &lt; <span class=\"keyword\">this</span>.scoreA)&#123;</div><div class=\"line\">                weight = <span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> weight;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 在获得比赛权重不为-1的情况下，获得对手球队名</div><div class=\"line\">     * <span class=\"doctag\">@param</span> team 球队名</div><div class=\"line\">     * <span class=\"doctag\">@return</span> 本条比赛记录中的对手球队名</div><div class=\"line\">     */</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getOtherTeam</span><span class=\"params\">(String team)</span></span>&#123;</div><div class=\"line\">        String otherTeam = <span class=\"keyword\">this</span>.teamA;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (team.equals(<span class=\"keyword\">this</span>.teamA))&#123;</div><div class=\"line\">            otherTeam = <span class=\"keyword\">this</span>.teamB;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> otherTeam;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后是PageRank类。在PageRank类中，构造方法首先将球队信息和比赛结果读取到内存中，并且给每个球队赋初始PageRank值1。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.pagerank.core;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.google.gson.Gson;</div><div class=\"line\"><span class=\"keyword\">import</span> com.google.gson.JsonArray;</div><div class=\"line\"><span class=\"keyword\">import</span> com.google.gson.JsonElement;</div><div class=\"line\"><span class=\"keyword\">import</span> com.google.gson.JsonObject;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Created by 王麟东 on 2017/7/8 0008.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PageRank</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, TeamItem&gt; teamMap;</div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;MatchResult&gt; matchResultList;</div><div class=\"line\">    <span class=\"keyword\">private</span> String teamInfopath;</div><div class=\"line\">    <span class=\"keyword\">private</span> String matchResultPath;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> max;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PageRank</span><span class=\"params\">(String teamInfopath, String matchResultPath, <span class=\"keyword\">int</span> max)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.teamInfopath = teamInfopath;</div><div class=\"line\">        <span class=\"keyword\">this</span>.matchResultPath = matchResultPath;</div><div class=\"line\">        <span class=\"keyword\">this</span>.max = max;</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 初始化，将球队信息和比赛结果读取到内存</div><div class=\"line\">     */</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            BufferedReader teamReader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(<span class=\"keyword\">new</span> File(<span class=\"keyword\">this</span>.teamInfopath)));</div><div class=\"line\">            Gson gson = <span class=\"keyword\">new</span> Gson();</div><div class=\"line\">            JsonArray jsonArray = gson.fromJson(teamReader.readLine(), JsonArray.class);</div><div class=\"line\">            teamReader.close();</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">this</span>.teamMap = <span class=\"keyword\">new</span> HashMap&lt;String, TeamItem&gt;();</div><div class=\"line\">            <span class=\"keyword\">for</span> (JsonElement jsonElement : jsonArray)&#123;</div><div class=\"line\">                TeamItem teamItem = <span class=\"keyword\">new</span> TeamItem();</div><div class=\"line\">                teamItem.setName(jsonElement.getAsJsonObject().get(<span class=\"string\">\"team\"</span>).getAsString());</div><div class=\"line\">                <span class=\"keyword\">this</span>.teamMap.put(teamItem.getName(), teamItem);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            BufferedReader matchReader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(<span class=\"keyword\">new</span> File(<span class=\"keyword\">this</span>.matchResultPath)));</div><div class=\"line\">            String line = <span class=\"string\">\"\"</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">this</span>.matchResultList = <span class=\"keyword\">new</span> ArrayList&lt;MatchResult&gt;();</div><div class=\"line\">            <span class=\"keyword\">while</span> ((line = matchReader.readLine()) != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">                MatchResult matchResult = <span class=\"keyword\">new</span> MatchResult(line);</div><div class=\"line\">                <span class=\"keyword\">this</span>.matchResultList.add(matchResult);</div><div class=\"line\">            &#125;</div><div class=\"line\">            matchReader.close();</div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"读取失败\"</span>);</div><div class=\"line\">            System.exit(<span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, TeamItem&gt; <span class=\"title\">getTeamMap</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> teamMap;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getMax</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> max;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>初始化之后，开始递归的计算每个球队的PageRank值：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * PageRank算法迭代器</div><div class=\"line\"> * <span class=\"doctag\">@param</span> teamMaps 球队信息</div><div class=\"line\"> * <span class=\"doctag\">@param</span> max 迭代次数</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Iteration</span><span class=\"params\">(Map&lt;String, TeamItem&gt; teamMaps, <span class=\"keyword\">int</span> max)</span></span>&#123;</div><div class=\"line\">    Map&lt;String, TeamItem&gt; tmp = <span class=\"keyword\">new</span> HashMap&lt;String, TeamItem&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (TeamItem teamItem : teamMaps.values())&#123;</div><div class=\"line\">        TeamItem tmpTeam = <span class=\"keyword\">new</span> TeamItem();</div><div class=\"line\">        tmpTeam.setName(teamItem.getName());</div><div class=\"line\">        <span class=\"keyword\">double</span> pagerank = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (MatchResult matchResult : <span class=\"keyword\">this</span>.matchResultList)&#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> weight = matchResult.getWeight(teamItem.getName());</div><div class=\"line\">            <span class=\"keyword\">if</span> (weight != -<span class=\"number\">1</span>)&#123;</div><div class=\"line\">                <span class=\"keyword\">double</span> pr = teamMaps.get(matchResult.getOtherTeam(teamItem.getName())).getPagerank();</div><div class=\"line\">                pagerank += (weight * pr);</div><div class=\"line\">                count ++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        tmpTeam.setPagerank(pagerank / count);</div><div class=\"line\">        tmp.put(tmpTeam.getName(), tmpTeam);</div><div class=\"line\">    &#125;</div><div class=\"line\">    max --;</div><div class=\"line\">    <span class=\"keyword\">this</span>.teamMap = tmp;</div><div class=\"line\">    <span class=\"keyword\">if</span> (max &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">        Iteration(<span class=\"keyword\">this</span>.teamMap, max);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用爬取的数据测试：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">String team = <span class=\"string\">\"nba_team_list.json\"</span>;</div><div class=\"line\">String match = <span class=\"string\">\"nba_result_list\"</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> max = <span class=\"number\">20</span>;</div><div class=\"line\"></div><div class=\"line\">PageRank pageRank = <span class=\"keyword\">new</span> PageRank(team, match, max);</div><div class=\"line\">pageRank.Iteration(pageRank.getTeamMap(), pageRank.getMax());</div><div class=\"line\">pageRank.wirteToFile();</div><div class=\"line\">pageRank.print();</div></pre></td></tr></table></figure></p>\n<p>由于数据量不大，迭代10-20次已经能够达到收敛状态。</p>\n<h3 id=\"爬虫\"><a href=\"#爬虫\" class=\"headerlink\" title=\"爬虫\"></a>爬虫</h3><p>数据全部来源于虎扑，但是虎扑已经更新到了新赛季（2017-2018赛季）的数据，原来的爬虫失效，所以就不贴出来了。爬取的数据放在我的github。</p>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>废话不多说，直接上结果。表格中的变化值为相比较原排名的变化程度。</p>\n<h3 id=\"NBA\"><a href=\"#NBA\" class=\"headerlink\" title=\"NBA\"></a>NBA</h3><p>数据为2016-2017赛季常规赛的全部数据。</p>\n<p>东部联盟</p>\n<table>\n<thead>\n<tr>\n<th>球队</th>\n<th>PageRank</th>\n<th>排名</th>\n<th>变化值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>凯尔特人</td>\n<td>1.9366</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>猛龙</td>\n<td>1.8867</td>\n<td>2</td>\n<td>+1</td>\n</tr>\n<tr>\n<td>骑士</td>\n<td>1.8766</td>\n<td>3</td>\n<td>-1</td>\n</tr>\n<tr>\n<td>奇才</td>\n<td>1.7852</td>\n<td>4</td>\n<td>0</td>\n</tr>\n<tr>\n<td>老鹰</td>\n<td>1.6612</td>\n<td>5</td>\n<td>0</td>\n</tr>\n<tr>\n<td>公牛</td>\n<td>1.5974</td>\n<td>6</td>\n<td>+2</td>\n</tr>\n<tr>\n<td>热火</td>\n<td>1.5771</td>\n<td>7</td>\n<td>+2</td>\n</tr>\n<tr>\n<td>雄鹿</td>\n<td>1.5465</td>\n<td>8</td>\n<td>-2</td>\n</tr>\n<tr>\n<td>步行者</td>\n<td>1.5442</td>\n<td>9</td>\n<td>-2</td>\n</tr>\n<tr>\n<td>活塞</td>\n<td>1.3974</td>\n<td>10</td>\n<td>0</td>\n</tr>\n<tr>\n<td>黄蜂</td>\n<td>1.2995</td>\n<td>11</td>\n<td>0</td>\n</tr>\n<tr>\n<td>尼克斯</td>\n<td>1.1173</td>\n<td>12</td>\n<td>0</td>\n</tr>\n<tr>\n<td>魔术</td>\n<td>1.0865</td>\n<td>13</td>\n<td>0</td>\n</tr>\n<tr>\n<td>76人</td>\n<td>1.0001</td>\n<td>14</td>\n<td>0</td>\n</tr>\n<tr>\n<td>篮网</td>\n<td>0.6985</td>\n<td>15</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<p>西部联盟</p>\n<table>\n<thead>\n<tr>\n<th>球队</th>\n<th>PageRank</th>\n<th>排名</th>\n<th>变化值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>勇士</td>\n<td>2.5695</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>马刺</td>\n<td>2.3791</td>\n<td>2</td>\n<td>0</td>\n</tr>\n<tr>\n<td>火箭</td>\n<td>2.0306</td>\n<td>3</td>\n<td>0</td>\n</tr>\n<tr>\n<td>快船</td>\n<td>1.9787</td>\n<td>4</td>\n<td>0</td>\n</tr>\n<tr>\n<td>爵士</td>\n<td>1.8741</td>\n<td>5</td>\n<td>0</td>\n</tr>\n<tr>\n<td>雷霆</td>\n<td>1.7872</td>\n<td>6</td>\n<td>0</td>\n</tr>\n<tr>\n<td>灰熊</td>\n<td>1.7141</td>\n<td>7</td>\n<td>0</td>\n</tr>\n<tr>\n<td>开拓者</td>\n<td>1.5253</td>\n<td>8</td>\n<td>0</td>\n</tr>\n<tr>\n<td>掘金</td>\n<td>1.4822</td>\n<td>9</td>\n<td>0</td>\n</tr>\n<tr>\n<td>小牛</td>\n<td>1.2437</td>\n<td>10</td>\n<td>+1</td>\n</tr>\n<tr>\n<td>鹈鹕</td>\n<td>1.2392</td>\n<td>11</td>\n<td>-1</td>\n</tr>\n<tr>\n<td>国王</td>\n<td>1.1998</td>\n<td>12</td>\n<td>0</td>\n</tr>\n<tr>\n<td>森林狼</td>\n<td>1.1934</td>\n<td>13</td>\n<td>0</td>\n</tr>\n<tr>\n<td>湖人</td>\n<td>1.0070</td>\n<td>14</td>\n<td>0</td>\n</tr>\n<tr>\n<td>太阳</td>\n<td>0.9156</td>\n<td>15</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"西甲\"><a href=\"#西甲\" class=\"headerlink\" title=\"西甲\"></a>西甲</h3><p>数据为2016-2017赛季西甲联赛的全部数据。</p>\n<table>\n<thead>\n<tr>\n<th>球队</th>\n<th>PageRank</th>\n<th>排名</th>\n<th>变化值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>巴萨</td>\n<td>2.3323</td>\n<td>1</td>\n<td>+1</td>\n</tr>\n<tr>\n<td>皇马</td>\n<td>2.2955</td>\n<td>2</td>\n<td>-1</td>\n</tr>\n<tr>\n<td>马竞</td>\n<td>1.8039</td>\n<td>3</td>\n<td>0</td>\n</tr>\n<tr>\n<td>塞维利亚</td>\n<td>1.7653</td>\n<td>4</td>\n<td>0</td>\n</tr>\n<tr>\n<td>比利亚雷亚尔</td>\n<td>1.6181</td>\n<td>5</td>\n<td>0</td>\n</tr>\n<tr>\n<td>毕尔巴鄂</td>\n<td>1.4819</td>\n<td>6</td>\n<td>+1</td>\n</tr>\n<tr>\n<td>阿拉维斯</td>\n<td>1.4205</td>\n<td>7</td>\n<td>+2</td>\n</tr>\n<tr>\n<td>皇家社会</td>\n<td>1.3817</td>\n<td>8</td>\n<td>-1</td>\n</tr>\n<tr>\n<td>埃瓦尔</td>\n<td>1.2816</td>\n<td>9</td>\n<td>+1</td>\n</tr>\n<tr>\n<td>西班牙人</td>\n<td>1.2111</td>\n<td>10</td>\n<td>-2</td>\n</tr>\n<tr>\n<td>马拉加</td>\n<td>1.1516</td>\n<td>11</td>\n<td>0</td>\n</tr>\n<tr>\n<td>瓦伦西亚</td>\n<td>1.1018</td>\n<td>12</td>\n<td>0</td>\n</tr>\n<tr>\n<td>塞尔塔</td>\n<td>0.9893</td>\n<td>13</td>\n<td>0</td>\n</tr>\n<tr>\n<td>拉斯帕尔马斯</td>\n<td>0.9532</td>\n<td>14</td>\n<td>0</td>\n</tr>\n<tr>\n<td>拉科鲁尼亚</td>\n<td>0.8892</td>\n<td>15</td>\n<td>+1</td>\n</tr>\n<tr>\n<td>皇家贝蒂斯</td>\n<td>0.8815</td>\n<td>16</td>\n<td>-1</td>\n</tr>\n<tr>\n<td>莱加内斯</td>\n<td>0.7624</td>\n<td>17</td>\n<td>0</td>\n</tr>\n<tr>\n<td>希洪竞技</td>\n<td>0.6651</td>\n<td>18</td>\n<td>0</td>\n</tr>\n<tr>\n<td>格拉纳达</td>\n<td>0.5086</td>\n<td>19</td>\n<td>+1</td>\n</tr>\n<tr>\n<td>奥萨苏纳</td>\n<td>0.4939</td>\n<td>20</td>\n<td>-1</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"英超\"><a href=\"#英超\" class=\"headerlink\" title=\"英超\"></a>英超</h3><p>数据为2016-2017赛季英超联赛的全部数据。</p>\n<table>\n<thead>\n<tr>\n<th>球队</th>\n<th>PageRank</th>\n<th>排名</th>\n<th>变化值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>切尔西</td>\n<td>5.3667</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>热刺</td>\n<td>4.9594</td>\n<td>2</td>\n<td>0</td>\n</tr>\n<tr>\n<td>利物浦</td>\n<td>4.7785</td>\n<td>3</td>\n<td>+1</td>\n</tr>\n<tr>\n<td>曼城</td>\n<td>4.2577</td>\n<td>4</td>\n<td>-1</td>\n</tr>\n<tr>\n<td>阿森纳</td>\n<td>4.1272</td>\n<td>5</td>\n<td>0</td>\n</tr>\n<tr>\n<td>曼联</td>\n<td>3.9255</td>\n<td>6</td>\n<td>0</td>\n</tr>\n<tr>\n<td>埃弗顿</td>\n<td>3.3458</td>\n<td>7</td>\n<td>0</td>\n</tr>\n<tr>\n<td>伯恩茅斯</td>\n<td>2.6264</td>\n<td>8</td>\n<td>+1</td>\n</tr>\n<tr>\n<td>莱斯特</td>\n<td>2.5141</td>\n<td>9</td>\n<td>+3</td>\n</tr>\n<tr>\n<td>南安普顿</td>\n<td>2.4357</td>\n<td>10</td>\n<td>-2</td>\n</tr>\n<tr>\n<td>西汉姆联</td>\n<td>2.4165</td>\n<td>11</td>\n<td>0</td>\n</tr>\n<tr>\n<td>水晶宫</td>\n<td>2.4097</td>\n<td>12</td>\n<td>+2</td>\n</tr>\n<tr>\n<td>西布朗</td>\n<td>2.3787</td>\n<td>13</td>\n<td>+3</td>\n</tr>\n<tr>\n<td>斯旺西</td>\n<td>2.3119</td>\n<td>14</td>\n<td>+1</td>\n</tr>\n<tr>\n<td>伯恩利</td>\n<td>2.2320</td>\n<td>15</td>\n<td>+1</td>\n</tr>\n<tr>\n<td>沃特福德</td>\n<td>2.2083</td>\n<td>16</td>\n<td>+1</td>\n</tr>\n<tr>\n<td>斯托克城</td>\n<td>2.1396</td>\n<td>17</td>\n<td>-4</td>\n</tr>\n<tr>\n<td>胡尔城</td>\n<td>1.9424</td>\n<td>18</td>\n<td>0</td>\n</tr>\n<tr>\n<td>米德尔斯堡</td>\n<td>1.4478</td>\n<td>19</td>\n<td>0</td>\n</tr>\n<tr>\n<td>桑德兰</td>\n<td>1.3255</td>\n<td>20</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<p>至于结果能看出来什么信息，大家就见仁见智了。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是voidAlex原创的第一篇博文。<br>源码在<a href=\"https://github.com/voidAlex/pagerank\" target=\"_blank\" rel=\"noopener\">我的GitHub</a><br>","more":"</p>\n</blockquote>\n<h2 id=\"PageRank算法\"><a href=\"#PageRank算法\" class=\"headerlink\" title=\"PageRank算法\"></a>PageRank算法</h2><p>PageRank算法，又叫佩奇排名。是由Google公司创始人拉里佩奇（Larry Page）发明的一种由搜索引擎根据网页之间相互的超链接计算的技术。</p>\n<p>对于某个互联网网页A来说，该网页PageRank的计算基于以下两个基本假设：</p>\n<blockquote>\n<ul>\n<li>数量假设：在Web图模型中，如果一个页面节点接收到的其他网页指向的入链数量越多，那么这个页面越重要；</li>\n<li>质量假设：指向页面A的入链质量不同，质量高的页面会通过链接向其他页面传递更多的权重。所以越是质量高的页面指向页面A，则页面A越重要。</li>\n</ul>\n</blockquote>\n<p>根据上面的两个假设，PageRank的计算步骤如下：</p>\n<ol>\n<li><p>网页通过链接关系构建起Web图，每个页面设置相同的PageRank值，通过若干轮的计算，会得到每个页面所获得的最终PageRank值。随着每一轮的计算进行，网页当前的PageRank值会不断得到更新。</p>\n</li>\n<li><p>在一轮中更新页面PageRank得分的计算方法：在一轮更新页面PageRank得分的计算中，每个页面将其当前的PageRank值平均分配到本页面包含的出链上，这样每个链接即获得了相应的权值。而每个页面将所有指向本页面的入链所传入的权值求和，即可得到新的PageRank得分。当每个页面都获得了更新后的PageRank值，就完成了一轮PageRank计算。</p>\n</li>\n</ol>\n<h2 id=\"使用PageRank算法计算球队实力\"><a href=\"#使用PageRank算法计算球队实力\" class=\"headerlink\" title=\"使用PageRank算法计算球队实力\"></a>使用PageRank算法计算球队实力</h2><p>将PageRank算法应用到球队中后，球队的PageRank分数的计算依然基于两个假设：</p>\n<blockquote>\n<ul>\n<li>数量假设：比赛中A在其他球队身上取得的分数（战胜或战平）越多，那么这个球队实力越强；</li>\n<li>质量假设：取得积分的对手实力强弱不同，实力强的球队会提供更多的权重。所以A取得战胜或战平的球队实力越强，则球队A越强。</li>\n</ul>\n</blockquote>\n<p>利用以上两个假设，PageRank算法刚开始赋予每个球队相同的重要性得分（PR值），通过迭代递归计算来更新每个球队节点的PageRank得分，直到得分稳定为止。</p>\n<p>假设一个由4支球队组成的足球联赛：A，B，C和D。给定所有球队一个相同的初始PageRank值PR。在第一轮计算中，对于球队A，假设它在对阵B、C、D球队取得的积分分别为P1、P2、P3，那么它的PageRank值将被更新为：</p>\n<p>$$ PR(A) = (PR(B)∙P1+PR(C)∙P2+PR(D)∙P3)/3 $$</p>\n<p>同样的，B、C、D队的PageRank值也将通过此方法更新。在进行若干次迭代后，所有球队的PageRank值将会趋向于稳定，也就是收敛状态。这时所有球队的PageRank值就是它们的最终得分。</p>\n<h2 id=\"意义\"><a href=\"#意义\" class=\"headerlink\" title=\"意义\"></a>意义</h2><p>灵感来源于虎扑的一个<a href=\"https://bbs.hupu.com/18776888.html\" target=\"_blank\" rel=\"noopener\">帖子</a>，里面提到了球队的硬仗能力，或者球队上限。原贴的作者计算了上赛季的英超的PageRank分，自己看了之后比较感兴趣，就实现了一遍。原贴作者提到：</p>\n<blockquote>\n<p><em>一支球队的联赛排名是其硬仗水平与虐菜能力的共同作用，然而由联赛排名决定的欧战资格，尤其是淘汰赛阶段，更看中的却是球队的硬仗水平，即话题区里所谓的球队上限。于是问题来了，是否存在有些球队主要靠虐菜能力进入欧战区，然后面对他国豪强一泻千里，给本国联赛拖了后腿的情况？我试着用PageRank算法来验证这一猜想。</em></p>\n</blockquote>\n<blockquote>\n<p><em>一支球队的PageRank评分都是从其他球队手中抢来的，要知道一支球队的PageRank评分就必须先知道其他球队的评分，这是鸡生蛋蛋生鸡的难题。PageRank算法的做法是给每个队一个初始分数，比如1，然后通过交战记录互相贡献分数，这样每支队的分数都会有变化；再拿这些分数重复一遍计算，每支队的分数又会变化；重复N次后，变化会趋于0（有数学证明），这时的分数就是最终结果。</em></p>\n</blockquote>\n<p>一支球队的所谓硬仗能力或球队上限是比较抽（xuan）象（xue）的东西，PageRank算法可以比较好的量化它。</p>\n<p>本文中计算了本赛季（2016-2017赛季）英超、西甲、NBA各个球队的PageRank值。数据来源于<a href=\"https://soccer.hupu.com/table/\" target=\"_blank\" rel=\"noopener\">虎扑</a>。</p>\n<h2 id=\"核心代码\"><a href=\"#核心代码\" class=\"headerlink\" title=\"核心代码\"></a>核心代码</h2><p>核心代码有两部分，PageRank算法和爬虫。</p>\n<h3 id=\"PageRank算法-1\"><a href=\"#PageRank算法-1\" class=\"headerlink\" title=\"PageRank算法\"></a>PageRank算法</h3><p>用PageRank算法计算球队PageRank值比较简单。就是通过大量的交手记录来更新PageRank值。计算方法在第二部分已经说明。</p>\n<p>用爬虫爬取的球队信息和比赛记录存放在文件中。球队信息以JSON的形式存放，比赛结果以文本的形式存放，一行表示一条比赛记录。类似于：</p>\n<blockquote>\n<p>莱加内斯 2-4 皇马</p>\n</blockquote>\n<p>这样的格式。</p>\n<p>首先构造TeamItem类来存放球队信息，该类有两个字段：name和pagerank。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.pagerank.core;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 球队类</div><div class=\"line\"> * Created by 王麟东 on 2017/7/8 0008.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TeamItem</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> pagerank;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TeamItem</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.pagerank = <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getPagerank</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> pagerank;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPagerank</span><span class=\"params\">(<span class=\"keyword\">double</span> pagerank)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.pagerank = pagerank;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后构造MatchResult类来存放比赛结果。在MatchResult类中，有获取比赛结果的方法getWeight。根据比赛结果，返回对应的权重。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.pagerank.core;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 比赛结果类</div><div class=\"line\"> * Created by 王麟东 on 2017/7/8 0008.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MatchResult</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String teamA;</div><div class=\"line\">    <span class=\"keyword\">private</span> String teamB;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> scoreA;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> scoreB;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MatchResult</span><span class=\"params\">(String line)</span> </span>&#123;</div><div class=\"line\">        String temp[] = line.split(<span class=\"string\">\"-\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.teamA = temp[<span class=\"number\">0</span>].split(<span class=\"string\">\" \"</span>)[<span class=\"number\">0</span>];</div><div class=\"line\">        <span class=\"keyword\">this</span>.scoreA = Integer.parseInt(temp[<span class=\"number\">0</span>].split(<span class=\"string\">\" \"</span>)[<span class=\"number\">1</span>]);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.teamB = temp[<span class=\"number\">1</span>].split(<span class=\"string\">\" \"</span>)[<span class=\"number\">1</span>];</div><div class=\"line\">        <span class=\"keyword\">this</span>.scoreB = Integer.parseInt(temp[<span class=\"number\">1</span>].split(<span class=\"string\">\" \"</span>)[<span class=\"number\">0</span>]);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 获得权重（比赛结果）</div><div class=\"line\">     * <span class=\"doctag\">@param</span> team 球队名</div><div class=\"line\">     * <span class=\"doctag\">@return</span> 该球队在本条比赛记录中的比赛结果，胜3平1负0，若本条比赛记录中没有这个球队，返回-1</div><div class=\"line\">     */</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getWeight</span><span class=\"params\">(String team)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> weight = -<span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (team.equals(<span class=\"keyword\">this</span>.teamA))&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.scoreA == <span class=\"keyword\">this</span>.scoreB)&#123;</div><div class=\"line\">                weight = <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.scoreA &gt; <span class=\"keyword\">this</span>.scoreB)&#123;</div><div class=\"line\">                weight = <span class=\"number\">3</span>;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.scoreA &lt; <span class=\"keyword\">this</span>.scoreB)&#123;</div><div class=\"line\">                weight = <span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (team.equals(<span class=\"keyword\">this</span>.teamB))&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.scoreB == <span class=\"keyword\">this</span>.scoreA)&#123;</div><div class=\"line\">                weight = <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.scoreB &gt; <span class=\"keyword\">this</span>.scoreA)&#123;</div><div class=\"line\">                weight = <span class=\"number\">3</span>;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.scoreB &lt; <span class=\"keyword\">this</span>.scoreA)&#123;</div><div class=\"line\">                weight = <span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> weight;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 在获得比赛权重不为-1的情况下，获得对手球队名</div><div class=\"line\">     * <span class=\"doctag\">@param</span> team 球队名</div><div class=\"line\">     * <span class=\"doctag\">@return</span> 本条比赛记录中的对手球队名</div><div class=\"line\">     */</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getOtherTeam</span><span class=\"params\">(String team)</span></span>&#123;</div><div class=\"line\">        String otherTeam = <span class=\"keyword\">this</span>.teamA;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (team.equals(<span class=\"keyword\">this</span>.teamA))&#123;</div><div class=\"line\">            otherTeam = <span class=\"keyword\">this</span>.teamB;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> otherTeam;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后是PageRank类。在PageRank类中，构造方法首先将球队信息和比赛结果读取到内存中，并且给每个球队赋初始PageRank值1。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.pagerank.core;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.google.gson.Gson;</div><div class=\"line\"><span class=\"keyword\">import</span> com.google.gson.JsonArray;</div><div class=\"line\"><span class=\"keyword\">import</span> com.google.gson.JsonElement;</div><div class=\"line\"><span class=\"keyword\">import</span> com.google.gson.JsonObject;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.*;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Created by 王麟东 on 2017/7/8 0008.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PageRank</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, TeamItem&gt; teamMap;</div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;MatchResult&gt; matchResultList;</div><div class=\"line\">    <span class=\"keyword\">private</span> String teamInfopath;</div><div class=\"line\">    <span class=\"keyword\">private</span> String matchResultPath;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> max;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PageRank</span><span class=\"params\">(String teamInfopath, String matchResultPath, <span class=\"keyword\">int</span> max)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.teamInfopath = teamInfopath;</div><div class=\"line\">        <span class=\"keyword\">this</span>.matchResultPath = matchResultPath;</div><div class=\"line\">        <span class=\"keyword\">this</span>.max = max;</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 初始化，将球队信息和比赛结果读取到内存</div><div class=\"line\">     */</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            BufferedReader teamReader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(<span class=\"keyword\">new</span> File(<span class=\"keyword\">this</span>.teamInfopath)));</div><div class=\"line\">            Gson gson = <span class=\"keyword\">new</span> Gson();</div><div class=\"line\">            JsonArray jsonArray = gson.fromJson(teamReader.readLine(), JsonArray.class);</div><div class=\"line\">            teamReader.close();</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">this</span>.teamMap = <span class=\"keyword\">new</span> HashMap&lt;String, TeamItem&gt;();</div><div class=\"line\">            <span class=\"keyword\">for</span> (JsonElement jsonElement : jsonArray)&#123;</div><div class=\"line\">                TeamItem teamItem = <span class=\"keyword\">new</span> TeamItem();</div><div class=\"line\">                teamItem.setName(jsonElement.getAsJsonObject().get(<span class=\"string\">\"team\"</span>).getAsString());</div><div class=\"line\">                <span class=\"keyword\">this</span>.teamMap.put(teamItem.getName(), teamItem);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            BufferedReader matchReader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(<span class=\"keyword\">new</span> File(<span class=\"keyword\">this</span>.matchResultPath)));</div><div class=\"line\">            String line = <span class=\"string\">\"\"</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">this</span>.matchResultList = <span class=\"keyword\">new</span> ArrayList&lt;MatchResult&gt;();</div><div class=\"line\">            <span class=\"keyword\">while</span> ((line = matchReader.readLine()) != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">                MatchResult matchResult = <span class=\"keyword\">new</span> MatchResult(line);</div><div class=\"line\">                <span class=\"keyword\">this</span>.matchResultList.add(matchResult);</div><div class=\"line\">            &#125;</div><div class=\"line\">            matchReader.close();</div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"读取失败\"</span>);</div><div class=\"line\">            System.exit(<span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, TeamItem&gt; <span class=\"title\">getTeamMap</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> teamMap;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getMax</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> max;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>初始化之后，开始递归的计算每个球队的PageRank值：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * PageRank算法迭代器</div><div class=\"line\"> * <span class=\"doctag\">@param</span> teamMaps 球队信息</div><div class=\"line\"> * <span class=\"doctag\">@param</span> max 迭代次数</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Iteration</span><span class=\"params\">(Map&lt;String, TeamItem&gt; teamMaps, <span class=\"keyword\">int</span> max)</span></span>&#123;</div><div class=\"line\">    Map&lt;String, TeamItem&gt; tmp = <span class=\"keyword\">new</span> HashMap&lt;String, TeamItem&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (TeamItem teamItem : teamMaps.values())&#123;</div><div class=\"line\">        TeamItem tmpTeam = <span class=\"keyword\">new</span> TeamItem();</div><div class=\"line\">        tmpTeam.setName(teamItem.getName());</div><div class=\"line\">        <span class=\"keyword\">double</span> pagerank = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (MatchResult matchResult : <span class=\"keyword\">this</span>.matchResultList)&#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> weight = matchResult.getWeight(teamItem.getName());</div><div class=\"line\">            <span class=\"keyword\">if</span> (weight != -<span class=\"number\">1</span>)&#123;</div><div class=\"line\">                <span class=\"keyword\">double</span> pr = teamMaps.get(matchResult.getOtherTeam(teamItem.getName())).getPagerank();</div><div class=\"line\">                pagerank += (weight * pr);</div><div class=\"line\">                count ++;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        tmpTeam.setPagerank(pagerank / count);</div><div class=\"line\">        tmp.put(tmpTeam.getName(), tmpTeam);</div><div class=\"line\">    &#125;</div><div class=\"line\">    max --;</div><div class=\"line\">    <span class=\"keyword\">this</span>.teamMap = tmp;</div><div class=\"line\">    <span class=\"keyword\">if</span> (max &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">        Iteration(<span class=\"keyword\">this</span>.teamMap, max);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用爬取的数据测试：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">String team = <span class=\"string\">\"nba_team_list.json\"</span>;</div><div class=\"line\">String match = <span class=\"string\">\"nba_result_list\"</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> max = <span class=\"number\">20</span>;</div><div class=\"line\"></div><div class=\"line\">PageRank pageRank = <span class=\"keyword\">new</span> PageRank(team, match, max);</div><div class=\"line\">pageRank.Iteration(pageRank.getTeamMap(), pageRank.getMax());</div><div class=\"line\">pageRank.wirteToFile();</div><div class=\"line\">pageRank.print();</div></pre></td></tr></table></figure></p>\n<p>由于数据量不大，迭代10-20次已经能够达到收敛状态。</p>\n<h3 id=\"爬虫\"><a href=\"#爬虫\" class=\"headerlink\" title=\"爬虫\"></a>爬虫</h3><p>数据全部来源于虎扑，但是虎扑已经更新到了新赛季（2017-2018赛季）的数据，原来的爬虫失效，所以就不贴出来了。爬取的数据放在我的github。</p>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>废话不多说，直接上结果。表格中的变化值为相比较原排名的变化程度。</p>\n<h3 id=\"NBA\"><a href=\"#NBA\" class=\"headerlink\" title=\"NBA\"></a>NBA</h3><p>数据为2016-2017赛季常规赛的全部数据。</p>\n<p>东部联盟</p>\n<table>\n<thead>\n<tr>\n<th>球队</th>\n<th>PageRank</th>\n<th>排名</th>\n<th>变化值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>凯尔特人</td>\n<td>1.9366</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>猛龙</td>\n<td>1.8867</td>\n<td>2</td>\n<td>+1</td>\n</tr>\n<tr>\n<td>骑士</td>\n<td>1.8766</td>\n<td>3</td>\n<td>-1</td>\n</tr>\n<tr>\n<td>奇才</td>\n<td>1.7852</td>\n<td>4</td>\n<td>0</td>\n</tr>\n<tr>\n<td>老鹰</td>\n<td>1.6612</td>\n<td>5</td>\n<td>0</td>\n</tr>\n<tr>\n<td>公牛</td>\n<td>1.5974</td>\n<td>6</td>\n<td>+2</td>\n</tr>\n<tr>\n<td>热火</td>\n<td>1.5771</td>\n<td>7</td>\n<td>+2</td>\n</tr>\n<tr>\n<td>雄鹿</td>\n<td>1.5465</td>\n<td>8</td>\n<td>-2</td>\n</tr>\n<tr>\n<td>步行者</td>\n<td>1.5442</td>\n<td>9</td>\n<td>-2</td>\n</tr>\n<tr>\n<td>活塞</td>\n<td>1.3974</td>\n<td>10</td>\n<td>0</td>\n</tr>\n<tr>\n<td>黄蜂</td>\n<td>1.2995</td>\n<td>11</td>\n<td>0</td>\n</tr>\n<tr>\n<td>尼克斯</td>\n<td>1.1173</td>\n<td>12</td>\n<td>0</td>\n</tr>\n<tr>\n<td>魔术</td>\n<td>1.0865</td>\n<td>13</td>\n<td>0</td>\n</tr>\n<tr>\n<td>76人</td>\n<td>1.0001</td>\n<td>14</td>\n<td>0</td>\n</tr>\n<tr>\n<td>篮网</td>\n<td>0.6985</td>\n<td>15</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<p>西部联盟</p>\n<table>\n<thead>\n<tr>\n<th>球队</th>\n<th>PageRank</th>\n<th>排名</th>\n<th>变化值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>勇士</td>\n<td>2.5695</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>马刺</td>\n<td>2.3791</td>\n<td>2</td>\n<td>0</td>\n</tr>\n<tr>\n<td>火箭</td>\n<td>2.0306</td>\n<td>3</td>\n<td>0</td>\n</tr>\n<tr>\n<td>快船</td>\n<td>1.9787</td>\n<td>4</td>\n<td>0</td>\n</tr>\n<tr>\n<td>爵士</td>\n<td>1.8741</td>\n<td>5</td>\n<td>0</td>\n</tr>\n<tr>\n<td>雷霆</td>\n<td>1.7872</td>\n<td>6</td>\n<td>0</td>\n</tr>\n<tr>\n<td>灰熊</td>\n<td>1.7141</td>\n<td>7</td>\n<td>0</td>\n</tr>\n<tr>\n<td>开拓者</td>\n<td>1.5253</td>\n<td>8</td>\n<td>0</td>\n</tr>\n<tr>\n<td>掘金</td>\n<td>1.4822</td>\n<td>9</td>\n<td>0</td>\n</tr>\n<tr>\n<td>小牛</td>\n<td>1.2437</td>\n<td>10</td>\n<td>+1</td>\n</tr>\n<tr>\n<td>鹈鹕</td>\n<td>1.2392</td>\n<td>11</td>\n<td>-1</td>\n</tr>\n<tr>\n<td>国王</td>\n<td>1.1998</td>\n<td>12</td>\n<td>0</td>\n</tr>\n<tr>\n<td>森林狼</td>\n<td>1.1934</td>\n<td>13</td>\n<td>0</td>\n</tr>\n<tr>\n<td>湖人</td>\n<td>1.0070</td>\n<td>14</td>\n<td>0</td>\n</tr>\n<tr>\n<td>太阳</td>\n<td>0.9156</td>\n<td>15</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"西甲\"><a href=\"#西甲\" class=\"headerlink\" title=\"西甲\"></a>西甲</h3><p>数据为2016-2017赛季西甲联赛的全部数据。</p>\n<table>\n<thead>\n<tr>\n<th>球队</th>\n<th>PageRank</th>\n<th>排名</th>\n<th>变化值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>巴萨</td>\n<td>2.3323</td>\n<td>1</td>\n<td>+1</td>\n</tr>\n<tr>\n<td>皇马</td>\n<td>2.2955</td>\n<td>2</td>\n<td>-1</td>\n</tr>\n<tr>\n<td>马竞</td>\n<td>1.8039</td>\n<td>3</td>\n<td>0</td>\n</tr>\n<tr>\n<td>塞维利亚</td>\n<td>1.7653</td>\n<td>4</td>\n<td>0</td>\n</tr>\n<tr>\n<td>比利亚雷亚尔</td>\n<td>1.6181</td>\n<td>5</td>\n<td>0</td>\n</tr>\n<tr>\n<td>毕尔巴鄂</td>\n<td>1.4819</td>\n<td>6</td>\n<td>+1</td>\n</tr>\n<tr>\n<td>阿拉维斯</td>\n<td>1.4205</td>\n<td>7</td>\n<td>+2</td>\n</tr>\n<tr>\n<td>皇家社会</td>\n<td>1.3817</td>\n<td>8</td>\n<td>-1</td>\n</tr>\n<tr>\n<td>埃瓦尔</td>\n<td>1.2816</td>\n<td>9</td>\n<td>+1</td>\n</tr>\n<tr>\n<td>西班牙人</td>\n<td>1.2111</td>\n<td>10</td>\n<td>-2</td>\n</tr>\n<tr>\n<td>马拉加</td>\n<td>1.1516</td>\n<td>11</td>\n<td>0</td>\n</tr>\n<tr>\n<td>瓦伦西亚</td>\n<td>1.1018</td>\n<td>12</td>\n<td>0</td>\n</tr>\n<tr>\n<td>塞尔塔</td>\n<td>0.9893</td>\n<td>13</td>\n<td>0</td>\n</tr>\n<tr>\n<td>拉斯帕尔马斯</td>\n<td>0.9532</td>\n<td>14</td>\n<td>0</td>\n</tr>\n<tr>\n<td>拉科鲁尼亚</td>\n<td>0.8892</td>\n<td>15</td>\n<td>+1</td>\n</tr>\n<tr>\n<td>皇家贝蒂斯</td>\n<td>0.8815</td>\n<td>16</td>\n<td>-1</td>\n</tr>\n<tr>\n<td>莱加内斯</td>\n<td>0.7624</td>\n<td>17</td>\n<td>0</td>\n</tr>\n<tr>\n<td>希洪竞技</td>\n<td>0.6651</td>\n<td>18</td>\n<td>0</td>\n</tr>\n<tr>\n<td>格拉纳达</td>\n<td>0.5086</td>\n<td>19</td>\n<td>+1</td>\n</tr>\n<tr>\n<td>奥萨苏纳</td>\n<td>0.4939</td>\n<td>20</td>\n<td>-1</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"英超\"><a href=\"#英超\" class=\"headerlink\" title=\"英超\"></a>英超</h3><p>数据为2016-2017赛季英超联赛的全部数据。</p>\n<table>\n<thead>\n<tr>\n<th>球队</th>\n<th>PageRank</th>\n<th>排名</th>\n<th>变化值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>切尔西</td>\n<td>5.3667</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>热刺</td>\n<td>4.9594</td>\n<td>2</td>\n<td>0</td>\n</tr>\n<tr>\n<td>利物浦</td>\n<td>4.7785</td>\n<td>3</td>\n<td>+1</td>\n</tr>\n<tr>\n<td>曼城</td>\n<td>4.2577</td>\n<td>4</td>\n<td>-1</td>\n</tr>\n<tr>\n<td>阿森纳</td>\n<td>4.1272</td>\n<td>5</td>\n<td>0</td>\n</tr>\n<tr>\n<td>曼联</td>\n<td>3.9255</td>\n<td>6</td>\n<td>0</td>\n</tr>\n<tr>\n<td>埃弗顿</td>\n<td>3.3458</td>\n<td>7</td>\n<td>0</td>\n</tr>\n<tr>\n<td>伯恩茅斯</td>\n<td>2.6264</td>\n<td>8</td>\n<td>+1</td>\n</tr>\n<tr>\n<td>莱斯特</td>\n<td>2.5141</td>\n<td>9</td>\n<td>+3</td>\n</tr>\n<tr>\n<td>南安普顿</td>\n<td>2.4357</td>\n<td>10</td>\n<td>-2</td>\n</tr>\n<tr>\n<td>西汉姆联</td>\n<td>2.4165</td>\n<td>11</td>\n<td>0</td>\n</tr>\n<tr>\n<td>水晶宫</td>\n<td>2.4097</td>\n<td>12</td>\n<td>+2</td>\n</tr>\n<tr>\n<td>西布朗</td>\n<td>2.3787</td>\n<td>13</td>\n<td>+3</td>\n</tr>\n<tr>\n<td>斯旺西</td>\n<td>2.3119</td>\n<td>14</td>\n<td>+1</td>\n</tr>\n<tr>\n<td>伯恩利</td>\n<td>2.2320</td>\n<td>15</td>\n<td>+1</td>\n</tr>\n<tr>\n<td>沃特福德</td>\n<td>2.2083</td>\n<td>16</td>\n<td>+1</td>\n</tr>\n<tr>\n<td>斯托克城</td>\n<td>2.1396</td>\n<td>17</td>\n<td>-4</td>\n</tr>\n<tr>\n<td>胡尔城</td>\n<td>1.9424</td>\n<td>18</td>\n<td>0</td>\n</tr>\n<tr>\n<td>米德尔斯堡</td>\n<td>1.4478</td>\n<td>19</td>\n<td>0</td>\n</tr>\n<tr>\n<td>桑德兰</td>\n<td>1.3255</td>\n<td>20</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<p>至于结果能看出来什么信息，大家就见仁见智了。</p>"},{"title":"数据归一化的方法","date":"2017-08-18T08:06:25.000Z","mathjax":true,"_content":"> 这是voidAlex原创的第五篇博文。\n\n在数据挖掘的问题中，数据所用的度量单位可能会影响分析结果。使用较小的单位可能会导致该属性有较大的值域。为了避免这些问题，数据应该进行归一化（又称规范化或标准化）。归一化数据将会赋予所有属性相同的权重。常见的归一化方式有三种：最小-最大值归一化，z分数归一化，小数定标归一化。\n\n<!-- more -->\n\n## 最小-最大值归一化\n\n$$\nu^\\prime=\\frac\n{u - min\\_A}\n{max\\_A - min\\_A}(newmax\\_A - newmin\\_A) + newmin\\_A\n$$\n\n其中，A是数值属性，$min\\_A$和$max\\_A$分别是属性A在该数据集中的最小和最大值。通过上述的计算即可把A的值映射到区间$[newmin\\_A, newmax\\_A]$中的$u^\\prime$。\n\n常用的最小-最大值区间为$[0, 1]$和$[-1, 1]$。使用最小-最大值归一化，如果今后的数据在原始数据的值域之外，将会产生越界错误。\n\n## z分数归一化\n\n$$\nu^\\prime=\\frac\n{u - \\overline{A}}\n{\\sigma\\_A}\n$$\n\n其中，$\\overline{A}$为属性A的均值，$\\sigma\\_A$为A的标准差。该方法在属性A的最大最小值未知或者有离群点的时候可用。\n\n## 小数定标归一化\n\n$$\nu^\\prime=\\frac\n{u}\n{10^i}\n$$\n\n该方法通过移动属性A的小数点位置进行归一化。小数点移动的位置依赖于A的最大绝对值。其中，$i$是使得$max(\\mid u^\\prime \\mid) < 1$的最小整数。","source":"_posts/数据归一化的方法.md","raw":"---\ntitle: 数据归一化的方法\ndate: 2017-08-18 16:06:25\ntags: ['数据挖掘', '数据分析']\nmathjax: true\n---\n> 这是voidAlex原创的第五篇博文。\n\n在数据挖掘的问题中，数据所用的度量单位可能会影响分析结果。使用较小的单位可能会导致该属性有较大的值域。为了避免这些问题，数据应该进行归一化（又称规范化或标准化）。归一化数据将会赋予所有属性相同的权重。常见的归一化方式有三种：最小-最大值归一化，z分数归一化，小数定标归一化。\n\n<!-- more -->\n\n## 最小-最大值归一化\n\n$$\nu^\\prime=\\frac\n{u - min\\_A}\n{max\\_A - min\\_A}(newmax\\_A - newmin\\_A) + newmin\\_A\n$$\n\n其中，A是数值属性，$min\\_A$和$max\\_A$分别是属性A在该数据集中的最小和最大值。通过上述的计算即可把A的值映射到区间$[newmin\\_A, newmax\\_A]$中的$u^\\prime$。\n\n常用的最小-最大值区间为$[0, 1]$和$[-1, 1]$。使用最小-最大值归一化，如果今后的数据在原始数据的值域之外，将会产生越界错误。\n\n## z分数归一化\n\n$$\nu^\\prime=\\frac\n{u - \\overline{A}}\n{\\sigma\\_A}\n$$\n\n其中，$\\overline{A}$为属性A的均值，$\\sigma\\_A$为A的标准差。该方法在属性A的最大最小值未知或者有离群点的时候可用。\n\n## 小数定标归一化\n\n$$\nu^\\prime=\\frac\n{u}\n{10^i}\n$$\n\n该方法通过移动属性A的小数点位置进行归一化。小数点移动的位置依赖于A的最大绝对值。其中，$i$是使得$max(\\mid u^\\prime \\mid) < 1$的最小整数。","slug":"数据归一化的方法","published":1,"updated":"2017-08-18T09:21:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhhhvn3o000q27xu4toepsdg","content":"<blockquote>\n<p>这是voidAlex原创的第五篇博文。</p>\n</blockquote>\n<p>在数据挖掘的问题中，数据所用的度量单位可能会影响分析结果。使用较小的单位可能会导致该属性有较大的值域。为了避免这些问题，数据应该进行归一化（又称规范化或标准化）。归一化数据将会赋予所有属性相同的权重。常见的归一化方式有三种：最小-最大值归一化，z分数归一化，小数定标归一化。</p>\n<a id=\"more\"></a>\n<h2 id=\"最小-最大值归一化\"><a href=\"#最小-最大值归一化\" class=\"headerlink\" title=\"最小-最大值归一化\"></a>最小-最大值归一化</h2><p>$$<br>u^\\prime=\\frac<br>{u - min_A}<br>{max_A - min_A}(newmax_A - newmin_A) + newmin_A<br>$$</p>\n<p>其中，A是数值属性，$min_A$和$max_A$分别是属性A在该数据集中的最小和最大值。通过上述的计算即可把A的值映射到区间$[newmin_A, newmax_A]$中的$u^\\prime$。</p>\n<p>常用的最小-最大值区间为$[0, 1]$和$[-1, 1]$。使用最小-最大值归一化，如果今后的数据在原始数据的值域之外，将会产生越界错误。</p>\n<h2 id=\"z分数归一化\"><a href=\"#z分数归一化\" class=\"headerlink\" title=\"z分数归一化\"></a>z分数归一化</h2><p>$$<br>u^\\prime=\\frac<br>{u - \\overline{A}}<br>{\\sigma_A}<br>$$</p>\n<p>其中，$\\overline{A}$为属性A的均值，$\\sigma_A$为A的标准差。该方法在属性A的最大最小值未知或者有离群点的时候可用。</p>\n<h2 id=\"小数定标归一化\"><a href=\"#小数定标归一化\" class=\"headerlink\" title=\"小数定标归一化\"></a>小数定标归一化</h2><p>$$<br>u^\\prime=\\frac<br>{u}<br>{10^i}<br>$$</p>\n<p>该方法通过移动属性A的小数点位置进行归一化。小数点移动的位置依赖于A的最大绝对值。其中，$i$是使得$max(\\mid u^\\prime \\mid) &lt; 1$的最小整数。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是voidAlex原创的第五篇博文。</p>\n</blockquote>\n<p>在数据挖掘的问题中，数据所用的度量单位可能会影响分析结果。使用较小的单位可能会导致该属性有较大的值域。为了避免这些问题，数据应该进行归一化（又称规范化或标准化）。归一化数据将会赋予所有属性相同的权重。常见的归一化方式有三种：最小-最大值归一化，z分数归一化，小数定标归一化。</p>","more":"<h2 id=\"最小-最大值归一化\"><a href=\"#最小-最大值归一化\" class=\"headerlink\" title=\"最小-最大值归一化\"></a>最小-最大值归一化</h2><p>$$<br>u^\\prime=\\frac<br>{u - min_A}<br>{max_A - min_A}(newmax_A - newmin_A) + newmin_A<br>$$</p>\n<p>其中，A是数值属性，$min_A$和$max_A$分别是属性A在该数据集中的最小和最大值。通过上述的计算即可把A的值映射到区间$[newmin_A, newmax_A]$中的$u^\\prime$。</p>\n<p>常用的最小-最大值区间为$[0, 1]$和$[-1, 1]$。使用最小-最大值归一化，如果今后的数据在原始数据的值域之外，将会产生越界错误。</p>\n<h2 id=\"z分数归一化\"><a href=\"#z分数归一化\" class=\"headerlink\" title=\"z分数归一化\"></a>z分数归一化</h2><p>$$<br>u^\\prime=\\frac<br>{u - \\overline{A}}<br>{\\sigma_A}<br>$$</p>\n<p>其中，$\\overline{A}$为属性A的均值，$\\sigma_A$为A的标准差。该方法在属性A的最大最小值未知或者有离群点的时候可用。</p>\n<h2 id=\"小数定标归一化\"><a href=\"#小数定标归一化\" class=\"headerlink\" title=\"小数定标归一化\"></a>小数定标归一化</h2><p>$$<br>u^\\prime=\\frac<br>{u}<br>{10^i}<br>$$</p>\n<p>该方法通过移动属性A的小数点位置进行归一化。小数点移动的位置依赖于A的最大绝对值。其中，$i$是使得$max(\\mid u^\\prime \\mid) &lt; 1$的最小整数。</p>"},{"title":"理解Docker中的三大核心概念：镜像、容器、仓库","date":"2017-11-05T07:17:27.000Z","_content":"> 这是voidAlex原创的第十三篇博文。\n<!-- more -->\n\n## 镜像\n\n Docker镜像（Image）是一个特殊的文件系统，里面包含了容器运行时所需要的程序、库、资源、配置等文件和一些为运行时准备的配置参数，如匿名卷、环境变量、用户等。之所以说他特殊是因为它不会包含任何动态数据，其内容在构建之后也不会被改变。镜像可以是一个完整是操作系统，可以是一个数据库，可以是一个服务器，甚至可以只是一个WEB应用。\n\n Docker中的镜像并非是一个像ISO文件那样的打包文件，镜像只是一个虚拟的概念，实际体现并非由一个文件组成，而是由一组文件组成，或者说由多层文件联合组成。镜像在构建时，会一层一层构建，前一层是后一层的基础。每一层构建完就不会发生改变，后一层上的任何改变只是发生在自己这一层。分层存储的特征使得镜像的复用、定制变得更为容易。\n\n## 容器\n\n容器（Container）的实质是进程，它是一个轻量级的沙箱，来隔离和运行应用。与直接在宿主机上执行的进程不同，容器的进程运行于自己独立的命名空间中。因此它可以拥有自己的进程空间、文件系统、网络空间、用户权限。容器内的进程运行在一个沙箱中，使用起来就好像一个独立于宿主的操作系统下操作一样。这种特性使得容器封装的应用运行更加安全。\n\n容器也使用分层存储。每个容器运行时都会以镜像为基础层，在其上创建一个当前容器的存储层。存储层的生命周期和容器一样，容器消亡时，容器存储层也会消亡。\n\n可以用面向对象程序设计中类和实例的关系来理解镜像和容器的关系。类和镜像都是静态的定义，容器和实例是运行时的实体，它们都可以被创建、删除，删除时，它们的数据也会随之消亡。\n\n容器所有的文件写入操作，都应该使用数据卷或者绑定宿主目录。数据卷的生命周期独立于容器，容器消亡，数据卷不会消亡。\n\n## 仓库\n\n仓库（Repository）类似于代码仓库，用来集中存储、分发镜像。根据所存储的镜像公开分享与否，仓库可以分为公开仓库和私有仓库。","source":"_posts/理解Docker中的三大核心概念：镜像、容器、仓库.md","raw":"---\ntitle: 理解Docker中的三大核心概念：镜像、容器、仓库\ndate: 2017-11-05 15:17:27\ntags: ['Docker']\n---\n> 这是voidAlex原创的第十三篇博文。\n<!-- more -->\n\n## 镜像\n\n Docker镜像（Image）是一个特殊的文件系统，里面包含了容器运行时所需要的程序、库、资源、配置等文件和一些为运行时准备的配置参数，如匿名卷、环境变量、用户等。之所以说他特殊是因为它不会包含任何动态数据，其内容在构建之后也不会被改变。镜像可以是一个完整是操作系统，可以是一个数据库，可以是一个服务器，甚至可以只是一个WEB应用。\n\n Docker中的镜像并非是一个像ISO文件那样的打包文件，镜像只是一个虚拟的概念，实际体现并非由一个文件组成，而是由一组文件组成，或者说由多层文件联合组成。镜像在构建时，会一层一层构建，前一层是后一层的基础。每一层构建完就不会发生改变，后一层上的任何改变只是发生在自己这一层。分层存储的特征使得镜像的复用、定制变得更为容易。\n\n## 容器\n\n容器（Container）的实质是进程，它是一个轻量级的沙箱，来隔离和运行应用。与直接在宿主机上执行的进程不同，容器的进程运行于自己独立的命名空间中。因此它可以拥有自己的进程空间、文件系统、网络空间、用户权限。容器内的进程运行在一个沙箱中，使用起来就好像一个独立于宿主的操作系统下操作一样。这种特性使得容器封装的应用运行更加安全。\n\n容器也使用分层存储。每个容器运行时都会以镜像为基础层，在其上创建一个当前容器的存储层。存储层的生命周期和容器一样，容器消亡时，容器存储层也会消亡。\n\n可以用面向对象程序设计中类和实例的关系来理解镜像和容器的关系。类和镜像都是静态的定义，容器和实例是运行时的实体，它们都可以被创建、删除，删除时，它们的数据也会随之消亡。\n\n容器所有的文件写入操作，都应该使用数据卷或者绑定宿主目录。数据卷的生命周期独立于容器，容器消亡，数据卷不会消亡。\n\n## 仓库\n\n仓库（Repository）类似于代码仓库，用来集中存储、分发镜像。根据所存储的镜像公开分享与否，仓库可以分为公开仓库和私有仓库。","slug":"理解Docker中的三大核心概念：镜像、容器、仓库","published":1,"updated":"2017-11-05T14:29:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhhhvn3r000s27xu9z9puyq5","content":"<blockquote>\n<p>这是voidAlex原创的第十三篇博文。<br><a id=\"more\"></a></p>\n</blockquote>\n<h2 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h2><p> Docker镜像（Image）是一个特殊的文件系统，里面包含了容器运行时所需要的程序、库、资源、配置等文件和一些为运行时准备的配置参数，如匿名卷、环境变量、用户等。之所以说他特殊是因为它不会包含任何动态数据，其内容在构建之后也不会被改变。镜像可以是一个完整是操作系统，可以是一个数据库，可以是一个服务器，甚至可以只是一个WEB应用。</p>\n<p> Docker中的镜像并非是一个像ISO文件那样的打包文件，镜像只是一个虚拟的概念，实际体现并非由一个文件组成，而是由一组文件组成，或者说由多层文件联合组成。镜像在构建时，会一层一层构建，前一层是后一层的基础。每一层构建完就不会发生改变，后一层上的任何改变只是发生在自己这一层。分层存储的特征使得镜像的复用、定制变得更为容易。</p>\n<h2 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h2><p>容器（Container）的实质是进程，它是一个轻量级的沙箱，来隔离和运行应用。与直接在宿主机上执行的进程不同，容器的进程运行于自己独立的命名空间中。因此它可以拥有自己的进程空间、文件系统、网络空间、用户权限。容器内的进程运行在一个沙箱中，使用起来就好像一个独立于宿主的操作系统下操作一样。这种特性使得容器封装的应用运行更加安全。</p>\n<p>容器也使用分层存储。每个容器运行时都会以镜像为基础层，在其上创建一个当前容器的存储层。存储层的生命周期和容器一样，容器消亡时，容器存储层也会消亡。</p>\n<p>可以用面向对象程序设计中类和实例的关系来理解镜像和容器的关系。类和镜像都是静态的定义，容器和实例是运行时的实体，它们都可以被创建、删除，删除时，它们的数据也会随之消亡。</p>\n<p>容器所有的文件写入操作，都应该使用数据卷或者绑定宿主目录。数据卷的生命周期独立于容器，容器消亡，数据卷不会消亡。</p>\n<h2 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h2><p>仓库（Repository）类似于代码仓库，用来集中存储、分发镜像。根据所存储的镜像公开分享与否，仓库可以分为公开仓库和私有仓库。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是voidAlex原创的第十三篇博文。<br>","more":"</p>\n</blockquote>\n<h2 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h2><p> Docker镜像（Image）是一个特殊的文件系统，里面包含了容器运行时所需要的程序、库、资源、配置等文件和一些为运行时准备的配置参数，如匿名卷、环境变量、用户等。之所以说他特殊是因为它不会包含任何动态数据，其内容在构建之后也不会被改变。镜像可以是一个完整是操作系统，可以是一个数据库，可以是一个服务器，甚至可以只是一个WEB应用。</p>\n<p> Docker中的镜像并非是一个像ISO文件那样的打包文件，镜像只是一个虚拟的概念，实际体现并非由一个文件组成，而是由一组文件组成，或者说由多层文件联合组成。镜像在构建时，会一层一层构建，前一层是后一层的基础。每一层构建完就不会发生改变，后一层上的任何改变只是发生在自己这一层。分层存储的特征使得镜像的复用、定制变得更为容易。</p>\n<h2 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h2><p>容器（Container）的实质是进程，它是一个轻量级的沙箱，来隔离和运行应用。与直接在宿主机上执行的进程不同，容器的进程运行于自己独立的命名空间中。因此它可以拥有自己的进程空间、文件系统、网络空间、用户权限。容器内的进程运行在一个沙箱中，使用起来就好像一个独立于宿主的操作系统下操作一样。这种特性使得容器封装的应用运行更加安全。</p>\n<p>容器也使用分层存储。每个容器运行时都会以镜像为基础层，在其上创建一个当前容器的存储层。存储层的生命周期和容器一样，容器消亡时，容器存储层也会消亡。</p>\n<p>可以用面向对象程序设计中类和实例的关系来理解镜像和容器的关系。类和镜像都是静态的定义，容器和实例是运行时的实体，它们都可以被创建、删除，删除时，它们的数据也会随之消亡。</p>\n<p>容器所有的文件写入操作，都应该使用数据卷或者绑定宿主目录。数据卷的生命周期独立于容器，容器消亡，数据卷不会消亡。</p>\n<h2 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h2><p>仓库（Repository）类似于代码仓库，用来集中存储、分发镜像。根据所存储的镜像公开分享与否，仓库可以分为公开仓库和私有仓库。</p>"},{"title":"理解Spring中的依赖注入","date":"2017-11-09T12:55:00.000Z","_content":"> 这是voidAlex原创的第十七篇博文。\n<!-- more -->\n\n## 依赖注入和控制翻转\n\n`IoC`(Inversion of Control，控制翻转)和`DI`(Dependency Injection，依赖注入)在Spring下是同等的概念。控制翻转是通过依赖注入来实现的。依赖注入是指由容器负责创建对象和负责维护对象间的依赖关系，从而实现解耦，体现一种组合的理念。\n\n任何一个实际的应用，都会由两个或者更多的类组成。这些类之间相互调用以完成特定的业务逻辑。每个对象负责管理和调用与自己相互协作的对象，这会导致高度耦合的代码。\n\n耦合具有两面性。一方面，高度耦合的代码将会难以测试，难以复用，难以理解，并且会表现出“打地鼠”式的bug特性（修复一个bug，又出现更多的新bug）。但是，一定程度的耦合又是必须的，完全没有耦合的代码什么也做不了。为了完成特定的功能，不同的代码之间必须进行交互。\n\n通过依赖注入，创建被调用者的工作不再由调用者来完成，而是由Spring容器来完成，然后注入到调用者。这也意味着，当需要切换依赖的时候，不需要改变调用者的代码。依赖关系将被自动注入到需要它们的对象当中去。\n\n知乎上有个回答，总结的相当到位。原文点[这里](https://www.zhihu.com/question/27053548/answer/113488399)。\n\n![](http://osuro1ft2.bkt.clouddn.com//17-11-10/77388616.jpg)\n\n## 实例\n\n### 传统的做法\n\n考虑下面代码：\n\n```Java\npublic class JayChouCD {\n    public void play();\n}\n\npublic class CDPlayer {\n    private JayChouCD cd;\n\n    public void playCD() {\n        this.cd = new JayChouCD();\n        this.cd.play();\n    }\n}\n```\n\n我们有一个CD机，它需要一张CD才能够播放，或者说，`CDPlayer`依赖于`CD`。在上面的代码中，我们直接通过`new`关键字给`CDPlayer`创建了一个`JayChouCD`的实例，这样我们就能在这个CD机上听周杰伦的歌了。\n\n### 面向接口编程\n\n但是，这样做，我们能够听的歌十分有限，只能在这个CD机上听周杰伦的CD。考虑使用面向接口的编程方式改写上面的代码：\n\n```java\npublic interface CD {\n    void play();\n}\n\npublic class CDPlayer {\n    private CD cd;\n\n    public void playCD() {\n        this.cd = new JayChouCD();\n        this.cd.play();\n    }\n}\n```\n\n与CD机直接打交道的类变成了`CD`，即使它最终实现依然是`JayChouCD`，但是这样做已经有明显的好处，所有调用都通过接口`CD`来完成。需要替换`JayChouCD`类，想听其他人的歌时，也只需要修改`CD`指向新的实现类。\n\n### 动态生成对象\n\n虽然上述代码已经很大程度的降低了耦合，但是耦合依然存在。想听其他人的歌曲时依然需要修改`CDPlayer`类内部的代码。当依赖过多的时候，修改起来会相当的麻烦。考虑通过反射机制中的动态加载类来修改上述代码：\n\n```java\npublic interface CD {\n    void play();\n}\n\npublic class CDPlayer() {\n    private static String CLASS_NAME = \"JayChouCD\";\n\n    private CD cd;\n\n    public void playCD() {\n        Class class = Class.forName(CLASS_NAME);\n\n        this.cd = (CD) class.newInstance();\n        this.cd.play();\n    }\n}\n```\n\n这样，我们动态的得到了`CD`的实例，不必每次都为听谁的歌而苦恼了，只需要告诉CD机类名即可。获得类名可以通过配置文件去实现。这样我们就实现了`CD`和`CDPlayer`间的解耦。实际上，Spring中DI的底层就是通过反射机制来实现的。\n\n### 使用Spring的DI\n\n Spring支持使用`xml`、`Java Config`和注解去装配Bena。Spring Boot推荐使用注解和`Java Config`的方式。使用Spring Boot的方式继续改造上面的代码：\n\n ```java\npublic interface CD {\n    void play();\n}\n\n\n@Component\npublic class JayChouCD implements CD {\n    private String title = \"哎呦，不错哦！\";\n\n    public void play() {\n        System.out.println(title);\n    }\n}\n\n\npublic class CDPlayer() {\n    @Autowired\n    private CD cd;\n\n    public void playCD() {\n        this.cd.play();\n    }\n}\n\n ```\n\n 首先使用`@Component`注解告诉Spring，这个类是一个让你进行管理的bean，这意味着在其他类中可以通过Spring的依赖注入来得到它的实例。所以，在`CDPlayer`类中，我们使用了`@Autowired`注解，来将一个`CD`注入到`CDPlayer`中。\n\n Spring中，所有的Bean都通过IoC容器（ApplicationContext）来创建，并负责注入到需要的bean中。Spring Boot中，有四种常用的声明Bena的注解：\n\n >* `@Component`：组件，没有明确的角色\n >* `@Service`：在业务逻辑层使用（Service层）\n >* `@Repository`：在数据访问层使用（dao层）\n >* `@Controller`：在展现层使用（MVC）\n\n 注入Bena的注解，一般情况下通用：\n\n >* `@Autowried`：Spring提供的注解\n >* `@Inject`\n >* `@Resource`\n\n 这三个注解都可以用在属性、`set`方法、构造方法上。\n\n ## 总结\n\n 一句话：控制翻转是将对象的创建权翻转给Spring，依赖注入是在Spring创建对象的过程中，把对象依赖的属性注入到类中。控制翻转是通过依赖注入来实现的。\n\n ## 参考资料\n\n 《精通Spring 4.x 企业应用开发实战》\n\n 《Spring实战》\n\n [CSND博客：关于Spring IOC (DI-依赖注入)你需要知道的一切](http://blog.csdn.net/javazejian/article/details/54561302)","source":"_posts/理解Spring中的依赖注入.md","raw":"---\ntitle: 理解Spring中的依赖注入\ntags: ['Java', 'Spring']\ndate: 2017-11-09 20:55:00\n---\n> 这是voidAlex原创的第十七篇博文。\n<!-- more -->\n\n## 依赖注入和控制翻转\n\n`IoC`(Inversion of Control，控制翻转)和`DI`(Dependency Injection，依赖注入)在Spring下是同等的概念。控制翻转是通过依赖注入来实现的。依赖注入是指由容器负责创建对象和负责维护对象间的依赖关系，从而实现解耦，体现一种组合的理念。\n\n任何一个实际的应用，都会由两个或者更多的类组成。这些类之间相互调用以完成特定的业务逻辑。每个对象负责管理和调用与自己相互协作的对象，这会导致高度耦合的代码。\n\n耦合具有两面性。一方面，高度耦合的代码将会难以测试，难以复用，难以理解，并且会表现出“打地鼠”式的bug特性（修复一个bug，又出现更多的新bug）。但是，一定程度的耦合又是必须的，完全没有耦合的代码什么也做不了。为了完成特定的功能，不同的代码之间必须进行交互。\n\n通过依赖注入，创建被调用者的工作不再由调用者来完成，而是由Spring容器来完成，然后注入到调用者。这也意味着，当需要切换依赖的时候，不需要改变调用者的代码。依赖关系将被自动注入到需要它们的对象当中去。\n\n知乎上有个回答，总结的相当到位。原文点[这里](https://www.zhihu.com/question/27053548/answer/113488399)。\n\n![](http://osuro1ft2.bkt.clouddn.com//17-11-10/77388616.jpg)\n\n## 实例\n\n### 传统的做法\n\n考虑下面代码：\n\n```Java\npublic class JayChouCD {\n    public void play();\n}\n\npublic class CDPlayer {\n    private JayChouCD cd;\n\n    public void playCD() {\n        this.cd = new JayChouCD();\n        this.cd.play();\n    }\n}\n```\n\n我们有一个CD机，它需要一张CD才能够播放，或者说，`CDPlayer`依赖于`CD`。在上面的代码中，我们直接通过`new`关键字给`CDPlayer`创建了一个`JayChouCD`的实例，这样我们就能在这个CD机上听周杰伦的歌了。\n\n### 面向接口编程\n\n但是，这样做，我们能够听的歌十分有限，只能在这个CD机上听周杰伦的CD。考虑使用面向接口的编程方式改写上面的代码：\n\n```java\npublic interface CD {\n    void play();\n}\n\npublic class CDPlayer {\n    private CD cd;\n\n    public void playCD() {\n        this.cd = new JayChouCD();\n        this.cd.play();\n    }\n}\n```\n\n与CD机直接打交道的类变成了`CD`，即使它最终实现依然是`JayChouCD`，但是这样做已经有明显的好处，所有调用都通过接口`CD`来完成。需要替换`JayChouCD`类，想听其他人的歌时，也只需要修改`CD`指向新的实现类。\n\n### 动态生成对象\n\n虽然上述代码已经很大程度的降低了耦合，但是耦合依然存在。想听其他人的歌曲时依然需要修改`CDPlayer`类内部的代码。当依赖过多的时候，修改起来会相当的麻烦。考虑通过反射机制中的动态加载类来修改上述代码：\n\n```java\npublic interface CD {\n    void play();\n}\n\npublic class CDPlayer() {\n    private static String CLASS_NAME = \"JayChouCD\";\n\n    private CD cd;\n\n    public void playCD() {\n        Class class = Class.forName(CLASS_NAME);\n\n        this.cd = (CD) class.newInstance();\n        this.cd.play();\n    }\n}\n```\n\n这样，我们动态的得到了`CD`的实例，不必每次都为听谁的歌而苦恼了，只需要告诉CD机类名即可。获得类名可以通过配置文件去实现。这样我们就实现了`CD`和`CDPlayer`间的解耦。实际上，Spring中DI的底层就是通过反射机制来实现的。\n\n### 使用Spring的DI\n\n Spring支持使用`xml`、`Java Config`和注解去装配Bena。Spring Boot推荐使用注解和`Java Config`的方式。使用Spring Boot的方式继续改造上面的代码：\n\n ```java\npublic interface CD {\n    void play();\n}\n\n\n@Component\npublic class JayChouCD implements CD {\n    private String title = \"哎呦，不错哦！\";\n\n    public void play() {\n        System.out.println(title);\n    }\n}\n\n\npublic class CDPlayer() {\n    @Autowired\n    private CD cd;\n\n    public void playCD() {\n        this.cd.play();\n    }\n}\n\n ```\n\n 首先使用`@Component`注解告诉Spring，这个类是一个让你进行管理的bean，这意味着在其他类中可以通过Spring的依赖注入来得到它的实例。所以，在`CDPlayer`类中，我们使用了`@Autowired`注解，来将一个`CD`注入到`CDPlayer`中。\n\n Spring中，所有的Bean都通过IoC容器（ApplicationContext）来创建，并负责注入到需要的bean中。Spring Boot中，有四种常用的声明Bena的注解：\n\n >* `@Component`：组件，没有明确的角色\n >* `@Service`：在业务逻辑层使用（Service层）\n >* `@Repository`：在数据访问层使用（dao层）\n >* `@Controller`：在展现层使用（MVC）\n\n 注入Bena的注解，一般情况下通用：\n\n >* `@Autowried`：Spring提供的注解\n >* `@Inject`\n >* `@Resource`\n\n 这三个注解都可以用在属性、`set`方法、构造方法上。\n\n ## 总结\n\n 一句话：控制翻转是将对象的创建权翻转给Spring，依赖注入是在Spring创建对象的过程中，把对象依赖的属性注入到类中。控制翻转是通过依赖注入来实现的。\n\n ## 参考资料\n\n 《精通Spring 4.x 企业应用开发实战》\n\n 《Spring实战》\n\n [CSND博客：关于Spring IOC (DI-依赖注入)你需要知道的一切](http://blog.csdn.net/javazejian/article/details/54561302)","slug":"理解Spring中的依赖注入","published":1,"updated":"2017-11-10T09:24:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhhhvn3t000u27xudu0323p1","content":"<blockquote>\n<p>这是voidAlex原创的第十七篇博文。<br><a id=\"more\"></a></p>\n</blockquote>\n<h2 id=\"依赖注入和控制翻转\"><a href=\"#依赖注入和控制翻转\" class=\"headerlink\" title=\"依赖注入和控制翻转\"></a>依赖注入和控制翻转</h2><p><code>IoC</code>(Inversion of Control，控制翻转)和<code>DI</code>(Dependency Injection，依赖注入)在Spring下是同等的概念。控制翻转是通过依赖注入来实现的。依赖注入是指由容器负责创建对象和负责维护对象间的依赖关系，从而实现解耦，体现一种组合的理念。</p>\n<p>任何一个实际的应用，都会由两个或者更多的类组成。这些类之间相互调用以完成特定的业务逻辑。每个对象负责管理和调用与自己相互协作的对象，这会导致高度耦合的代码。</p>\n<p>耦合具有两面性。一方面，高度耦合的代码将会难以测试，难以复用，难以理解，并且会表现出“打地鼠”式的bug特性（修复一个bug，又出现更多的新bug）。但是，一定程度的耦合又是必须的，完全没有耦合的代码什么也做不了。为了完成特定的功能，不同的代码之间必须进行交互。</p>\n<p>通过依赖注入，创建被调用者的工作不再由调用者来完成，而是由Spring容器来完成，然后注入到调用者。这也意味着，当需要切换依赖的时候，不需要改变调用者的代码。依赖关系将被自动注入到需要它们的对象当中去。</p>\n<p>知乎上有个回答，总结的相当到位。原文点<a href=\"https://www.zhihu.com/question/27053548/answer/113488399\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://osuro1ft2.bkt.clouddn.com//17-11-10/77388616.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><h3 id=\"传统的做法\"><a href=\"#传统的做法\" class=\"headerlink\" title=\"传统的做法\"></a>传统的做法</h3><p>考虑下面代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JayChouCD</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CDPlayer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> JayChouCD cd;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">playCD</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.cd = <span class=\"keyword\">new</span> JayChouCD();</div><div class=\"line\">        <span class=\"keyword\">this</span>.cd.play();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们有一个CD机，它需要一张CD才能够播放，或者说，<code>CDPlayer</code>依赖于<code>CD</code>。在上面的代码中，我们直接通过<code>new</code>关键字给<code>CDPlayer</code>创建了一个<code>JayChouCD</code>的实例，这样我们就能在这个CD机上听周杰伦的歌了。</p>\n<h3 id=\"面向接口编程\"><a href=\"#面向接口编程\" class=\"headerlink\" title=\"面向接口编程\"></a>面向接口编程</h3><p>但是，这样做，我们能够听的歌十分有限，只能在这个CD机上听周杰伦的CD。考虑使用面向接口的编程方式改写上面的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CD</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CDPlayer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> CD cd;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">playCD</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.cd = <span class=\"keyword\">new</span> JayChouCD();</div><div class=\"line\">        <span class=\"keyword\">this</span>.cd.play();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>与CD机直接打交道的类变成了<code>CD</code>，即使它最终实现依然是<code>JayChouCD</code>，但是这样做已经有明显的好处，所有调用都通过接口<code>CD</code>来完成。需要替换<code>JayChouCD</code>类，想听其他人的歌时，也只需要修改<code>CD</code>指向新的实现类。</p>\n<h3 id=\"动态生成对象\"><a href=\"#动态生成对象\" class=\"headerlink\" title=\"动态生成对象\"></a>动态生成对象</h3><p>虽然上述代码已经很大程度的降低了耦合，但是耦合依然存在。想听其他人的歌曲时依然需要修改<code>CDPlayer</code>类内部的代码。当依赖过多的时候，修改起来会相当的麻烦。考虑通过反射机制中的动态加载类来修改上述代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CD</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> class <span class=\"title\">CDPlayer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String CLASS_NAME = <span class=\"string\">\"JayChouCD\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> CD cd;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">playCD</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Class <span class=\"class\"><span class=\"keyword\">class</span> </span>= Class.forName(CLASS_NAME);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.cd = (CD) <span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">newInstance</span>()</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.cd.play();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样，我们动态的得到了<code>CD</code>的实例，不必每次都为听谁的歌而苦恼了，只需要告诉CD机类名即可。获得类名可以通过配置文件去实现。这样我们就实现了<code>CD</code>和<code>CDPlayer</code>间的解耦。实际上，Spring中DI的底层就是通过反射机制来实现的。</p>\n<h3 id=\"使用Spring的DI\"><a href=\"#使用Spring的DI\" class=\"headerlink\" title=\"使用Spring的DI\"></a>使用Spring的DI</h3><p> Spring支持使用<code>xml</code>、<code>Java Config</code>和注解去装配Bena。Spring Boot推荐使用注解和<code>Java Config</code>的方式。使用Spring Boot的方式继续改造上面的代码：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CD</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Component</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JayChouCD</span> <span class=\"keyword\">implements</span> <span class=\"title\">CD</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String title = <span class=\"string\">\"哎呦，不错哦！\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(title);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> class <span class=\"title\">CDPlayer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    <span class=\"keyword\">private</span> CD cd;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">playCD</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.cd.play();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 首先使用<code>@Component</code>注解告诉Spring，这个类是一个让你进行管理的bean，这意味着在其他类中可以通过Spring的依赖注入来得到它的实例。所以，在<code>CDPlayer</code>类中，我们使用了<code>@Autowired</code>注解，来将一个<code>CD</code>注入到<code>CDPlayer</code>中。</p>\n<p> Spring中，所有的Bean都通过IoC容器（ApplicationContext）来创建，并负责注入到需要的bean中。Spring Boot中，有四种常用的声明Bena的注解：</p>\n<blockquote>\n<ul>\n<li><code>@Component</code>：组件，没有明确的角色</li>\n<li><code>@Service</code>：在业务逻辑层使用（Service层）</li>\n<li><code>@Repository</code>：在数据访问层使用（dao层）</li>\n<li><code>@Controller</code>：在展现层使用（MVC）</li>\n</ul>\n</blockquote>\n<p> 注入Bena的注解，一般情况下通用：</p>\n<blockquote>\n<ul>\n<li><code>@Autowried</code>：Spring提供的注解</li>\n<li><code>@Inject</code></li>\n<li><code>@Resource</code></li>\n</ul>\n</blockquote>\n<p> 这三个注解都可以用在属性、<code>set</code>方法、构造方法上。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p> 一句话：控制翻转是将对象的创建权翻转给Spring，依赖注入是在Spring创建对象的过程中，把对象依赖的属性注入到类中。控制翻转是通过依赖注入来实现的。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p> 《精通Spring 4.x 企业应用开发实战》</p>\n<p> 《Spring实战》</p>\n<p> <a href=\"http://blog.csdn.net/javazejian/article/details/54561302\" target=\"_blank\" rel=\"noopener\">CSND博客：关于Spring IOC (DI-依赖注入)你需要知道的一切</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是voidAlex原创的第十七篇博文。<br>","more":"</p>\n</blockquote>\n<h2 id=\"依赖注入和控制翻转\"><a href=\"#依赖注入和控制翻转\" class=\"headerlink\" title=\"依赖注入和控制翻转\"></a>依赖注入和控制翻转</h2><p><code>IoC</code>(Inversion of Control，控制翻转)和<code>DI</code>(Dependency Injection，依赖注入)在Spring下是同等的概念。控制翻转是通过依赖注入来实现的。依赖注入是指由容器负责创建对象和负责维护对象间的依赖关系，从而实现解耦，体现一种组合的理念。</p>\n<p>任何一个实际的应用，都会由两个或者更多的类组成。这些类之间相互调用以完成特定的业务逻辑。每个对象负责管理和调用与自己相互协作的对象，这会导致高度耦合的代码。</p>\n<p>耦合具有两面性。一方面，高度耦合的代码将会难以测试，难以复用，难以理解，并且会表现出“打地鼠”式的bug特性（修复一个bug，又出现更多的新bug）。但是，一定程度的耦合又是必须的，完全没有耦合的代码什么也做不了。为了完成特定的功能，不同的代码之间必须进行交互。</p>\n<p>通过依赖注入，创建被调用者的工作不再由调用者来完成，而是由Spring容器来完成，然后注入到调用者。这也意味着，当需要切换依赖的时候，不需要改变调用者的代码。依赖关系将被自动注入到需要它们的对象当中去。</p>\n<p>知乎上有个回答，总结的相当到位。原文点<a href=\"https://www.zhihu.com/question/27053548/answer/113488399\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://osuro1ft2.bkt.clouddn.com//17-11-10/77388616.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><h3 id=\"传统的做法\"><a href=\"#传统的做法\" class=\"headerlink\" title=\"传统的做法\"></a>传统的做法</h3><p>考虑下面代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JayChouCD</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CDPlayer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> JayChouCD cd;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">playCD</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.cd = <span class=\"keyword\">new</span> JayChouCD();</div><div class=\"line\">        <span class=\"keyword\">this</span>.cd.play();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们有一个CD机，它需要一张CD才能够播放，或者说，<code>CDPlayer</code>依赖于<code>CD</code>。在上面的代码中，我们直接通过<code>new</code>关键字给<code>CDPlayer</code>创建了一个<code>JayChouCD</code>的实例，这样我们就能在这个CD机上听周杰伦的歌了。</p>\n<h3 id=\"面向接口编程\"><a href=\"#面向接口编程\" class=\"headerlink\" title=\"面向接口编程\"></a>面向接口编程</h3><p>但是，这样做，我们能够听的歌十分有限，只能在这个CD机上听周杰伦的CD。考虑使用面向接口的编程方式改写上面的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CD</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CDPlayer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> CD cd;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">playCD</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.cd = <span class=\"keyword\">new</span> JayChouCD();</div><div class=\"line\">        <span class=\"keyword\">this</span>.cd.play();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>与CD机直接打交道的类变成了<code>CD</code>，即使它最终实现依然是<code>JayChouCD</code>，但是这样做已经有明显的好处，所有调用都通过接口<code>CD</code>来完成。需要替换<code>JayChouCD</code>类，想听其他人的歌时，也只需要修改<code>CD</code>指向新的实现类。</p>\n<h3 id=\"动态生成对象\"><a href=\"#动态生成对象\" class=\"headerlink\" title=\"动态生成对象\"></a>动态生成对象</h3><p>虽然上述代码已经很大程度的降低了耦合，但是耦合依然存在。想听其他人的歌曲时依然需要修改<code>CDPlayer</code>类内部的代码。当依赖过多的时候，修改起来会相当的麻烦。考虑通过反射机制中的动态加载类来修改上述代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CD</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> class <span class=\"title\">CDPlayer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String CLASS_NAME = <span class=\"string\">\"JayChouCD\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> CD cd;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">playCD</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Class <span class=\"class\"><span class=\"keyword\">class</span> </span>= Class.forName(CLASS_NAME);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.cd = (CD) <span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">newInstance</span>()</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.cd.play();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样，我们动态的得到了<code>CD</code>的实例，不必每次都为听谁的歌而苦恼了，只需要告诉CD机类名即可。获得类名可以通过配置文件去实现。这样我们就实现了<code>CD</code>和<code>CDPlayer</code>间的解耦。实际上，Spring中DI的底层就是通过反射机制来实现的。</p>\n<h3 id=\"使用Spring的DI\"><a href=\"#使用Spring的DI\" class=\"headerlink\" title=\"使用Spring的DI\"></a>使用Spring的DI</h3><p> Spring支持使用<code>xml</code>、<code>Java Config</code>和注解去装配Bena。Spring Boot推荐使用注解和<code>Java Config</code>的方式。使用Spring Boot的方式继续改造上面的代码：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CD</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Component</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JayChouCD</span> <span class=\"keyword\">implements</span> <span class=\"title\">CD</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String title = <span class=\"string\">\"哎呦，不错哦！\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(title);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> class <span class=\"title\">CDPlayer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    <span class=\"keyword\">private</span> CD cd;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">playCD</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.cd.play();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 首先使用<code>@Component</code>注解告诉Spring，这个类是一个让你进行管理的bean，这意味着在其他类中可以通过Spring的依赖注入来得到它的实例。所以，在<code>CDPlayer</code>类中，我们使用了<code>@Autowired</code>注解，来将一个<code>CD</code>注入到<code>CDPlayer</code>中。</p>\n<p> Spring中，所有的Bean都通过IoC容器（ApplicationContext）来创建，并负责注入到需要的bean中。Spring Boot中，有四种常用的声明Bena的注解：</p>\n<blockquote>\n<ul>\n<li><code>@Component</code>：组件，没有明确的角色</li>\n<li><code>@Service</code>：在业务逻辑层使用（Service层）</li>\n<li><code>@Repository</code>：在数据访问层使用（dao层）</li>\n<li><code>@Controller</code>：在展现层使用（MVC）</li>\n</ul>\n</blockquote>\n<p> 注入Bena的注解，一般情况下通用：</p>\n<blockquote>\n<ul>\n<li><code>@Autowried</code>：Spring提供的注解</li>\n<li><code>@Inject</code></li>\n<li><code>@Resource</code></li>\n</ul>\n</blockquote>\n<p> 这三个注解都可以用在属性、<code>set</code>方法、构造方法上。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p> 一句话：控制翻转是将对象的创建权翻转给Spring，依赖注入是在Spring创建对象的过程中，把对象依赖的属性注入到类中。控制翻转是通过依赖注入来实现的。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p> 《精通Spring 4.x 企业应用开发实战》</p>\n<p> 《Spring实战》</p>\n<p> <a href=\"http://blog.csdn.net/javazejian/article/details/54561302\" target=\"_blank\" rel=\"noopener\">CSND博客：关于Spring IOC (DI-依赖注入)你需要知道的一切</a></p>"},{"title":"算法笔记：K-means算法及Java实现","date":"2017-08-20T02:53:36.000Z","mathjax":true,"_content":"> 这是voidAlex原创的第六篇博文。\n> 源码在[我的GitHub](https://github.com/voidAlex)\n\n物以类聚，人以群分，人如此，聚类亦如此。\n<!-- more -->\n\n挖坑待填……","source":"_posts/算法笔记：K-means算法及Java实现.md","raw":"---\ntitle: 算法笔记：K-means算法及Java实现\ndate: 2017-08-20 10:53:36\ntags: ['算法','机器学习','Java']\nmathjax: true\n---\n> 这是voidAlex原创的第六篇博文。\n> 源码在[我的GitHub](https://github.com/voidAlex)\n\n物以类聚，人以群分，人如此，聚类亦如此。\n<!-- more -->\n\n挖坑待填……","slug":"算法笔记：K-means算法及Java实现","published":1,"updated":"2017-08-23T02:13:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhhhvn3x000w27xumcbmjg5n","content":"<blockquote>\n<p>这是voidAlex原创的第六篇博文。<br>源码在<a href=\"https://github.com/voidAlex\" target=\"_blank\" rel=\"noopener\">我的GitHub</a></p>\n</blockquote>\n<p>物以类聚，人以群分，人如此，聚类亦如此。<br><a id=\"more\"></a></p>\n<p>挖坑待填……</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是voidAlex原创的第六篇博文。<br>源码在<a href=\"https://github.com/voidAlex\" target=\"_blank\" rel=\"noopener\">我的GitHub</a></p>\n</blockquote>\n<p>物以类聚，人以群分，人如此，聚类亦如此。<br>","more":"</p>\n<p>挖坑待填……</p>"},{"title":"算法笔记：Top-N算法及Java实现","date":"2017-08-21T15:17:43.000Z","mathjax":true,"_content":"> 这是voidAlex原创的第七篇博文。\n\n给定一组无序的数据，需要创建一个最大的N条记录的列表，这类问题是经典的Top-N问题。\n\n<!-- more -->\n\n系统中常常会有这样的需求：将大量的（几百万甚至上千万）的数据排序,然后取出最Top的N条作为展示。常见的解决方案如下：\n\n1. 使用传统的排序算法，即使用List中的Sort方法排序，然后取出前N个。最坏时间复杂度达到了$O(n^2)$;\n2. 维护一个容量为N的最大堆或者排序二叉树，遍历整个List，取出前面的N个放到堆里。最坏时间复杂度为$O(nlogN)$。\n\n使用Java集合类中的`TreeMap`可以很容易的实现一个Top-N算法：维护一个大小为N的`TreeMap`topN，遍历所有数据，并将其添加到topN中。如果`topN.size() > N`，就删除topN的第一个元素（值最小的元素）。\n\n以下是示例代码：\n\n```Java\nprivate SortedMap<Double, String> topN(int n, List l){\n    SortedMap<Double, String> topN = null;\n    if (l != null && !l.isEmpty()){\n        topN = new TreeMap<Double, String>();\n\n        for (DataNode dataNode : l){\n            topN.put(dataNode.getValue(),dataNode.getkey());\n            if (topN.size() > n){\n                topN.remove(topN.firstKey());\n            }\n        }\n    }\n    return topN;\n}\n```","source":"_posts/算法笔记：Top-N算法及Java实现.md","raw":"---\ntitle: 算法笔记：Top-N算法及Java实现\ndate: 2017-08-21 23:17:43\ntags: ['算法','排序','Java']\nmathjax: true\n---\n> 这是voidAlex原创的第七篇博文。\n\n给定一组无序的数据，需要创建一个最大的N条记录的列表，这类问题是经典的Top-N问题。\n\n<!-- more -->\n\n系统中常常会有这样的需求：将大量的（几百万甚至上千万）的数据排序,然后取出最Top的N条作为展示。常见的解决方案如下：\n\n1. 使用传统的排序算法，即使用List中的Sort方法排序，然后取出前N个。最坏时间复杂度达到了$O(n^2)$;\n2. 维护一个容量为N的最大堆或者排序二叉树，遍历整个List，取出前面的N个放到堆里。最坏时间复杂度为$O(nlogN)$。\n\n使用Java集合类中的`TreeMap`可以很容易的实现一个Top-N算法：维护一个大小为N的`TreeMap`topN，遍历所有数据，并将其添加到topN中。如果`topN.size() > N`，就删除topN的第一个元素（值最小的元素）。\n\n以下是示例代码：\n\n```Java\nprivate SortedMap<Double, String> topN(int n, List l){\n    SortedMap<Double, String> topN = null;\n    if (l != null && !l.isEmpty()){\n        topN = new TreeMap<Double, String>();\n\n        for (DataNode dataNode : l){\n            topN.put(dataNode.getValue(),dataNode.getkey());\n            if (topN.size() > n){\n                topN.remove(topN.firstKey());\n            }\n        }\n    }\n    return topN;\n}\n```","slug":"算法笔记：Top-N算法及Java实现","published":1,"updated":"2017-11-10T09:30:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhhhvn40000y27xuuqg66v0e","content":"<blockquote>\n<p>这是voidAlex原创的第七篇博文。</p>\n</blockquote>\n<p>给定一组无序的数据，需要创建一个最大的N条记录的列表，这类问题是经典的Top-N问题。</p>\n<a id=\"more\"></a>\n<p>系统中常常会有这样的需求：将大量的（几百万甚至上千万）的数据排序,然后取出最Top的N条作为展示。常见的解决方案如下：</p>\n<ol>\n<li>使用传统的排序算法，即使用List中的Sort方法排序，然后取出前N个。最坏时间复杂度达到了$O(n^2)$;</li>\n<li>维护一个容量为N的最大堆或者排序二叉树，遍历整个List，取出前面的N个放到堆里。最坏时间复杂度为$O(nlogN)$。</li>\n</ol>\n<p>使用Java集合类中的<code>TreeMap</code>可以很容易的实现一个Top-N算法：维护一个大小为N的<code>TreeMap</code>topN，遍历所有数据，并将其添加到topN中。如果<code>topN.size() &gt; N</code>，就删除topN的第一个元素（值最小的元素）。</p>\n<p>以下是示例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> SortedMap&lt;Double, String&gt; <span class=\"title\">topN</span><span class=\"params\">(<span class=\"keyword\">int</span> n, List l)</span></span>&#123;</div><div class=\"line\">    SortedMap&lt;Double, String&gt; topN = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (l != <span class=\"keyword\">null</span> &amp;&amp; !l.isEmpty())&#123;</div><div class=\"line\">        topN = <span class=\"keyword\">new</span> TreeMap&lt;Double, String&gt;();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (DataNode dataNode : l)&#123;</div><div class=\"line\">            topN.put(dataNode.getValue(),dataNode.getkey());</div><div class=\"line\">            <span class=\"keyword\">if</span> (topN.size() &gt; n)&#123;</div><div class=\"line\">                topN.remove(topN.firstKey());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> topN;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是voidAlex原创的第七篇博文。</p>\n</blockquote>\n<p>给定一组无序的数据，需要创建一个最大的N条记录的列表，这类问题是经典的Top-N问题。</p>","more":"<p>系统中常常会有这样的需求：将大量的（几百万甚至上千万）的数据排序,然后取出最Top的N条作为展示。常见的解决方案如下：</p>\n<ol>\n<li>使用传统的排序算法，即使用List中的Sort方法排序，然后取出前N个。最坏时间复杂度达到了$O(n^2)$;</li>\n<li>维护一个容量为N的最大堆或者排序二叉树，遍历整个List，取出前面的N个放到堆里。最坏时间复杂度为$O(nlogN)$。</li>\n</ol>\n<p>使用Java集合类中的<code>TreeMap</code>可以很容易的实现一个Top-N算法：维护一个大小为N的<code>TreeMap</code>topN，遍历所有数据，并将其添加到topN中。如果<code>topN.size() &gt; N</code>，就删除topN的第一个元素（值最小的元素）。</p>\n<p>以下是示例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> SortedMap&lt;Double, String&gt; <span class=\"title\">topN</span><span class=\"params\">(<span class=\"keyword\">int</span> n, List l)</span></span>&#123;</div><div class=\"line\">    SortedMap&lt;Double, String&gt; topN = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (l != <span class=\"keyword\">null</span> &amp;&amp; !l.isEmpty())&#123;</div><div class=\"line\">        topN = <span class=\"keyword\">new</span> TreeMap&lt;Double, String&gt;();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (DataNode dataNode : l)&#123;</div><div class=\"line\">            topN.put(dataNode.getValue(),dataNode.getkey());</div><div class=\"line\">            <span class=\"keyword\">if</span> (topN.size() &gt; n)&#123;</div><div class=\"line\">                topN.remove(topN.firstKey());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> topN;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"算法笔记：一元线性回归及Java实现","date":"2017-07-23T04:30:50.000Z","mathjax":true,"_content":"> 这是voidAlex原创的第四篇博文。\n> 源码在[我的GitHub](https://github.com/voidAlex/Linear_Regression)\n<!-- more -->\n\n## 回归问题\n回归问题是研究自变量和因变量之间关系的一种预测模型技术。例如我们可以通过回归模型去预测房价与房子面积之间的关系，一个人每周花在微信上的时间和他微信好友数量之间的关系等。\n\n回归模型定义了输入和输出的关系。输入为现有信息，输出为预测。\n\n一个预测问题在回归模型下的解决步骤为：\n\n1. 构造训练集；\n2. 学习，得到输入输出间的关系；\n3. 预测，通过学习得到的关系预测输出。\n\n## 线性回归\n假设要使用回归模型预测一个人每周花在微信上的时间和微信好友数量之间的关系，可以用如下的表达式表示：\n\n$$ y=ax+b+e $$\n\n其中，*y*是你每周需要花费在微信上的时间，*x*是你的微信好友数量，*e*是误差。对于误差*e*，它不是一个定值，有一对*y*和*x*，就有一个*e*，*e*的值满足正态分布。\n\n假设有数据集：\n\n|好友数量|\t花费的时间|\n|---|---|\n|50\t|55|\n|53\t|56|\n|80\t|79|\n|90\t|88|\n|63\t|58|\n|89\t|93|\n|120 |90|\n|155 |120|\n\n将数据集用散点图表示：\n\n![](http://osuro1ft2.bkt.clouddn.com//17-7-14/7010575.jpg)\n\n我们假定*x*和*y*之间的关系确实是线性的，那么可以尝试在散点图上画一条直线：\n\n![](http://osuro1ft2.bkt.clouddn.com//17-7-14/92659690.jpg)\n\n可以看出，我们能画出很多条直线。接下来就是要从存在的直线中确定一条最佳的直线来拟合数据。\n\n如果存在一条最佳拟合的直线，那么所有的样本数据到这条直线的距离应该是最小的。对于线性回归来说，“最佳”指的就是距离最小化。因此，将参数求解问题转换为求最小误差问题。常见的获得最佳拟合线的方法有最小二乘法、梯度下降算法等。\n\n## 使用最小二乘法拟合\n\n对于上面的样本集，我们尝试用$ y=ax+b+e $去进行拟合，那么可以得到：\n\n$$ \\mid e \\mid = \\mid ax + b - y \\mid $$\n\n误差大小其实就是猜想的$ax + b$的值和观测到的*y*值之间的差值。把所有的$\\mid e \\mid$都求和，构造一个函数：\n\n$$Q = \\sum_{i=1}^n (ax_i + b - y_i)^2$$\n\n当$Q$最小的时候，即可得到最佳拟合的直线。\n\n可以求导得到$a$和$b$，也可以直接用下面的公式求得：（省略数学推导过程）\n\n$$\na=\\frac\n{\n    \\frac\n    {\\sum\\_{i = 1}^n y\\_i  \\sum\\_{i = 1}^n x\\_i}\n    {n} - \n    \\sum\\_{i = 1}^n x\\_i y\\_i\n    }\n{\n    \\frac\n    {\\sum\\_{i = 1}^n x\\_i * \\sum\\_{i = 1}^n x\\_i}\n    {n} - \n    \\sum\\_{i = 1}^n x\\_i^2\n    }\n$$\n\n$$\nb=\\frac {\\sum\\_{i = 1}^n y\\_i - a  \\sum\\_{i = 1}^n x\\_i}{n}\n$$\n\n得到$a$和$b$之后，可以用R平方来评估拟合程度：\n\n$$\nR^2=1-\\frac\n{\\sum\\_{i=1}^n (y\\_i - \\hat{y\\_i})^2}\n{\\sum\\_{i=1}^n (y\\_i - \\bar{y})^2}\n$$\n\nR平方可以解释为数据集中能够被模型所解释的方差占数据总方差的比重，R平方值越大，说明模型对数据的拟合程度越高。\n\n## 编码实现\n\n首先构造一个类来存放记录：\n\n```Java\npublic class DataNode {\n    private double x;\n    private double y;\n\n    public double getX() {\n        return x;\n    }\n\n    public double getY() {\n        return y;\n    }\n\n    public void setX(double x) {\n        this.x = x;\n    }\n\n    public void setY(double y) {\n        this.y = y;\n    }\n\n    public double getXY(){\n        return this.x * this.y;\n    }\n}\n```\n\n然后构造`MyLinearRegression`类：\n\n```Java\npublic class MyLinearRegression {\n    private List<DataNode> list;\n    private double alpha;\n    private double beta;\n    private double r;\n\n    public MyLinearRegression(String path) throws IOException{\n        this.list = new ArrayList<DataNode>();\n\n        init(path);\n    }\n\n    public double getAlpha() {\n        return alpha;\n    }\n\n    public double getBeta() {\n        return beta;\n    }\n\n    public double getR(){\n        return this.r;\n    }\n\n    private void init(String path) throws IOException{\n        BufferedReader reader = new BufferedReader(new FileReader(new File(path)));\n        String line = \"\";\n\n        while ((line = reader.readLine()) != null){\n            String str[] = line.split(\",\");\n            DataNode dataNode = new DataNode();\n            dataNode.setX(Double.parseDouble(str[0]));\n            dataNode.setY(Double.parseDouble(str[1]));\n            this.list.add(dataNode);\n        }\n\n        reader.close();\n    }\n}\n```\n\n最后要根据读取到的数据去求`alpha`，`beta`和`r`的值。可以直接利用上面的公式：\n\n```Java\npublic void getAB(){\n    int n = list.size();\n    double sumX = 0;\n    double sumY = 0;\n    double sumXY = 0;\n    double sumX2 = 0;\n\n    for (DataNode dataNode : list){\n        sumX += dataNode.getX();\n        sumY += dataNode.getY();\n        sumXY += dataNode.getXY();\n        sumX2 += Math.pow(dataNode.getX(), 2);\n    }\n    this.alpha = (((sumY * sumX) / n) - sumXY) / (((sumX * sumX) / n) - sumX2);\n    this.beta = (sumY - this.alpha * sumX) / n;\n}\n\npublic void getR2(){\n    double num = 0;\n    double den = 0;\n    double sumY = 0;\n\n    for (DataNode dataNode : list){\n        sumY += dataNode.getY();\n    }\n\n    double avgY = sumY / list.size();\n\n    for (DataNode dataNode : list){\n        num += Math.pow((dataNode.getY() - (dataNode.getX() * this.alpha + beta)), 2);\n        den += Math.pow((dataNode.getY() - avgY), 2);\n    }\n    this.r = 1 - (num / den);\n}\n```\n\n使用上述数据集拟合：\n\n```Java\npublic class Main {\n    public static void main(String args[]) throws IOException{\n        String path = \"test.txt\";\n        MyLinearRegression linearRegression = new MyLinearRegression(path);\n        linearRegression.getAB();\n        linearRegression.getR2();\n        System.out.println(\"alpha = \" + linearRegression.getAlpha());\n        System.out.println(\"beta = \" + linearRegression.getBeta());\n        System.out.println(\"R2 = \" + linearRegression.getR());\n    }\n}\n```\n\n得到结果：\n\n```\nalpha = 0.6058710840658103\nbeta = 26.861280144241604\nR2 = 0.9001321912140731\n```\n\n所以，拟合该数据集的直线为$y=0.61x+26.86$。\n\n## 过拟合和欠拟合\n\n### 过拟合\n\n过拟合，即在拟合过程中“做过头”。在拟合过程中，可能为了迎合所有的样本甚至是噪声点，使得模型的描述过于复杂，或者失去泛化能力。造成过拟合的原因可能有：\n\n1. 训练样本过少；\n2. 迎合了所有的样本甚至是噪声点。\n\n### 欠拟合\n\n欠拟合与过拟合相反，由于操作不当导致模型产生的误差$e$分布过于分散或者太大。欠拟合会因为误差太大导致模型没有泛化能力而失去指导意义。造成欠拟合的方法可能有：\n\n1. 参数过少；\n2. 拟合方法不当。\n\n## 参考资料\n\n[白话大数据与机器学习](https://item.jd.com/11932929.html)\n\n[数据科学实战](https://item.jd.com/11617070.html?dist=jd)\n","source":"_posts/算法笔记：一元线性回归及Java实现.md","raw":"---\ntitle: 算法笔记：一元线性回归及Java实现\ndate: 2017-07-23 12:30:50\ntags: ['算法','机器学习','Java']\nmathjax: true\n---\n> 这是voidAlex原创的第四篇博文。\n> 源码在[我的GitHub](https://github.com/voidAlex/Linear_Regression)\n<!-- more -->\n\n## 回归问题\n回归问题是研究自变量和因变量之间关系的一种预测模型技术。例如我们可以通过回归模型去预测房价与房子面积之间的关系，一个人每周花在微信上的时间和他微信好友数量之间的关系等。\n\n回归模型定义了输入和输出的关系。输入为现有信息，输出为预测。\n\n一个预测问题在回归模型下的解决步骤为：\n\n1. 构造训练集；\n2. 学习，得到输入输出间的关系；\n3. 预测，通过学习得到的关系预测输出。\n\n## 线性回归\n假设要使用回归模型预测一个人每周花在微信上的时间和微信好友数量之间的关系，可以用如下的表达式表示：\n\n$$ y=ax+b+e $$\n\n其中，*y*是你每周需要花费在微信上的时间，*x*是你的微信好友数量，*e*是误差。对于误差*e*，它不是一个定值，有一对*y*和*x*，就有一个*e*，*e*的值满足正态分布。\n\n假设有数据集：\n\n|好友数量|\t花费的时间|\n|---|---|\n|50\t|55|\n|53\t|56|\n|80\t|79|\n|90\t|88|\n|63\t|58|\n|89\t|93|\n|120 |90|\n|155 |120|\n\n将数据集用散点图表示：\n\n![](http://osuro1ft2.bkt.clouddn.com//17-7-14/7010575.jpg)\n\n我们假定*x*和*y*之间的关系确实是线性的，那么可以尝试在散点图上画一条直线：\n\n![](http://osuro1ft2.bkt.clouddn.com//17-7-14/92659690.jpg)\n\n可以看出，我们能画出很多条直线。接下来就是要从存在的直线中确定一条最佳的直线来拟合数据。\n\n如果存在一条最佳拟合的直线，那么所有的样本数据到这条直线的距离应该是最小的。对于线性回归来说，“最佳”指的就是距离最小化。因此，将参数求解问题转换为求最小误差问题。常见的获得最佳拟合线的方法有最小二乘法、梯度下降算法等。\n\n## 使用最小二乘法拟合\n\n对于上面的样本集，我们尝试用$ y=ax+b+e $去进行拟合，那么可以得到：\n\n$$ \\mid e \\mid = \\mid ax + b - y \\mid $$\n\n误差大小其实就是猜想的$ax + b$的值和观测到的*y*值之间的差值。把所有的$\\mid e \\mid$都求和，构造一个函数：\n\n$$Q = \\sum_{i=1}^n (ax_i + b - y_i)^2$$\n\n当$Q$最小的时候，即可得到最佳拟合的直线。\n\n可以求导得到$a$和$b$，也可以直接用下面的公式求得：（省略数学推导过程）\n\n$$\na=\\frac\n{\n    \\frac\n    {\\sum\\_{i = 1}^n y\\_i  \\sum\\_{i = 1}^n x\\_i}\n    {n} - \n    \\sum\\_{i = 1}^n x\\_i y\\_i\n    }\n{\n    \\frac\n    {\\sum\\_{i = 1}^n x\\_i * \\sum\\_{i = 1}^n x\\_i}\n    {n} - \n    \\sum\\_{i = 1}^n x\\_i^2\n    }\n$$\n\n$$\nb=\\frac {\\sum\\_{i = 1}^n y\\_i - a  \\sum\\_{i = 1}^n x\\_i}{n}\n$$\n\n得到$a$和$b$之后，可以用R平方来评估拟合程度：\n\n$$\nR^2=1-\\frac\n{\\sum\\_{i=1}^n (y\\_i - \\hat{y\\_i})^2}\n{\\sum\\_{i=1}^n (y\\_i - \\bar{y})^2}\n$$\n\nR平方可以解释为数据集中能够被模型所解释的方差占数据总方差的比重，R平方值越大，说明模型对数据的拟合程度越高。\n\n## 编码实现\n\n首先构造一个类来存放记录：\n\n```Java\npublic class DataNode {\n    private double x;\n    private double y;\n\n    public double getX() {\n        return x;\n    }\n\n    public double getY() {\n        return y;\n    }\n\n    public void setX(double x) {\n        this.x = x;\n    }\n\n    public void setY(double y) {\n        this.y = y;\n    }\n\n    public double getXY(){\n        return this.x * this.y;\n    }\n}\n```\n\n然后构造`MyLinearRegression`类：\n\n```Java\npublic class MyLinearRegression {\n    private List<DataNode> list;\n    private double alpha;\n    private double beta;\n    private double r;\n\n    public MyLinearRegression(String path) throws IOException{\n        this.list = new ArrayList<DataNode>();\n\n        init(path);\n    }\n\n    public double getAlpha() {\n        return alpha;\n    }\n\n    public double getBeta() {\n        return beta;\n    }\n\n    public double getR(){\n        return this.r;\n    }\n\n    private void init(String path) throws IOException{\n        BufferedReader reader = new BufferedReader(new FileReader(new File(path)));\n        String line = \"\";\n\n        while ((line = reader.readLine()) != null){\n            String str[] = line.split(\",\");\n            DataNode dataNode = new DataNode();\n            dataNode.setX(Double.parseDouble(str[0]));\n            dataNode.setY(Double.parseDouble(str[1]));\n            this.list.add(dataNode);\n        }\n\n        reader.close();\n    }\n}\n```\n\n最后要根据读取到的数据去求`alpha`，`beta`和`r`的值。可以直接利用上面的公式：\n\n```Java\npublic void getAB(){\n    int n = list.size();\n    double sumX = 0;\n    double sumY = 0;\n    double sumXY = 0;\n    double sumX2 = 0;\n\n    for (DataNode dataNode : list){\n        sumX += dataNode.getX();\n        sumY += dataNode.getY();\n        sumXY += dataNode.getXY();\n        sumX2 += Math.pow(dataNode.getX(), 2);\n    }\n    this.alpha = (((sumY * sumX) / n) - sumXY) / (((sumX * sumX) / n) - sumX2);\n    this.beta = (sumY - this.alpha * sumX) / n;\n}\n\npublic void getR2(){\n    double num = 0;\n    double den = 0;\n    double sumY = 0;\n\n    for (DataNode dataNode : list){\n        sumY += dataNode.getY();\n    }\n\n    double avgY = sumY / list.size();\n\n    for (DataNode dataNode : list){\n        num += Math.pow((dataNode.getY() - (dataNode.getX() * this.alpha + beta)), 2);\n        den += Math.pow((dataNode.getY() - avgY), 2);\n    }\n    this.r = 1 - (num / den);\n}\n```\n\n使用上述数据集拟合：\n\n```Java\npublic class Main {\n    public static void main(String args[]) throws IOException{\n        String path = \"test.txt\";\n        MyLinearRegression linearRegression = new MyLinearRegression(path);\n        linearRegression.getAB();\n        linearRegression.getR2();\n        System.out.println(\"alpha = \" + linearRegression.getAlpha());\n        System.out.println(\"beta = \" + linearRegression.getBeta());\n        System.out.println(\"R2 = \" + linearRegression.getR());\n    }\n}\n```\n\n得到结果：\n\n```\nalpha = 0.6058710840658103\nbeta = 26.861280144241604\nR2 = 0.9001321912140731\n```\n\n所以，拟合该数据集的直线为$y=0.61x+26.86$。\n\n## 过拟合和欠拟合\n\n### 过拟合\n\n过拟合，即在拟合过程中“做过头”。在拟合过程中，可能为了迎合所有的样本甚至是噪声点，使得模型的描述过于复杂，或者失去泛化能力。造成过拟合的原因可能有：\n\n1. 训练样本过少；\n2. 迎合了所有的样本甚至是噪声点。\n\n### 欠拟合\n\n欠拟合与过拟合相反，由于操作不当导致模型产生的误差$e$分布过于分散或者太大。欠拟合会因为误差太大导致模型没有泛化能力而失去指导意义。造成欠拟合的方法可能有：\n\n1. 参数过少；\n2. 拟合方法不当。\n\n## 参考资料\n\n[白话大数据与机器学习](https://item.jd.com/11932929.html)\n\n[数据科学实战](https://item.jd.com/11617070.html?dist=jd)\n","slug":"算法笔记：一元线性回归及Java实现","published":1,"updated":"2017-07-31T01:44:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhhhvn42001027xuu6vkjy8o","content":"<blockquote>\n<p>这是voidAlex原创的第四篇博文。<br>源码在<a href=\"https://github.com/voidAlex/Linear_Regression\" target=\"_blank\" rel=\"noopener\">我的GitHub</a><br><a id=\"more\"></a></p>\n</blockquote>\n<h2 id=\"回归问题\"><a href=\"#回归问题\" class=\"headerlink\" title=\"回归问题\"></a>回归问题</h2><p>回归问题是研究自变量和因变量之间关系的一种预测模型技术。例如我们可以通过回归模型去预测房价与房子面积之间的关系，一个人每周花在微信上的时间和他微信好友数量之间的关系等。</p>\n<p>回归模型定义了输入和输出的关系。输入为现有信息，输出为预测。</p>\n<p>一个预测问题在回归模型下的解决步骤为：</p>\n<ol>\n<li>构造训练集；</li>\n<li>学习，得到输入输出间的关系；</li>\n<li>预测，通过学习得到的关系预测输出。</li>\n</ol>\n<h2 id=\"线性回归\"><a href=\"#线性回归\" class=\"headerlink\" title=\"线性回归\"></a>线性回归</h2><p>假设要使用回归模型预测一个人每周花在微信上的时间和微信好友数量之间的关系，可以用如下的表达式表示：</p>\n<p>$$ y=ax+b+e $$</p>\n<p>其中，<em>y</em>是你每周需要花费在微信上的时间，<em>x</em>是你的微信好友数量，<em>e</em>是误差。对于误差<em>e</em>，它不是一个定值，有一对<em>y</em>和<em>x</em>，就有一个<em>e</em>，<em>e</em>的值满足正态分布。</p>\n<p>假设有数据集：</p>\n<table>\n<thead>\n<tr>\n<th>好友数量</th>\n<th>花费的时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>50</td>\n<td>55</td>\n</tr>\n<tr>\n<td>53</td>\n<td>56</td>\n</tr>\n<tr>\n<td>80</td>\n<td>79</td>\n</tr>\n<tr>\n<td>90</td>\n<td>88</td>\n</tr>\n<tr>\n<td>63</td>\n<td>58</td>\n</tr>\n<tr>\n<td>89</td>\n<td>93</td>\n</tr>\n<tr>\n<td>120</td>\n<td>90</td>\n</tr>\n<tr>\n<td>155</td>\n<td>120</td>\n</tr>\n</tbody>\n</table>\n<p>将数据集用散点图表示：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://osuro1ft2.bkt.clouddn.com//17-7-14/7010575.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>我们假定<em>x</em>和<em>y</em>之间的关系确实是线性的，那么可以尝试在散点图上画一条直线：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://osuro1ft2.bkt.clouddn.com//17-7-14/92659690.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>可以看出，我们能画出很多条直线。接下来就是要从存在的直线中确定一条最佳的直线来拟合数据。</p>\n<p>如果存在一条最佳拟合的直线，那么所有的样本数据到这条直线的距离应该是最小的。对于线性回归来说，“最佳”指的就是距离最小化。因此，将参数求解问题转换为求最小误差问题。常见的获得最佳拟合线的方法有最小二乘法、梯度下降算法等。</p>\n<h2 id=\"使用最小二乘法拟合\"><a href=\"#使用最小二乘法拟合\" class=\"headerlink\" title=\"使用最小二乘法拟合\"></a>使用最小二乘法拟合</h2><p>对于上面的样本集，我们尝试用$ y=ax+b+e $去进行拟合，那么可以得到：</p>\n<p>$$ \\mid e \\mid = \\mid ax + b - y \\mid $$</p>\n<p>误差大小其实就是猜想的$ax + b$的值和观测到的<em>y</em>值之间的差值。把所有的$\\mid e \\mid$都求和，构造一个函数：</p>\n<p>$$Q = \\sum_{i=1}^n (ax_i + b - y_i)^2$$</p>\n<p>当$Q$最小的时候，即可得到最佳拟合的直线。</p>\n<p>可以求导得到$a$和$b$，也可以直接用下面的公式求得：（省略数学推导过程）</p>\n<p>$$<br>a=\\frac<br>{<br>    \\frac<br>    {\\sum_{i = 1}^n y_i  \\sum_{i = 1}^n x_i}<br>    {n} -<br>    \\sum_{i = 1}^n x_i y_i<br>    }<br>{<br>    \\frac<br>    {\\sum_{i = 1}^n x_i * \\sum_{i = 1}^n x_i}<br>    {n} -<br>    \\sum_{i = 1}^n x_i^2<br>    }<br>$$</p>\n<p>$$<br>b=\\frac {\\sum_{i = 1}^n y_i - a  \\sum_{i = 1}^n x_i}{n}<br>$$</p>\n<p>得到$a$和$b$之后，可以用R平方来评估拟合程度：</p>\n<p>$$<br>R^2=1-\\frac<br>{\\sum_{i=1}^n (y_i - \\hat{y_i})^2}<br>{\\sum_{i=1}^n (y_i - \\bar{y})^2}<br>$$</p>\n<p>R平方可以解释为数据集中能够被模型所解释的方差占数据总方差的比重，R平方值越大，说明模型对数据的拟合程度越高。</p>\n<h2 id=\"编码实现\"><a href=\"#编码实现\" class=\"headerlink\" title=\"编码实现\"></a>编码实现</h2><p>首先构造一个类来存放记录：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> x;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> y;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getX</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> x;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getY</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> y;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setX</span><span class=\"params\">(<span class=\"keyword\">double</span> x)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.x = x;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setY</span><span class=\"params\">(<span class=\"keyword\">double</span> y)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.y = y;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getXY</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.x * <span class=\"keyword\">this</span>.y;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后构造<code>MyLinearRegression</code>类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLinearRegression</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;DataNode&gt; list;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> alpha;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> beta;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> r;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyLinearRegression</span><span class=\"params\">(String path)</span> <span class=\"keyword\">throws</span> IOException</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.list = <span class=\"keyword\">new</span> ArrayList&lt;DataNode&gt;();</div><div class=\"line\"></div><div class=\"line\">        init(path);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getAlpha</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> alpha;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getBeta</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> beta;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getR</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.r;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(String path)</span> <span class=\"keyword\">throws</span> IOException</span>&#123;</div><div class=\"line\">        BufferedReader reader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(<span class=\"keyword\">new</span> File(path)));</div><div class=\"line\">        String line = <span class=\"string\">\"\"</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">while</span> ((line = reader.readLine()) != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            String str[] = line.split(<span class=\"string\">\",\"</span>);</div><div class=\"line\">            DataNode dataNode = <span class=\"keyword\">new</span> DataNode();</div><div class=\"line\">            dataNode.setX(Double.parseDouble(str[<span class=\"number\">0</span>]));</div><div class=\"line\">            dataNode.setY(Double.parseDouble(str[<span class=\"number\">1</span>]));</div><div class=\"line\">            <span class=\"keyword\">this</span>.list.add(dataNode);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        reader.close();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后要根据读取到的数据去求<code>alpha</code>，<code>beta</code>和<code>r</code>的值。可以直接利用上面的公式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getAB</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = list.size();</div><div class=\"line\">    <span class=\"keyword\">double</span> sumX = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">double</span> sumY = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">double</span> sumXY = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">double</span> sumX2 = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (DataNode dataNode : list)&#123;</div><div class=\"line\">        sumX += dataNode.getX();</div><div class=\"line\">        sumY += dataNode.getY();</div><div class=\"line\">        sumXY += dataNode.getXY();</div><div class=\"line\">        sumX2 += Math.pow(dataNode.getX(), <span class=\"number\">2</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">this</span>.alpha = (((sumY * sumX) / n) - sumXY) / (((sumX * sumX) / n) - sumX2);</div><div class=\"line\">    <span class=\"keyword\">this</span>.beta = (sumY - <span class=\"keyword\">this</span>.alpha * sumX) / n;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getR2</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">double</span> num = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">double</span> den = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">double</span> sumY = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (DataNode dataNode : list)&#123;</div><div class=\"line\">        sumY += dataNode.getY();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">double</span> avgY = sumY / list.size();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (DataNode dataNode : list)&#123;</div><div class=\"line\">        num += Math.pow((dataNode.getY() - (dataNode.getX() * <span class=\"keyword\">this</span>.alpha + beta)), <span class=\"number\">2</span>);</div><div class=\"line\">        den += Math.pow((dataNode.getY() - avgY), <span class=\"number\">2</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">this</span>.r = <span class=\"number\">1</span> - (num / den);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用上述数据集拟合：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> IOException</span>&#123;</div><div class=\"line\">        String path = <span class=\"string\">\"test.txt\"</span>;</div><div class=\"line\">        MyLinearRegression linearRegression = <span class=\"keyword\">new</span> MyLinearRegression(path);</div><div class=\"line\">        linearRegression.getAB();</div><div class=\"line\">        linearRegression.getR2();</div><div class=\"line\">        System.out.println(<span class=\"string\">\"alpha = \"</span> + linearRegression.getAlpha());</div><div class=\"line\">        System.out.println(<span class=\"string\">\"beta = \"</span> + linearRegression.getBeta());</div><div class=\"line\">        System.out.println(<span class=\"string\">\"R2 = \"</span> + linearRegression.getR());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>得到结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">alpha = 0.6058710840658103</div><div class=\"line\">beta = 26.861280144241604</div><div class=\"line\">R2 = 0.9001321912140731</div></pre></td></tr></table></figure>\n<p>所以，拟合该数据集的直线为$y=0.61x+26.86$。</p>\n<h2 id=\"过拟合和欠拟合\"><a href=\"#过拟合和欠拟合\" class=\"headerlink\" title=\"过拟合和欠拟合\"></a>过拟合和欠拟合</h2><h3 id=\"过拟合\"><a href=\"#过拟合\" class=\"headerlink\" title=\"过拟合\"></a>过拟合</h3><p>过拟合，即在拟合过程中“做过头”。在拟合过程中，可能为了迎合所有的样本甚至是噪声点，使得模型的描述过于复杂，或者失去泛化能力。造成过拟合的原因可能有：</p>\n<ol>\n<li>训练样本过少；</li>\n<li>迎合了所有的样本甚至是噪声点。</li>\n</ol>\n<h3 id=\"欠拟合\"><a href=\"#欠拟合\" class=\"headerlink\" title=\"欠拟合\"></a>欠拟合</h3><p>欠拟合与过拟合相反，由于操作不当导致模型产生的误差$e$分布过于分散或者太大。欠拟合会因为误差太大导致模型没有泛化能力而失去指导意义。造成欠拟合的方法可能有：</p>\n<ol>\n<li>参数过少；</li>\n<li>拟合方法不当。</li>\n</ol>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://item.jd.com/11932929.html\" target=\"_blank\" rel=\"noopener\">白话大数据与机器学习</a></p>\n<p><a href=\"https://item.jd.com/11617070.html?dist=jd\" target=\"_blank\" rel=\"noopener\">数据科学实战</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这是voidAlex原创的第四篇博文。<br>源码在<a href=\"https://github.com/voidAlex/Linear_Regression\" target=\"_blank\" rel=\"noopener\">我的GitHub</a><br>","more":"</p>\n</blockquote>\n<h2 id=\"回归问题\"><a href=\"#回归问题\" class=\"headerlink\" title=\"回归问题\"></a>回归问题</h2><p>回归问题是研究自变量和因变量之间关系的一种预测模型技术。例如我们可以通过回归模型去预测房价与房子面积之间的关系，一个人每周花在微信上的时间和他微信好友数量之间的关系等。</p>\n<p>回归模型定义了输入和输出的关系。输入为现有信息，输出为预测。</p>\n<p>一个预测问题在回归模型下的解决步骤为：</p>\n<ol>\n<li>构造训练集；</li>\n<li>学习，得到输入输出间的关系；</li>\n<li>预测，通过学习得到的关系预测输出。</li>\n</ol>\n<h2 id=\"线性回归\"><a href=\"#线性回归\" class=\"headerlink\" title=\"线性回归\"></a>线性回归</h2><p>假设要使用回归模型预测一个人每周花在微信上的时间和微信好友数量之间的关系，可以用如下的表达式表示：</p>\n<p>$$ y=ax+b+e $$</p>\n<p>其中，<em>y</em>是你每周需要花费在微信上的时间，<em>x</em>是你的微信好友数量，<em>e</em>是误差。对于误差<em>e</em>，它不是一个定值，有一对<em>y</em>和<em>x</em>，就有一个<em>e</em>，<em>e</em>的值满足正态分布。</p>\n<p>假设有数据集：</p>\n<table>\n<thead>\n<tr>\n<th>好友数量</th>\n<th>花费的时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>50</td>\n<td>55</td>\n</tr>\n<tr>\n<td>53</td>\n<td>56</td>\n</tr>\n<tr>\n<td>80</td>\n<td>79</td>\n</tr>\n<tr>\n<td>90</td>\n<td>88</td>\n</tr>\n<tr>\n<td>63</td>\n<td>58</td>\n</tr>\n<tr>\n<td>89</td>\n<td>93</td>\n</tr>\n<tr>\n<td>120</td>\n<td>90</td>\n</tr>\n<tr>\n<td>155</td>\n<td>120</td>\n</tr>\n</tbody>\n</table>\n<p>将数据集用散点图表示：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://osuro1ft2.bkt.clouddn.com//17-7-14/7010575.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>我们假定<em>x</em>和<em>y</em>之间的关系确实是线性的，那么可以尝试在散点图上画一条直线：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://osuro1ft2.bkt.clouddn.com//17-7-14/92659690.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>可以看出，我们能画出很多条直线。接下来就是要从存在的直线中确定一条最佳的直线来拟合数据。</p>\n<p>如果存在一条最佳拟合的直线，那么所有的样本数据到这条直线的距离应该是最小的。对于线性回归来说，“最佳”指的就是距离最小化。因此，将参数求解问题转换为求最小误差问题。常见的获得最佳拟合线的方法有最小二乘法、梯度下降算法等。</p>\n<h2 id=\"使用最小二乘法拟合\"><a href=\"#使用最小二乘法拟合\" class=\"headerlink\" title=\"使用最小二乘法拟合\"></a>使用最小二乘法拟合</h2><p>对于上面的样本集，我们尝试用$ y=ax+b+e $去进行拟合，那么可以得到：</p>\n<p>$$ \\mid e \\mid = \\mid ax + b - y \\mid $$</p>\n<p>误差大小其实就是猜想的$ax + b$的值和观测到的<em>y</em>值之间的差值。把所有的$\\mid e \\mid$都求和，构造一个函数：</p>\n<p>$$Q = \\sum_{i=1}^n (ax_i + b - y_i)^2$$</p>\n<p>当$Q$最小的时候，即可得到最佳拟合的直线。</p>\n<p>可以求导得到$a$和$b$，也可以直接用下面的公式求得：（省略数学推导过程）</p>\n<p>$$<br>a=\\frac<br>{<br>    \\frac<br>    {\\sum_{i = 1}^n y_i  \\sum_{i = 1}^n x_i}<br>    {n} -<br>    \\sum_{i = 1}^n x_i y_i<br>    }<br>{<br>    \\frac<br>    {\\sum_{i = 1}^n x_i * \\sum_{i = 1}^n x_i}<br>    {n} -<br>    \\sum_{i = 1}^n x_i^2<br>    }<br>$$</p>\n<p>$$<br>b=\\frac {\\sum_{i = 1}^n y_i - a  \\sum_{i = 1}^n x_i}{n}<br>$$</p>\n<p>得到$a$和$b$之后，可以用R平方来评估拟合程度：</p>\n<p>$$<br>R^2=1-\\frac<br>{\\sum_{i=1}^n (y_i - \\hat{y_i})^2}<br>{\\sum_{i=1}^n (y_i - \\bar{y})^2}<br>$$</p>\n<p>R平方可以解释为数据集中能够被模型所解释的方差占数据总方差的比重，R平方值越大，说明模型对数据的拟合程度越高。</p>\n<h2 id=\"编码实现\"><a href=\"#编码实现\" class=\"headerlink\" title=\"编码实现\"></a>编码实现</h2><p>首先构造一个类来存放记录：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> x;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> y;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getX</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> x;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getY</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> y;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setX</span><span class=\"params\">(<span class=\"keyword\">double</span> x)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.x = x;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setY</span><span class=\"params\">(<span class=\"keyword\">double</span> y)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.y = y;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getXY</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.x * <span class=\"keyword\">this</span>.y;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后构造<code>MyLinearRegression</code>类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLinearRegression</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;DataNode&gt; list;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> alpha;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> beta;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> r;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyLinearRegression</span><span class=\"params\">(String path)</span> <span class=\"keyword\">throws</span> IOException</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.list = <span class=\"keyword\">new</span> ArrayList&lt;DataNode&gt;();</div><div class=\"line\"></div><div class=\"line\">        init(path);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getAlpha</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> alpha;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getBeta</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> beta;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getR</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.r;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(String path)</span> <span class=\"keyword\">throws</span> IOException</span>&#123;</div><div class=\"line\">        BufferedReader reader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(<span class=\"keyword\">new</span> File(path)));</div><div class=\"line\">        String line = <span class=\"string\">\"\"</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">while</span> ((line = reader.readLine()) != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">            String str[] = line.split(<span class=\"string\">\",\"</span>);</div><div class=\"line\">            DataNode dataNode = <span class=\"keyword\">new</span> DataNode();</div><div class=\"line\">            dataNode.setX(Double.parseDouble(str[<span class=\"number\">0</span>]));</div><div class=\"line\">            dataNode.setY(Double.parseDouble(str[<span class=\"number\">1</span>]));</div><div class=\"line\">            <span class=\"keyword\">this</span>.list.add(dataNode);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        reader.close();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后要根据读取到的数据去求<code>alpha</code>，<code>beta</code>和<code>r</code>的值。可以直接利用上面的公式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getAB</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = list.size();</div><div class=\"line\">    <span class=\"keyword\">double</span> sumX = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">double</span> sumY = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">double</span> sumXY = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">double</span> sumX2 = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (DataNode dataNode : list)&#123;</div><div class=\"line\">        sumX += dataNode.getX();</div><div class=\"line\">        sumY += dataNode.getY();</div><div class=\"line\">        sumXY += dataNode.getXY();</div><div class=\"line\">        sumX2 += Math.pow(dataNode.getX(), <span class=\"number\">2</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">this</span>.alpha = (((sumY * sumX) / n) - sumXY) / (((sumX * sumX) / n) - sumX2);</div><div class=\"line\">    <span class=\"keyword\">this</span>.beta = (sumY - <span class=\"keyword\">this</span>.alpha * sumX) / n;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getR2</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">double</span> num = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">double</span> den = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">double</span> sumY = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (DataNode dataNode : list)&#123;</div><div class=\"line\">        sumY += dataNode.getY();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">double</span> avgY = sumY / list.size();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (DataNode dataNode : list)&#123;</div><div class=\"line\">        num += Math.pow((dataNode.getY() - (dataNode.getX() * <span class=\"keyword\">this</span>.alpha + beta)), <span class=\"number\">2</span>);</div><div class=\"line\">        den += Math.pow((dataNode.getY() - avgY), <span class=\"number\">2</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">this</span>.r = <span class=\"number\">1</span> - (num / den);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用上述数据集拟合：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> IOException</span>&#123;</div><div class=\"line\">        String path = <span class=\"string\">\"test.txt\"</span>;</div><div class=\"line\">        MyLinearRegression linearRegression = <span class=\"keyword\">new</span> MyLinearRegression(path);</div><div class=\"line\">        linearRegression.getAB();</div><div class=\"line\">        linearRegression.getR2();</div><div class=\"line\">        System.out.println(<span class=\"string\">\"alpha = \"</span> + linearRegression.getAlpha());</div><div class=\"line\">        System.out.println(<span class=\"string\">\"beta = \"</span> + linearRegression.getBeta());</div><div class=\"line\">        System.out.println(<span class=\"string\">\"R2 = \"</span> + linearRegression.getR());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>得到结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">alpha = 0.6058710840658103</div><div class=\"line\">beta = 26.861280144241604</div><div class=\"line\">R2 = 0.9001321912140731</div></pre></td></tr></table></figure>\n<p>所以，拟合该数据集的直线为$y=0.61x+26.86$。</p>\n<h2 id=\"过拟合和欠拟合\"><a href=\"#过拟合和欠拟合\" class=\"headerlink\" title=\"过拟合和欠拟合\"></a>过拟合和欠拟合</h2><h3 id=\"过拟合\"><a href=\"#过拟合\" class=\"headerlink\" title=\"过拟合\"></a>过拟合</h3><p>过拟合，即在拟合过程中“做过头”。在拟合过程中，可能为了迎合所有的样本甚至是噪声点，使得模型的描述过于复杂，或者失去泛化能力。造成过拟合的原因可能有：</p>\n<ol>\n<li>训练样本过少；</li>\n<li>迎合了所有的样本甚至是噪声点。</li>\n</ol>\n<h3 id=\"欠拟合\"><a href=\"#欠拟合\" class=\"headerlink\" title=\"欠拟合\"></a>欠拟合</h3><p>欠拟合与过拟合相反，由于操作不当导致模型产生的误差$e$分布过于分散或者太大。欠拟合会因为误差太大导致模型没有泛化能力而失去指导意义。造成欠拟合的方法可能有：</p>\n<ol>\n<li>参数过少；</li>\n<li>拟合方法不当。</li>\n</ol>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://item.jd.com/11932929.html\" target=\"_blank\" rel=\"noopener\">白话大数据与机器学习</a></p>\n<p><a href=\"https://item.jd.com/11617070.html?dist=jd\" target=\"_blank\" rel=\"noopener\">数据科学实战</a></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjhhhvn21000027xu4k9hey7g","tag_id":"cjhhhvn2k000427xu9o1m5k6b","_id":"cjhhhvn38000e27xuv4yfr2yj"},{"post_id":"cjhhhvn21000027xu4k9hey7g","tag_id":"cjhhhvn2x000927xuw5092dq8","_id":"cjhhhvn3a000g27xu61asgjj7"},{"post_id":"cjhhhvn2d000227xut300tcj8","tag_id":"cjhhhvn2k000427xu9o1m5k6b","_id":"cjhhhvn3j000m27xu0u5ue1am"},{"post_id":"cjhhhvn2d000227xut300tcj8","tag_id":"cjhhhvn3a000h27xuua3aw5om","_id":"cjhhhvn3m000o27xu4v3uu9to"},{"post_id":"cjhhhvn2o000527xukcyekkep","tag_id":"cjhhhvn2k000427xu9o1m5k6b","_id":"cjhhhvn3q000r27xugnzepb8y"},{"post_id":"cjhhhvn3r000s27xu9z9puyq5","tag_id":"cjhhhvn2k000427xu9o1m5k6b","_id":"cjhhhvn3w000v27xuf0ckc17w"},{"post_id":"cjhhhvn2s000727xux51f0r4r","tag_id":"cjhhhvn3n000p27xue1wejcou","_id":"cjhhhvn42000z27xuzqw9f3bu"},{"post_id":"cjhhhvn2s000727xux51f0r4r","tag_id":"cjhhhvn2x000927xuw5092dq8","_id":"cjhhhvn44001127xu2td60523"},{"post_id":"cjhhhvn2v000827xurqbnxkf7","tag_id":"cjhhhvn2x000927xuw5092dq8","_id":"cjhhhvn47001427xuvi2svsgx"},{"post_id":"cjhhhvn2v000827xurqbnxkf7","tag_id":"cjhhhvn44001227xur6ditjru","_id":"cjhhhvn47001527xugkbxi09b"},{"post_id":"cjhhhvn2y000a27xuzinkz63w","tag_id":"cjhhhvn46001327xutftltogg","_id":"cjhhhvn49001827xuwfwaz8tv"},{"post_id":"cjhhhvn2y000a27xuzinkz63w","tag_id":"cjhhhvn47001627xux2v6tyke","_id":"cjhhhvn4a001927xufxzcnlw2"},{"post_id":"cjhhhvn31000b27xuhajizvxk","tag_id":"cjhhhvn46001327xutftltogg","_id":"cjhhhvn4c001c27xuhu4j13w7"},{"post_id":"cjhhhvn31000b27xuhajizvxk","tag_id":"cjhhhvn47001627xux2v6tyke","_id":"cjhhhvn4c001d27xuiifir3l4"},{"post_id":"cjhhhvn37000d27xutoux13jb","tag_id":"cjhhhvn4b001b27xufnphb9bg","_id":"cjhhhvn4f001h27xurp17zq4q"},{"post_id":"cjhhhvn37000d27xutoux13jb","tag_id":"cjhhhvn47001627xux2v6tyke","_id":"cjhhhvn4g001i27xu7wcyy60g"},{"post_id":"cjhhhvn37000d27xutoux13jb","tag_id":"cjhhhvn4d001f27xus32xvylg","_id":"cjhhhvn4h001k27xunucjzrnh"},{"post_id":"cjhhhvn39000f27xuhfcnoiid","tag_id":"cjhhhvn4b001b27xufnphb9bg","_id":"cjhhhvn4l001n27xu3glzjsvv"},{"post_id":"cjhhhvn39000f27xuhfcnoiid","tag_id":"cjhhhvn47001627xux2v6tyke","_id":"cjhhhvn4l001o27xukjvelswf"},{"post_id":"cjhhhvn39000f27xuhfcnoiid","tag_id":"cjhhhvn4d001f27xus32xvylg","_id":"cjhhhvn4n001q27xuctlf5coo"},{"post_id":"cjhhhvn3b000i27xubcsorig1","tag_id":"cjhhhvn4k001m27xu7chcqzjq","_id":"cjhhhvn4n001r27xuurpx26ue"},{"post_id":"cjhhhvn3f000j27xuz7gz4wf8","tag_id":"cjhhhvn44001227xur6ditjru","_id":"cjhhhvn4o001t27xuzdsjosfg"},{"post_id":"cjhhhvn3f000j27xuz7gz4wf8","tag_id":"cjhhhvn2x000927xuw5092dq8","_id":"cjhhhvn4o001u27xuj49pag9a"},{"post_id":"cjhhhvn3i000l27xuq2i0osgn","tag_id":"cjhhhvn2k000427xu9o1m5k6b","_id":"cjhhhvn4p001w27xuktjg3rrx"},{"post_id":"cjhhhvn3i000l27xuq2i0osgn","tag_id":"cjhhhvn4n001s27xu6jgwmo6v","_id":"cjhhhvn4p001x27xu322pl6wz"},{"post_id":"cjhhhvn3k000n27xuktxlgngh","tag_id":"cjhhhvn4o001v27xumjro2c31","_id":"cjhhhvn4s002227xuhcv71cyw"},{"post_id":"cjhhhvn3k000n27xuktxlgngh","tag_id":"cjhhhvn4p001y27xu5wz630gg","_id":"cjhhhvn4s002327xu4t7s6mix"},{"post_id":"cjhhhvn3k000n27xuktxlgngh","tag_id":"cjhhhvn4q001z27xuilh9oshy","_id":"cjhhhvn4t002527xupvtsu4e6"},{"post_id":"cjhhhvn3k000n27xuktxlgngh","tag_id":"cjhhhvn47001627xux2v6tyke","_id":"cjhhhvn4t002627xu06ahhyer"},{"post_id":"cjhhhvn3o000q27xu4toepsdg","tag_id":"cjhhhvn4o001v27xumjro2c31","_id":"cjhhhvn4v002827xu4zrb146z"},{"post_id":"cjhhhvn3o000q27xu4toepsdg","tag_id":"cjhhhvn4t002427xui76lexeu","_id":"cjhhhvn4v002927xua3cuqfxb"},{"post_id":"cjhhhvn3t000u27xudu0323p1","tag_id":"cjhhhvn47001627xux2v6tyke","_id":"cjhhhvn4w002c27xur544ux78"},{"post_id":"cjhhhvn3t000u27xudu0323p1","tag_id":"cjhhhvn4v002a27xu53pmkvuu","_id":"cjhhhvn4w002d27xu9rwdnpz2"},{"post_id":"cjhhhvn3x000w27xumcbmjg5n","tag_id":"cjhhhvn4q001z27xuilh9oshy","_id":"cjhhhvn4y002h27xupf9k6b0z"},{"post_id":"cjhhhvn3x000w27xumcbmjg5n","tag_id":"cjhhhvn4x002e27xusav9uun0","_id":"cjhhhvn4z002i27xuw6p2w2rj"},{"post_id":"cjhhhvn3x000w27xumcbmjg5n","tag_id":"cjhhhvn47001627xux2v6tyke","_id":"cjhhhvn4z002k27xuevddmdmu"},{"post_id":"cjhhhvn40000y27xuuqg66v0e","tag_id":"cjhhhvn4q001z27xuilh9oshy","_id":"cjhhhvn51002n27xurwjtxe4h"},{"post_id":"cjhhhvn40000y27xuuqg66v0e","tag_id":"cjhhhvn4z002j27xu1znq3dxy","_id":"cjhhhvn51002o27xuulx7x7fl"},{"post_id":"cjhhhvn40000y27xuuqg66v0e","tag_id":"cjhhhvn47001627xux2v6tyke","_id":"cjhhhvn51002q27xub4ye1e3x"},{"post_id":"cjhhhvn42001027xuu6vkjy8o","tag_id":"cjhhhvn4q001z27xuilh9oshy","_id":"cjhhhvn53002s27xu9wzvktkl"},{"post_id":"cjhhhvn42001027xuu6vkjy8o","tag_id":"cjhhhvn4x002e27xusav9uun0","_id":"cjhhhvn53002t27xupogjyquz"},{"post_id":"cjhhhvn42001027xuu6vkjy8o","tag_id":"cjhhhvn47001627xux2v6tyke","_id":"cjhhhvn53002u27xukb4pb1xj"}],"Tag":[{"name":"Docker","_id":"cjhhhvn2k000427xu9o1m5k6b"},{"name":"配置","_id":"cjhhhvn2x000927xuw5092dq8"},{"name":"MySQL","_id":"cjhhhvn3a000h27xuua3aw5om"},{"name":"Gitlab","_id":"cjhhhvn3n000p27xue1wejcou"},{"name":"杂记","_id":"cjhhhvn44001227xur6ditjru"},{"name":"爬虫","_id":"cjhhhvn46001327xutftltogg"},{"name":"Java","_id":"cjhhhvn47001627xux2v6tyke"},{"name":"补锅笔记","_id":"cjhhhvn4b001b27xufnphb9bg"},{"name":"反射","_id":"cjhhhvn4d001f27xus32xvylg"},{"name":"随笔","_id":"cjhhhvn4k001m27xu7chcqzjq"},{"name":"Spring Boot","_id":"cjhhhvn4n001s27xu6jgwmo6v"},{"name":"数据挖掘","_id":"cjhhhvn4o001v27xumjro2c31"},{"name":"足球","_id":"cjhhhvn4p001y27xu5wz630gg"},{"name":"算法","_id":"cjhhhvn4q001z27xuilh9oshy"},{"name":"数据分析","_id":"cjhhhvn4t002427xui76lexeu"},{"name":"Spring","_id":"cjhhhvn4v002a27xu53pmkvuu"},{"name":"机器学习","_id":"cjhhhvn4x002e27xusav9uun0"},{"name":"排序","_id":"cjhhhvn4z002j27xu1znq3dxy"}]}}