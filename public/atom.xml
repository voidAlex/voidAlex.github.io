<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>voidAlex的记事本</title>
  
  <subtitle>长路漫漫，唯剑作伴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://voidalex.one/"/>
  <updated>2018-05-22T14:18:02.744Z</updated>
  <id>https://voidalex.one/</id>
  
  <author>
    <name>voidAlex</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>test</title>
    <link href="https://voidalex.one/2018/05/22/test/"/>
    <id>https://voidalex.one/2018/05/22/test/</id>
    <published>2018-05-22T06:18:01.000Z</published>
    <updated>2018-05-22T14:18:02.744Z</updated>
    
    <content type="html"><![CDATA[<p>test</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;test&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一种在服务器上部署Hexo博客的思路</title>
    <link href="https://voidalex.one/2018/02/19/%E4%B8%80%E7%A7%8D%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%80%9D%E8%B7%AF/"/>
    <id>https://voidalex.one/2018/02/19/一种在服务器上部署Hexo博客的思路/</id>
    <published>2018-02-19T05:01:00.000Z</published>
    <updated>2018-02-21T09:31:01.149Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>笔者在过年期间买了域名和VPS，打算迁移博客到VPS上（GitHub Page访问速度实在是……你懂得）。由于平时使用的主力语言是Java，所以找了两个开源的Java博客系统<a href="https://github.com/b3log/solo" target="_blank" rel="noopener">Solo</a>和<a href="https://github.com/otale/tale" target="_blank" rel="noopener">Tale</a>，试用了之后发现都有不满意的地方，比如说：</p><ul><li>主题少</li><li>有广告（虽然是开源的能理解，但是强迫症接受不了……）</li><li>不支持MathJax渲染（虽然自己加上了，但还是有问题，强迫症同样无法接受……）</li><li>……</li></ul><p>思来想去还是hexo好，遂决定把hexo部署在服务器上。搜了一下发现大家都是把VPS当做Git服务器在用，然后用Nginx去解析静态资源。这种方式本质上和托管在GitHub上没什么区别，无非就是解析速度快点而已。这样做除了加快解析速度外，并没有任何好处。写一篇博文还是要经历<code>创建文件--写博文--预览--生成静态资源--使用Git同步</code>这么一个过程。而且在更换电脑后必须配置<code>Node.js</code>、<code>Git</code>、<code>Hexo</code>等一大堆东西之后才能写，等于花VPS的钱，只起到了一个加速效果。</p><p>好在<code>Hexo</code>还有<code>hexo-server</code>和<code>hexo-admin</code>这样的插件。之前并没有觉得<code>hexo-admin</code>这样的插件有什么用，但是在VPS上，它的价值体现出来了。于是，一个部署的思路诞生了：</p><ul><li>使用<code>hexo-server</code>作为hexo的服务器</li><li>使用<code>hexo-admin</code>作为hexo的管理后台</li><li>使用<code>Nginx</code>作为反向代理服务器</li><li>使用<code>Git</code>与GitHub仓库同步（可选）</li></ul><p>这样的话，等于给Hexo博客多了一个后台。成功部署后在本地只需要一个浏览器就可以美滋滋的写博客了~</p><p>阅读前方内容需要一定的基础，假设你已经在GitHub Page上成功的部署了你的博客，并且有一定的Linux基础知识。如果你还没有使用过Hexo，那么可以先看看<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">官方文档</a>和<a href="https://zhuanlan.zhihu.com/p/25471760" target="_blank" rel="noopener">这篇教程</a>。</p><h2 id="（题外话）域名和VPS"><a href="#（题外话）域名和VPS" class="headerlink" title="（题外话）域名和VPS"></a>（题外话）域名和VPS</h2><p>在国内购买服务器和域名需要备案。为了避免麻烦笔者选择了<a href="https://godaddy.com/" target="_blank" rel="noopener">狗爹</a>和<a href="https://www.vultr.com/?ref=7336080" target="_blank" rel="noopener">vultr</a>。VPS套餐选择的是每个月5刀的套餐，配置只有1核CUP和1GB内存（编译Node.js用了40分钟），但是已经足够。</p><h2 id="服务器的环境配置"><a href="#服务器的环境配置" class="headerlink" title="服务器的环境配置"></a>服务器的环境配置</h2><p>服务器配置的所有操作均为在Ubuntu 16.04下的操作。</p><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>Hexo是在Node.js上构建的博客系统，通过Node.js将<code>.md</code>文件渲染为<code>.html</code>文件。所以，安装Node.js必不可少。</p><p>安装Node.js的方法很多，笔者选择下载源码编译安装。注意，编译安装的时间长短视你的服务器配置而定，笔者的小水管上编译了40多分钟才玩。</p><p>首先安装<code>gcc</code>、<code>g++</code>、<code>make</code>、<code>python</code>等编译解释环境：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt update #老版本Ubuntu请使用apt-get</div><div class="line">sudo apt install gcc g++ make python</div></pre></td></tr></table></figure></p><p>获取Node.js的源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget http://nodejs.org/dist/latest-v8.x/node-v8.9.4.tar.gz</div><div class="line">tar zxvf node-v8.9.4.tar.gz</div></pre></td></tr></table></figure></p><p>开始安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd node-v8.9.4</div><div class="line">./configure#如果gcc、make等依赖未安装会报错</div><div class="line">make install#安装时间较长</div></pre></td></tr></table></figure></p><p>安装完成之后验证：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node -v</div><div class="line">v8.9.4</div></pre></td></tr></table></figure></p><h3 id="安装Nginx并配置反向代理"><a href="#安装Nginx并配置反向代理" class="headerlink" title="安装Nginx并配置反向代理"></a>安装Nginx并配置反向代理</h3><p>Nginx在Ubuntu下的安装较为简单，直接通过apt源即可安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt update</div><div class="line">sudo apt install nginx</div></pre></td></tr></table></figure><p>启动Nginx：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service nginx start</div></pre></td></tr></table></figure></p><p>在浏览器中输入你的服务器ip进行验证（不用加端口号），如果能看见Nginx的欢迎页面说明安装成功。</p><p>编辑<code>/etc/nginx/nginx.conf</code>，配置反向代理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">listen       80; #监听端口，默认为http请求的80端口</div><div class="line">    server_name  voidalex.one;#你的域名</div><div class="line">    </div><div class="line">    location / &#123;</div><div class="line">        proxy_pass http://localhost:4000/;#代理转发，你的hexo服务器的地址</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>保存完毕，执行<code>service nginx reload</code>重启Nginx服务器。</p><h2 id="配置DNS解析"><a href="#配置DNS解析" class="headerlink" title="配置DNS解析"></a>配置DNS解析</h2><p>在你购买的域名服务商的控制面板中，配置DNS解析，IP为你的服务器公网IP（不加端口）。设置完毕稍等一会（DNS服务器需要刷新缓存），访问你的域名即可看到Nginx的欢迎页面。</p><h2 id="本地配置Hexo"><a href="#本地配置Hexo" class="headerlink" title="本地配置Hexo"></a>本地配置Hexo</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>在服务器运行Hexo需要依赖于<code>hexo-server</code>和<code>hexo-admin</code>。如果你在本地已经安装这两个插件，请跳过这一步。（当然你也可以直接copy你的hexo博客目录到服务器上安装这两个插件，不过在本地先安装方便调试）</p><p>cd到你的博客根目录下，执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install hexo-server@0.3.1 --save</div><div class="line">npm install hexo-admin@2.3.0 --save</div></pre></td></tr></table></figure></p><p>安装完毕后，执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s</div></pre></td></tr></table></figure></p><p>打开浏览器，访问<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 即可预览博客，访问<a href="http://localhost:4000/admin" target="_blank" rel="noopener">http://localhost:4000/admin</a> 即可进入<code>hexo-admin</code>后台管理界面。</p><h3 id="配置hexo-admin"><a href="#配置hexo-admin" class="headerlink" title="配置hexo-admin"></a>配置hexo-admin</h3><p>hexo-admin默认没有开启密码保护，需要自己手动开启。</p><p>访问<a href="http://localhost:4000/admin" target="_blank" rel="noopener">http://localhost:4000/admin</a> 点击<code>Settings--Setup authentification here</code>进行密码设置：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/93762063.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>输入用户名、密码后，将生成的代码复制：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/98662173.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>然后打开博客根目录下的<code>_config.yml</code>，将复制的代码粘贴到末尾。</p><p>重新启动hexo服务器，访问<a href="http://localhost:4000/admin" target="_blank" rel="noopener">http://localhost:4000/admin</a> 如果出现登录界面，则配置成功。</p><h2 id="将Hexo博客迁移至服务器"><a href="#将Hexo博客迁移至服务器" class="headerlink" title="将Hexo博客迁移至服务器"></a>将Hexo博客迁移至服务器</h2><p>很简单，将你的整个博客目录打包，然后上传到服务器，然后解包。你在本地使用npm安装的hexo插件都在博客根目录下的<code>node_modules</code>目录下。如果你没有动这个目录，那么在服务器上解包之后就能直接用了。解包推荐使用<code>unzip</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">unzip blog.zip</div><div class="line">cd blog</div><div class="line">hexo s</div></pre></td></tr></table></figure><p>如果一切正常，访问你的域名就可以看到博客了，访问域名/admin就能进入到后台界面。</p><blockquote><p>Tips：如果执行hexo相关命令报错的话，按照博客根目录下<code>package.json</code>中列出的插件名和版本重新按照一遍就好了。如：<code>npm install hexo@3.5.0 --save</code></p></blockquote><h2 id="善后工作"><a href="#善后工作" class="headerlink" title="善后工作"></a>善后工作</h2><p>实际上，到上一步已经成功的把Hexo部署在服务器上了。但是为了获得更好的体验还是需要再进行一些配置。</p><h3 id="后台运行hexo"><a href="#后台运行hexo" class="headerlink" title="后台运行hexo"></a>后台运行hexo</h3><p>直接使用<code>hexo s</code>启动服务器，Ctrl+C或者shell关掉就结束进程了。可以使用<code>nohup</code>来后台运行hexo。在博客根目录下，执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup hexo s &amp;</div></pre></td></tr></table></figure><p>这样hexo就会运行在后台，输出的日志会被记录在<code>nohup.out</code>中。</p><h3 id="优化解析速度"><a href="#优化解析速度" class="headerlink" title="优化解析速度"></a>优化解析速度</h3><p>部署好了，但是加载速度仍然很慢。原因是每次访问的时候hexo都会动态的去加载<code>.md</code>文件，然后由Node.js渲染成html，再展示出来。看到hexo的官方文档中提了这么一句：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/65761270.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>重启服务器之后，果然加载快了很多很多。</p><p>然而，这样启动服务器，你在后台编辑过的文章都不会被加载出来。需要你手动的执行<code>hexo g</code>命令，才能加载出来。</p><p>强迫症是忍受不了这样的操作的，好在<code>hexo-admin</code>中提供了这样一个功能：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/5139675.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>点击按钮就能执行你的部署脚本。在博客根目录下的<code>_config.yml</code>中添加配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">admin:</div><div class="line">deployCommand: &apos;./hexo-deploy.sh&apos;</div></pre></td></tr></table></figure></p><p>然后在博客根目录下创建<code>hexo-deploy.sh</code>，并编辑：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env sh</div><div class="line">hexo g</div></pre></td></tr></table></figure></p><p>给<code>hexo-deploy.sh</code>授予权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod a+x hexo-deploy.sh</div></pre></td></tr></table></figure></p><p>重启服务器，编辑博文后点击Deploy按钮就可以把文章渲染成html页面来访问了。</p><h3 id="与GitHub-Page同步"><a href="#与GitHub-Page同步" class="headerlink" title="与GitHub Page同步"></a>与GitHub Page同步</h3><p>如果想在服务器上和原仓库同步的话，只需要配置Git，然后修改部署脚本就行了。Git的安装和配置不在赘述，要注意的是服务器上安装的Git不是用来配置Git服务器的，而是当做一个用户来提交代码的。配置完记得在你的GitHub中添加秘钥。</p><p>配置完之后，只需要修改<code>hexo-deploy.sh</code>就可以了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env sh</div><div class="line">hexo g -d</div></pre></td></tr></table></figure></p><p>然后重启服务器，以后每次点击deploy按钮时都会把渲染的html页面提交到GitHub仓库里。输出信息如下图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/8761275.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/27412.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>如果看到这些信息，说明配置没有问题，代码已经提交成功了。</p><p>验证一下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/52277650.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://voidalex-blog.oss-cn-beijing.aliyuncs.com/18-2-21/51560676.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="安利一下"><a href="#安利一下" class="headerlink" title="安利一下"></a>安利一下</h2><p>安利几个好东西吧。</p><p><a href="https://sg.godaddy.com/zh/" target="_blank" rel="noopener">狗爹</a>，全球最大的域名服务商</p><p><a href="https://www.vultr.com/?ref=7336080" target="_blank" rel="noopener">vultr</a>，美帝的VPS提供商，按分钟计费。推荐每个月5刀的套餐，硅谷节点（千万不要选新加坡和日本节点，很容易被墙而且速度奇慢）</p><p><a href="https://github.com/Moeditor/Moeditor" target="_blank" rel="noopener">Moeditor</a>，十分简洁舒服的Markdown编辑器</p><p><a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="noopener">indigo</a>，很好看的一个Hexo主题</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;笔者在过年期间买了域名和VPS，打算迁移博客到VPS上（GitHub Page访问速度实在是……你懂得）。由于平时使用的主力语言是Java，
      
    
    </summary>
    
    
      <category term="配置" scheme="https://voidalex.one/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="杂记" scheme="https://voidalex.one/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>理解Spring中的依赖注入</title>
    <link href="https://voidalex.one/2017/11/09/%E7%90%86%E8%A7%A3Spring%E4%B8%AD%E7%9A%84%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    <id>https://voidalex.one/2017/11/09/理解Spring中的依赖注入/</id>
    <published>2017-11-09T12:55:00.000Z</published>
    <updated>2017-11-10T09:24:10.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是voidAlex原创的第十七篇博文。<br><a id="more"></a></p></blockquote><h2 id="依赖注入和控制翻转"><a href="#依赖注入和控制翻转" class="headerlink" title="依赖注入和控制翻转"></a>依赖注入和控制翻转</h2><p><code>IoC</code>(Inversion of Control，控制翻转)和<code>DI</code>(Dependency Injection，依赖注入)在Spring下是同等的概念。控制翻转是通过依赖注入来实现的。依赖注入是指由容器负责创建对象和负责维护对象间的依赖关系，从而实现解耦，体现一种组合的理念。</p><p>任何一个实际的应用，都会由两个或者更多的类组成。这些类之间相互调用以完成特定的业务逻辑。每个对象负责管理和调用与自己相互协作的对象，这会导致高度耦合的代码。</p><p>耦合具有两面性。一方面，高度耦合的代码将会难以测试，难以复用，难以理解，并且会表现出“打地鼠”式的bug特性（修复一个bug，又出现更多的新bug）。但是，一定程度的耦合又是必须的，完全没有耦合的代码什么也做不了。为了完成特定的功能，不同的代码之间必须进行交互。</p><p>通过依赖注入，创建被调用者的工作不再由调用者来完成，而是由Spring容器来完成，然后注入到调用者。这也意味着，当需要切换依赖的时候，不需要改变调用者的代码。依赖关系将被自动注入到需要它们的对象当中去。</p><p>知乎上有个回答，总结的相当到位。原文点<a href="https://www.zhihu.com/question/27053548/answer/113488399" target="_blank" rel="noopener">这里</a>。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://osuro1ft2.bkt.clouddn.com//17-11-10/77388616.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="传统的做法"><a href="#传统的做法" class="headerlink" title="传统的做法"></a>传统的做法</h3><p>考虑下面代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JayChouCD</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> JayChouCD cd;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playCD</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.cd = <span class="keyword">new</span> JayChouCD();</div><div class="line">        <span class="keyword">this</span>.cd.play();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们有一个CD机，它需要一张CD才能够播放，或者说，<code>CDPlayer</code>依赖于<code>CD</code>。在上面的代码中，我们直接通过<code>new</code>关键字给<code>CDPlayer</code>创建了一个<code>JayChouCD</code>的实例，这样我们就能在这个CD机上听周杰伦的歌了。</p><h3 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h3><p>但是，这样做，我们能够听的歌十分有限，只能在这个CD机上听周杰伦的CD。考虑使用面向接口的编程方式改写上面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CD</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDPlayer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> CD cd;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playCD</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.cd = <span class="keyword">new</span> JayChouCD();</div><div class="line">        <span class="keyword">this</span>.cd.play();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>与CD机直接打交道的类变成了<code>CD</code>，即使它最终实现依然是<code>JayChouCD</code>，但是这样做已经有明显的好处，所有调用都通过接口<code>CD</code>来完成。需要替换<code>JayChouCD</code>类，想听其他人的歌时，也只需要修改<code>CD</code>指向新的实现类。</p><h3 id="动态生成对象"><a href="#动态生成对象" class="headerlink" title="动态生成对象"></a>动态生成对象</h3><p>虽然上述代码已经很大程度的降低了耦合，但是耦合依然存在。想听其他人的歌曲时依然需要修改<code>CDPlayer</code>类内部的代码。当依赖过多的时候，修改起来会相当的麻烦。考虑通过反射机制中的动态加载类来修改上述代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CD</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> class <span class="title">CDPlayer</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String CLASS_NAME = <span class="string">"JayChouCD"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> CD cd;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playCD</span><span class="params">()</span> </span>&#123;</div><div class="line">        Class <span class="class"><span class="keyword">class</span> </span>= Class.forName(CLASS_NAME);</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.cd = (CD) <span class="class"><span class="keyword">class</span>.<span class="title">newInstance</span>()</span>;</div><div class="line">        <span class="keyword">this</span>.cd.play();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样，我们动态的得到了<code>CD</code>的实例，不必每次都为听谁的歌而苦恼了，只需要告诉CD机类名即可。获得类名可以通过配置文件去实现。这样我们就实现了<code>CD</code>和<code>CDPlayer</code>间的解耦。实际上，Spring中DI的底层就是通过反射机制来实现的。</p><h3 id="使用Spring的DI"><a href="#使用Spring的DI" class="headerlink" title="使用Spring的DI"></a>使用Spring的DI</h3><p> Spring支持使用<code>xml</code>、<code>Java Config</code>和注解去装配Bena。Spring Boot推荐使用注解和<code>Java Config</code>的方式。使用Spring Boot的方式继续改造上面的代码：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CD</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JayChouCD</span> <span class="keyword">implements</span> <span class="title">CD</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String title = <span class="string">"哎呦，不错哦！"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(title);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> class <span class="title">CDPlayer</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> CD cd;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playCD</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.cd.play();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p> 首先使用<code>@Component</code>注解告诉Spring，这个类是一个让你进行管理的bean，这意味着在其他类中可以通过Spring的依赖注入来得到它的实例。所以，在<code>CDPlayer</code>类中，我们使用了<code>@Autowired</code>注解，来将一个<code>CD</code>注入到<code>CDPlayer</code>中。</p><p> Spring中，所有的Bean都通过IoC容器（ApplicationContext）来创建，并负责注入到需要的bean中。Spring Boot中，有四种常用的声明Bena的注解：</p><blockquote><ul><li><code>@Component</code>：组件，没有明确的角色</li><li><code>@Service</code>：在业务逻辑层使用（Service层）</li><li><code>@Repository</code>：在数据访问层使用（dao层）</li><li><code>@Controller</code>：在展现层使用（MVC）</li></ul></blockquote><p> 注入Bena的注解，一般情况下通用：</p><blockquote><ul><li><code>@Autowried</code>：Spring提供的注解</li><li><code>@Inject</code></li><li><code>@Resource</code></li></ul></blockquote><p> 这三个注解都可以用在属性、<code>set</code>方法、构造方法上。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p> 一句话：控制翻转是将对象的创建权翻转给Spring，依赖注入是在Spring创建对象的过程中，把对象依赖的属性注入到类中。控制翻转是通过依赖注入来实现的。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p> 《精通Spring 4.x 企业应用开发实战》</p><p> 《Spring实战》</p><p> <a href="http://blog.csdn.net/javazejian/article/details/54561302" target="_blank" rel="noopener">CSND博客：关于Spring IOC (DI-依赖注入)你需要知道的一切</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这是voidAlex原创的第十七篇博文。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://voidalex.one/tags/Java/"/>
    
      <category term="Spring" scheme="https://voidalex.one/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Docker容器间的互联</title>
    <link href="https://voidalex.one/2017/11/08/Docker%E5%AE%B9%E5%99%A8%E9%97%B4%E7%9A%84%E4%BA%92%E8%81%94/"/>
    <id>https://voidalex.one/2017/11/08/Docker容器间的互联/</id>
    <published>2017-11-08T08:55:53.000Z</published>
    <updated>2017-11-10T09:26:57.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是voidAlex原创的第十六篇博文。<br><a id="more"></a></p></blockquote><p>在Docker中，容器间是相互独立的。各个容器有自己的进程空间、文件系统、网络空间等。然而，容器如果不能和外界通信，是没用什么卵用的。它们只有相互通信的时候才能发挥作用。</p><h2 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h2><p>实际上，在之前使用<code>Spring Boot</code>和<code>mysql</code>的文章中已经在使用端口绑定了。在启动容器的时候可以可以加<code>-p</code>参数将容器的端口绑定到宿主机的端口：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run <span class="_">-d</span> --name myMysql --volumes-from sqldata <span class="_">-e</span> MYSQL_ROOT_PASSWORD=123456 -p 3307:3306 mysql</div></pre></td></tr></table></figure><p>上面这条命令就是将<code>mysql</code>在容器中的<code>3306</code>端口映射到了宿主机的<code>3307</code>端口。然后通过宿主机的IP和端口，就能在外部访问这个<code>mysql</code>容器了。</p><h2 id="容器链接"><a href="#容器链接" class="headerlink" title="容器链接"></a>容器链接</h2><p>使用容器链接可以更方便的实现容器间互联。将一个容器链接到另一个容器时，Docker会添加一些环境变量来获取关联容器之间的信息。在启动容器的时候使用<code>--link</code>参数来链接其他容器：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -p 8848:8848 --name jzfp --link myMysql -t jzfp/gsjzfp</div></pre></td></tr></table></figure><p>启动后，该容器会将<code>myMysql</code>的网络信息以环境变量的形式添加到<code>jzfp</code>容器中，使得这个容器能够访问它。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>在Docker部署<code>Spring Boot</code>应用，并且通过容器链接来访问<code>mysql</code>中的数据。</p><h3 id="启动mysql容器"><a href="#启动mysql容器" class="headerlink" title="启动mysql容器"></a>启动mysql容器</h3><p>首先启动一个<code>mysql</code>容器，映射到宿主机的<code>8849</code>端口：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run <span class="_">-d</span> --name myMysql --volumes-from sqldata <span class="_">-e</span> MYSQL_ROOT_PASSWORD=123456 -p 8849:3306 mysql</div></pre></td></tr></table></figure><p>进入容器，设置外部访问账户：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">exec</span> -t -i myMysql /bin/bash</div><div class="line">mysql -uroot -p</div><div class="line">grant all on *.* to <span class="string">'test'</span>@<span class="string">'%'</span> identified by <span class="string">'1234'</span>;</div></pre></td></tr></table></figure><p>这时候，容器外部可以通过<code>8849</code>端口，使用<code>test</code>账户访问<code>mysql</code>。</p><h3 id="配置Spring-Boot数据库连接"><a href="#配置Spring-Boot数据库连接" class="headerlink" title="配置Spring Boot数据库连接"></a>配置Spring Boot数据库连接</h3><p>修改<code>application.properties</code>中的数据库连接配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">spring.datasource.url = jdbc:mysql://myMysql:3306/jzfpsd?characterEncoding=UTF-8</div><div class="line">spring.datasource.username = <span class="built_in">test</span></div><div class="line">spring.datasource.password = 1234</div><div class="line">spring.datasource.driver-class-name = com.mysql.jdbc.Driver</div></pre></td></tr></table></figure><p>可以看到，我们直接配置了数据库的IP地址为<code>myMysql</code>容器的名称。在启动该容器链接到<code>myMysql</code>后，即可通过Docker添加的环境变量去访问<code>myMysql</code>容器。</p><p>编译<code>Spring Boot</code>应用并生成镜像：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn clean package -Dmaven.test.skip=<span class="literal">true</span> docker:build</div></pre></td></tr></table></figure><h3 id="启动Spring-Boot容器，链接到mysql"><a href="#启动Spring-Boot容器，链接到mysql" class="headerlink" title="启动Spring Boot容器，链接到mysql"></a>启动Spring Boot容器，链接到mysql</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -p 8848:8848 --name jzfp --link myMysql -t jzfp/gsjzfp</div></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>使用Docker，即可在一台宿主机上实现数据库与WEB应用的分离。而且由于容器间链接和数据卷的特性，我们可以很方便的使用Docker打包数据文件和镜像，真正的实现一次打包，到处运行。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这是voidAlex原创的第十六篇博文。&lt;br&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://voidalex.one/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker下快速安装MySQL并使用数据卷容器</title>
    <link href="https://voidalex.one/2017/11/06/Docker%E4%B8%8B%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85MySQL%E5%B9%B6%E4%BD%BF%E7%94%A8%E6%95%B0%E6%8D%AE%E5%8D%B7%E5%AE%B9%E5%99%A8/"/>
    <id>https://voidalex.one/2017/11/06/Docker下快速安装MySQL并使用数据卷容器/</id>
    <published>2017-11-06T11:32:34.000Z</published>
    <updated>2017-11-10T09:26:22.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是voidAlex原创的第十五篇博文。<br><a id="more"></a></p></blockquote><h2 id="数据卷和数据卷容器"><a href="#数据卷和数据卷容器" class="headerlink" title="数据卷和数据卷容器"></a>数据卷和数据卷容器</h2><h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><p>Docker下数据卷是一个可供容器直接使用的特殊目录，有如下特性：</p><blockquote><ul><li>数据卷可以在一个或多个容器见共享和重用</li><li>对数据卷的修改会立即生效</li><li>对数据卷的操作不影响镜像</li><li>数据卷的生命周期独立于容器</li></ul></blockquote><h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h3><p>数据卷容器也是一个正常的容器，专门提供数据卷供其他容器挂载的。</p><h2 id="创建数据卷容器"><a href="#创建数据卷容器" class="headerlink" title="创建数据卷容器"></a>创建数据卷容器</h2><p>创建一个名为<code>sqldata</code>的数据卷容器：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run <span class="_">-d</span> -v /data/mysql:/var/lib/mysql --name sqldata training/postgres</div></pre></td></tr></table></figure><p>这个命令会创建一个名为<code>sqldata</code>的数据卷容器，并且将容器中的<code>/var/lib/mysql</code>目录映射到宿主机的<code>/data/mysql</code>下。</p><h2 id="创建mysql容器并挂载数据卷容器"><a href="#创建mysql容器并挂载数据卷容器" class="headerlink" title="创建mysql容器并挂载数据卷容器"></a>创建mysql容器并挂载数据卷容器</h2><p>首先拉去<code>mysql</code>的镜像：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull mysql</div></pre></td></tr></table></figure><p>创建<code>mysql</code>容器，并挂载数据卷<code>sqldata</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run <span class="_">-d</span> --name myMysql --volumes-from sqldata <span class="_">-e</span> MYSQL_ROOT_PASSWORD=123456 -p 3306:3306 mysql</div></pre></td></tr></table></figure><p>这个命令会创建一个MySQL容器，为<code>root</code>用户设置密码为<code>123456</code>，并且挂载<code>sqldata</code>数据卷。</p><p>进入到<code>myMysql</code>容器中，并且登录到mysql服务器：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">exec</span> -t -i myMysql /bin/bash</div><div class="line">mysql -uroot -p</div></pre></td></tr></table></figure><p>这时候，root用户只能通过<code>localhost</code>访问，增加用户，授予其对应权限：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grant all on *.* to <span class="string">'test'</span>@<span class="string">'%'</span> identified by <span class="string">'1234'</span>;</div></pre></td></tr></table></figure><p>创建<code>test</code>用户后，就可以以正常访问mysql数据库的方式远程访问<code>myMysql</code>容器了。</p><h2 id="通过数据卷容器备份、恢复和迁移数据"><a href="#通过数据卷容器备份、恢复和迁移数据" class="headerlink" title="通过数据卷容器备份、恢复和迁移数据"></a>通过数据卷容器备份、恢复和迁移数据</h2><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>创建一个新容器，加载<code>sqldata</code>容器中的数据卷，并从主机挂载当前目录到容器的<code>/backup</code>目录。容器启动后，将<code>sqldata</code>数据卷备份为当前容器中的<code>/backup/backup.tar</code>文件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --volumes-from sqldata -v $(<span class="built_in">pwd</span>):/backup ubuntu tar cvf /backup/backup.tar /data/mysql</div></pre></td></tr></table></figure><h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><p>先创建一个带有空的数据卷的容器：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -v /data/mysql:/var/lib/mysql --name backupdata ubuntu /bin/bash</div></pre></td></tr></table></figure><p>再创建另一个容器，挂载<code>backupdata</code>容器中的数据卷，解压备份文件到挂载的容器数据卷中：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --volumes-from backupdata -v $(<span class="built_in">pwd</span>):/backup busybox tar xvf /backup/backup.tar</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这是voidAlex原创的第十五篇博文。&lt;br&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://voidalex.one/tags/Docker/"/>
    
      <category term="MySQL" scheme="https://voidalex.one/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7下安装Docker并部署Spring Boot应用</title>
    <link href="https://voidalex.one/2017/11/06/CentOS7%E4%B8%8B%E5%AE%89%E8%A3%85Docker/"/>
    <id>https://voidalex.one/2017/11/06/CentOS7下安装Docker/</id>
    <published>2017-11-06T02:07:09.000Z</published>
    <updated>2017-11-10T09:25:51.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是voidAlex原创的第十四篇博文。<br><a id="more"></a></p></blockquote><p>从内核和稳定性的角度考虑，Docker最好安装在Ubuntu 16.04上。但是在生产环境中，总是不可避免的使用CentOS。本文讲述在CentOS下安装Docker的过程。CentOS必须是64位，并且版本大于等于6.5。</p><h2 id="配置静态IP"><a href="#配置静态IP" class="headerlink" title="配置静态IP"></a>配置静态IP</h2><p>先用<code>ip addr</code>查看网卡信息,得到：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1</div><div class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</div><div class="line">    inet 127.0.0.1/8 scope host lo</div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">    inet6 ::1/128 scope host </div><div class="line">       valid_lft forever preferred_lft forever</div><div class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</div><div class="line">    link/ether 00:0c:29:46:eb:2f brd ff:ff:ff:ff:ff:ff</div><div class="line">...</div></pre></td></tr></table></figure><p>可以看到使用的网卡是<code>ens33</code>，所以再修改<code>ifcfg-ens33</code>文件的信息。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</div></pre></td></tr></table></figure><p>修改如下内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">BOOTPROTO=static <span class="comment">#dhcp改为static   </span></div><div class="line">ONBOOT=yes <span class="comment">#开机启用本配置  </span></div><div class="line">IPADDR=202.201.53.161 <span class="comment">#静态IP  </span></div><div class="line">GATEWAY=202.201.53.129 <span class="comment">#默认网关  </span></div><div class="line">NETMASK=255.255.255.0 <span class="comment">#子网掩码  </span></div><div class="line">DNS1=202.201.48.1 <span class="comment">#DNS</span></div><div class="line">DNS2=202.201.48.2</div></pre></td></tr></table></figure><p>修改后效果：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">cat /etc/sysconfig/network-scripts/ifcfg-ens33 </div><div class="line">TYPE=Ethernet</div><div class="line">PROXY_METHOD=none</div><div class="line">BROWSER_ONLY=no</div><div class="line">BOOTPROTO=static</div><div class="line">DEFROUTE=yes</div><div class="line">IPV4_FAILURE_FATAL=no</div><div class="line">IPV6INIT=yes</div><div class="line">IPV6_AUTOCONF=yes</div><div class="line">IPV6_DEFROUTE=yes</div><div class="line">IPV6_FAILURE_FATAL=no</div><div class="line">IPV6_ADDR_GEN_MODE=stable-privacy</div><div class="line">NAME=ens33</div><div class="line">UUID=0c7d8882-dc8a-4e0a-bb82-1bb36aac80a8</div><div class="line">DEVICE=ens33</div><div class="line">ONBOOT=yes</div><div class="line">IPADDR=202.201.53.161</div><div class="line">GATEWAY=202.201.53.129</div><div class="line">NETMASK=255.255.255.0</div><div class="line">DNS1=202.201.48.1</div><div class="line">DNS2=202.201.48.2</div></pre></td></tr></table></figure><p>重启网络服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service network restart</div></pre></td></tr></table></figure><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><h3 id="使用脚本安装"><a href="#使用脚本安装" class="headerlink" title="使用脚本安装"></a>使用脚本安装</h3><p>为了简化安装流程，直接使用官方提供的脚本自动安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl -fsSL get.docker.com -o get-docker.sh</div><div class="line">sh get-docker.sh --mirror Aliyun</div></pre></td></tr></table></figure><h3 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systemctl <span class="built_in">enable</span> docker</div><div class="line">systemctl start docker</div></pre></td></tr></table></figure><h3 id="查看安装信息"><a href="#查看安装信息" class="headerlink" title="查看安装信息"></a>查看安装信息</h3><p>安装完毕后，使用<code>docker version</code>来查看安装信息：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Client:</div><div class="line"> Version:      17.07.0-ce</div><div class="line"> API version:  1.31</div><div class="line"> Go version:   go1.8.3</div><div class="line"> Git commit:   8784753</div><div class="line"> Built:        Tue Aug 29 17:42:01 2017</div><div class="line"> OS/Arch:      linux/amd64</div><div class="line"></div><div class="line">Server:</div><div class="line"> Version:      17.07.0-ce</div><div class="line"> API version:  1.31 (minimum version 1.12)</div><div class="line"> Go version:   go1.8.3</div><div class="line"> Git commit:   8784753</div><div class="line"> Built:        Tue Aug 29 17:43:23 2017</div><div class="line"> OS/Arch:      linux/amd64</div><div class="line"> Experimental: <span class="literal">false</span></div></pre></td></tr></table></figure><h3 id="建立Docker用户组"><a href="#建立Docker用户组" class="headerlink" title="建立Docker用户组"></a>建立Docker用户组</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">groupadd docker</div><div class="line"><span class="comment"># 将当前用户加入docker组</span></div><div class="line">usermod <span class="_">-a</span>G docker <span class="variable">$USER</span></div></pre></td></tr></table></figure><h3 id="添加内核参数"><a href="#添加内核参数" class="headerlink" title="添加内核参数"></a>添加内核参数</h3><p>默认配置下，在CentOS使用Docker会看到这些警告信息：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">WARNING: bridge-nf-call-iptables is disabled</div><div class="line">WARNING: bridge-nf-call-ip6tables is disabled</div></pre></td></tr></table></figure><p>添加内核配置信息启用这些功能：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tee <span class="_">-a</span> /etc/sysctl.conf &lt;&lt;-EOF</div><div class="line">net.bridge.bridge-nf-call-ip6tables = 1</div><div class="line">net.bridge.bridge-nf-call-iptables = 1</div><div class="line">EOF</div></pre></td></tr></table></figure><p>重新加载<code>sysctl.conf</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sysctl -p</div></pre></td></tr></table></figure><h3 id="生成镜像并运行"><a href="#生成镜像并运行" class="headerlink" title="生成镜像并运行"></a>生成镜像并运行</h3><p>生成镜像和运行的步骤与在Ubuntu下的一样，在这里不再赘述。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这是voidAlex原创的第十四篇博文。&lt;br&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://voidalex.one/tags/Docker/"/>
    
      <category term="配置" scheme="https://voidalex.one/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>理解Docker中的三大核心概念：镜像、容器、仓库</title>
    <link href="https://voidalex.one/2017/11/05/%E7%90%86%E8%A7%A3Docker%E4%B8%AD%E7%9A%84%E4%B8%89%E5%A4%A7%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%EF%BC%9A%E9%95%9C%E5%83%8F%E3%80%81%E5%AE%B9%E5%99%A8%E3%80%81%E4%BB%93%E5%BA%93/"/>
    <id>https://voidalex.one/2017/11/05/理解Docker中的三大核心概念：镜像、容器、仓库/</id>
    <published>2017-11-05T07:17:27.000Z</published>
    <updated>2017-11-05T14:29:29.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是voidAlex原创的第十三篇博文。<br><a id="more"></a></p></blockquote><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><p> Docker镜像（Image）是一个特殊的文件系统，里面包含了容器运行时所需要的程序、库、资源、配置等文件和一些为运行时准备的配置参数，如匿名卷、环境变量、用户等。之所以说他特殊是因为它不会包含任何动态数据，其内容在构建之后也不会被改变。镜像可以是一个完整是操作系统，可以是一个数据库，可以是一个服务器，甚至可以只是一个WEB应用。</p><p> Docker中的镜像并非是一个像ISO文件那样的打包文件，镜像只是一个虚拟的概念，实际体现并非由一个文件组成，而是由一组文件组成，或者说由多层文件联合组成。镜像在构建时，会一层一层构建，前一层是后一层的基础。每一层构建完就不会发生改变，后一层上的任何改变只是发生在自己这一层。分层存储的特征使得镜像的复用、定制变得更为容易。</p><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>容器（Container）的实质是进程，它是一个轻量级的沙箱，来隔离和运行应用。与直接在宿主机上执行的进程不同，容器的进程运行于自己独立的命名空间中。因此它可以拥有自己的进程空间、文件系统、网络空间、用户权限。容器内的进程运行在一个沙箱中，使用起来就好像一个独立于宿主的操作系统下操作一样。这种特性使得容器封装的应用运行更加安全。</p><p>容器也使用分层存储。每个容器运行时都会以镜像为基础层，在其上创建一个当前容器的存储层。存储层的生命周期和容器一样，容器消亡时，容器存储层也会消亡。</p><p>可以用面向对象程序设计中类和实例的关系来理解镜像和容器的关系。类和镜像都是静态的定义，容器和实例是运行时的实体，它们都可以被创建、删除，删除时，它们的数据也会随之消亡。</p><p>容器所有的文件写入操作，都应该使用数据卷或者绑定宿主目录。数据卷的生命周期独立于容器，容器消亡，数据卷不会消亡。</p><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><p>仓库（Repository）类似于代码仓库，用来集中存储、分发镜像。根据所存储的镜像公开分享与否，仓库可以分为公开仓库和私有仓库。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这是voidAlex原创的第十三篇博文。&lt;br&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://voidalex.one/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Google Java Style Guide在IntelliJ IDEA中的配置</title>
    <link href="https://voidalex.one/2017/11/04/Google-Java-Style-Guide%E5%9C%A8IntelliJ-IDEA%E4%B8%AD%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <id>https://voidalex.one/2017/11/04/Google-Java-Style-Guide在IntelliJ-IDEA中的配置/</id>
    <published>2017-11-04T12:01:52.000Z</published>
    <updated>2017-11-10T09:27:50.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是voidAlex原创的第十二篇博文。<br><a id="more"></a></p></blockquote><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> git@github.com:google/styleguide.git</div></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在clone的仓库中找到<code>intellij-java-google-style.xml</code>这个文件，然后打开IDEA，<code>File-&gt;Setting-&gt;Editor-&gt;Code Style-&gt;Java</code>，把设置文件导入：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://osuro1ft2.bkt.clouddn.com//17-11-4/84524547.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>选择文件，然后点ok：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://osuro1ft2.bkt.clouddn.com//17-11-4/25350534.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>选择Google Style，配置完成：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://osuro1ft2.bkt.clouddn.com//17-11-4/34945388.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这是voidAlex原创的第十二篇博文。&lt;br&gt;
    
    </summary>
    
    
      <category term="配置" scheme="https://voidalex.one/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="杂记" scheme="https://voidalex.one/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>使用Docker打包和部署Spring Boot应用</title>
    <link href="https://voidalex.one/2017/11/04/%E4%BD%BF%E7%94%A8Docker%E6%89%93%E5%8C%85%E5%92%8C%E9%83%A8%E7%BD%B2Spring-Boot%E5%BA%94%E7%94%A8/"/>
    <id>https://voidalex.one/2017/11/04/使用Docker打包和部署Spring-Boot应用/</id>
    <published>2017-11-04T03:46:13.000Z</published>
    <updated>2017-11-10T09:29:52.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在Ubuntu 16.04下使用Docker部署Spring Boot应用。<br>这是voidAlex原创的第十一篇博文。<br><a id="more"></a></p></blockquote><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h3 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h3><p>简单的来说，Docker是一种容器，属于操作系统层面的虚拟化技术，基于Linux内核对进程进行封装隔离。Docker从文件系统、网络通信到进程隔离等等，极大的简化了容器的创建与维护，使得Docker比传统的虚拟机技术更加轻便快捷。</p><h3 id="与虚拟机技术的比较"><a href="#与虚拟机技术的比较" class="headerlink" title="与虚拟机技术的比较"></a>与虚拟机技术的比较</h3><p>传统虚拟机技术是虚拟出一套硬件，然后在其上运行一个完整的操作系统，在该系统上再运行所需要应用进程。而容器内的进程则直接运行在宿主的内核上，容器没有自己的内核，没有进行硬件虚拟。因此容器比传统的虚拟机更为轻便。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://osuro1ft2.bkt.clouddn.com//17-11-4/82954513.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://osuro1ft2.bkt.clouddn.com//17-11-4/18362650.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Docker的优势"><a href="#Docker的优势" class="headerlink" title="Docker的优势"></a>Docker的优势</h3><ol><li>更高效的利用系统资源</li><li>更快速的启动时间</li><li>一致的运行环境</li><li>持续交付和部署</li><li>更轻松的迁移</li><li>更轻松的维护和扩展</li></ol><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先安装Oracle JDK和Maven，在编译Spring Boot应用时会用到。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">sudo apt update</div><div class="line"><span class="comment"># 配置安装源</span></div><div class="line">sudo apt install python-software-properties</div><div class="line">sudo apt install software-properties-common</div><div class="line">sudo add-apt-repository ppa:webupd8team/java</div><div class="line"><span class="comment"># 安装Oracle JDK</span></div><div class="line">sudo apt update</div><div class="line">sudo apt install oracle-java8-installer</div><div class="line"><span class="comment"># 安装Maven</span></div><div class="line">sudo apt install maven</div></pre></td></tr></table></figure><p>查看安装信息：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">java -version</div><div class="line">mvn -v</div></pre></td></tr></table></figure><p>确保JDK版本为8及以上，Maven版本为3及以上。</p><h2 id="安装和配置Docker"><a href="#安装和配置Docker" class="headerlink" title="安装和配置Docker"></a>安装和配置Docker</h2><h3 id="配置国内安装源"><a href="#配置国内安装源" class="headerlink" title="配置国内安装源"></a>配置国内安装源</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line"></div><div class="line">sudo apt-get install apt-transport-https</div><div class="line">sudo apt-get install ca-certificates</div><div class="line">sudo apt-get install curl</div><div class="line">sudo apt-get install software-properties-common</div><div class="line"></div><div class="line">curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</div><div class="line"></div><div class="line">sudo add-apt-repository \</div><div class="line">    <span class="string">"deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \</span></div><div class="line">    <span class="variable">$(lsb_release -cs)</span> \</div><div class="line">    stable"</div></pre></td></tr></table></figure><h3 id="安装Docker-CE"><a href="#安装Docker-CE" class="headerlink" title="安装Docker CE"></a>安装Docker CE</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install docker-ce</div></pre></td></tr></table></figure><h3 id="脚本自动安装"><a href="#脚本自动安装" class="headerlink" title="脚本自动安装"></a>脚本自动安装</h3><p>可以使用Docker官方提供的脚本来简化安装流程：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl -fsSL get.docker.com -o get-docker.sh</div><div class="line">sudo sh get-docker.sh --mirror Aliyun</div></pre></td></tr></table></figure><h3 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sudo systemctl <span class="built_in">enable</span> docker</div><div class="line">sudo systemctl start docker</div><div class="line"><span class="comment"># 建立Docker用户组</span></div><div class="line">sudo groupadd docker</div><div class="line"><span class="comment"># 将当前用户加入到用户组</span></div><div class="line">sudo usermod <span class="_">-a</span>G docker <span class="variable">$USER</span></div></pre></td></tr></table></figure><h3 id="配置Docker远程访问"><a href="#配置Docker远程访问" class="headerlink" title="配置Docker远程访问"></a>配置Docker远程访问</h3><p>Docker默认不会监听任何端口，因此只能在本地使用Docker。如果先在其他机器上操作Docker主机，就要让Docker守护进程监听一个端口。修改Docker服务配置文件，添加一个未被占用的端口后，重启Docker服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/default/docker</div></pre></td></tr></table></figure><p>添加：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">DOCKER_OPTS=<span class="string">"-H 0.0.0.0:6000"</span></div><div class="line">DOCKER_OPTS=<span class="string">"-H unix:///var/run/docker.sock -H 0.0.0.0:5555"</span></div></pre></td></tr></table></figure><p>重启Docker：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service docker restart</div></pre></td></tr></table></figure><h2 id="Spring-Boot应用配置"><a href="#Spring-Boot应用配置" class="headerlink" title="Spring Boot应用配置"></a>Spring Boot应用配置</h2><h3 id="配置Maven依赖"><a href="#配置Maven依赖" class="headerlink" title="配置Maven依赖"></a>配置Maven依赖</h3><p>在<code>pom.xml</code>中，加入这些内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">docker.image.prefix</span>&gt;</span>jzfp<span class="tag">&lt;/<span class="name">docker.image.prefix</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">dockerHost</span>&gt;</span>http://host:port<span class="tag">&lt;/<span class="name">dockerHost</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">dockerDirectory</span>&gt;</span>src/main/docker<span class="tag">&lt;/<span class="name">dockerDirectory</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure><p>Spotify的<code>docker-maven-plugin</code>插件是用于构建Maven的Docker镜像。<code>imageName</code>指定了镜像的名称，<code>dockerHost</code>指定了Docker主机的地址，<code>dockerDirectory</code>指定了Dockerfile文件的路径。</p><h3 id="配置Dockerfile"><a href="#配置Dockerfile" class="headerlink" title="配置Dockerfile"></a>配置Dockerfile</h3><p>在<code>src/main/docker</code>下创建<code>Dockerfile</code>，然后编辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">FROM frolvlad/alpine-oraclejdk8</div><div class="line">VOLUME /tmp</div><div class="line">ADD gsjzfp-0.0.1-SNAPSHOT.jar app.jar</div><div class="line">ENV JAVA_OPTS=&quot;&quot;</div><div class="line">ENTRYPOINT [ &quot;sh&quot;, &quot;-c&quot;, &quot;java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar /app.jar&quot; ]</div></pre></td></tr></table></figure><p>其中，<code>FROM</code>指定了当前镜像集成的基镜像为<code>oraclejdk8</code>；<code>VOLUME</code>指定了临时文件目录为<code>/tmp</code>，该配置会在<code>/var/lib/docker</code>下创建一个临时文件并链接到容器的<code>/tmp</code>目录下；<code>ADD</code>将该应用的jar文件作为<code>app.jar</code>添加到容器里；<code>ENTRYPOINT</code>执行<code>app.jar</code>。</p><h2 id="打包运行"><a href="#打包运行" class="headerlink" title="打包运行"></a>打包运行</h2><h3 id="编译并构建为Docker镜像"><a href="#编译并构建为Docker镜像" class="headerlink" title="编译并构建为Docker镜像"></a>编译并构建为Docker镜像</h3><p>将整个项目目录copy到Docker主机，cd到项目目录下，执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn clean package docker:build</div></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -p 8848:8848 -t jzfp/gsjzfp</div></pre></td></tr></table></figure><p>如果程序运行正确，浏览器访问<code>http://host:8848</code>就能看到Spring Boot应用的主页了。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在Ubuntu 16.04下使用Docker部署Spring Boot应用。&lt;br&gt;这是voidAlex原创的第十一篇博文。&lt;br&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://voidalex.one/tags/Docker/"/>
    
      <category term="Spring Boot" scheme="https://voidalex.one/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Java补锅笔记：利用反射获得对象的信息</title>
    <link href="https://voidalex.one/2017/11/02/Java%E8%A1%A5%E9%94%85%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%88%A9%E7%94%A8%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%BE%97%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BF%A1%E6%81%AF/"/>
    <id>https://voidalex.one/2017/11/02/Java补锅笔记：利用反射获得对象的信息/</id>
    <published>2017-11-02T03:12:20.000Z</published>
    <updated>2017-11-10T09:28:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是voidAlex原创的第十篇博文。<br><a id="more"></a></p></blockquote><p>Java中，类的<code>Class</code>类的实例对象，类的成员变量也是对象，它是<code>java.lang.reflect.Field</code>的实例对象。<code>Field</code>类封装了关于成员变量的操作。</p><p>同样的，类的方法也是对象，它是<code>java.lang.reflect.Method</code>的实例对象。<code>Methon</code>类封装了关于类方法的操作。</p><p>构造函数是<code>java.lang.reflect.Constructor</code>的实例对象。</p><h2 id="通过反射获取对象的信息"><a href="#通过反射获取对象的信息" class="headerlink" title="通过反射获取对象的信息"></a>通过反射获取对象的信息</h2><p>先声明一个普通的<code>Student</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by 王麟东 on 2017/11/2 0002 19:12. Email: wangld1994@gmail.com</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> String name;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">  <span class="keyword">private</span> String id;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, String id)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.id = id;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> name;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> age;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> id;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.id = id;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>Student</code>类有三个私有的成员变量，一个带参数的构造方法和一个不带参数的构造方法，还有对各个成员变量的<code>getter</code>和<code>setter</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Field;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by 王麟东 on 2017/11/2 0002 18:01. Email: wangld1994@gmail.com</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassMessage</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getClassMessage</span><span class="params">(Object o)</span></span>&#123;</div><div class="line">    <span class="comment">//获取类信息</span></div><div class="line">    Class c = o.getClass();</div><div class="line"></div><div class="line">    <span class="comment">//获取类名称</span></div><div class="line">    System.out.println(<span class="string">"类名称："</span> + c.getName());</div><div class="line"></div><div class="line">    <span class="comment">//获取所有的public函数，包括从父类继承而来的</span></div><div class="line">    Method[] methods = c.getMethods();</div><div class="line">    <span class="keyword">for</span> (Method method : methods)&#123;</div><div class="line">      <span class="comment">//获得方法名</span></div><div class="line">      System.out.println(<span class="string">"方法名："</span> + method.getName());</div><div class="line"></div><div class="line">      <span class="comment">//获得方法的返回类型</span></div><div class="line">      Class returnType = method.getReturnType();</div><div class="line">      System.out.println(<span class="string">"返回类型："</span> + returnType.getName());</div><div class="line"></div><div class="line">      <span class="comment">//获得参数类型</span></div><div class="line">      Class[] paramTypes = method.getParameterTypes();</div><div class="line">      System.out.println(<span class="string">"参数类型："</span>);</div><div class="line">      <span class="keyword">for</span> (Class parmType : paramTypes)&#123;</div><div class="line">        System.out.println(parmType.getName());</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//获得所有成员变量</span></div><div class="line">    <span class="comment">//getDeclaredFields获得的是该类自己声明的变量的信息</span></div><div class="line">    <span class="comment">//getFields获得的是所有public的成员变量的信息</span></div><div class="line">    Field[] fields = c.getDeclaredFields();</div><div class="line">    System.out.println(<span class="string">"成员变量："</span>);</div><div class="line">    <span class="keyword">for</span> (Field field : fields)&#123;</div><div class="line">      Class fieldType = field.getType();</div><div class="line">      System.out.println(fieldType.getName() + <span class="string">" "</span> + field.getName());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//获得构造函数的信息</span></div><div class="line">    Constructor[] constructors = c.getDeclaredConstructors();</div><div class="line">    <span class="keyword">for</span> (Constructor constructor : constructors)&#123;</div><div class="line">      System.out.println(<span class="string">"构造函数："</span> + constructor.getName());</div><div class="line"></div><div class="line">      <span class="comment">//获取构造函数的参数列表</span></div><div class="line">      System.out.println(<span class="string">"参数类型："</span>);</div><div class="line">      Class[] cparamTypes = constructor.getParameterTypes();</div><div class="line">      <span class="keyword">for</span> (Class cparamType : cparamTypes)&#123;</div><div class="line">        System.out.println(cparamType.getName());</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>测试运行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</div><div class="line">  Student student = <span class="keyword">new</span> Student();ClassMessage.getClassMessage(student);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">类名称：Student</div><div class="line">方法名：getName</div><div class="line">返回类型：java.lang.String</div><div class="line">参数类型：</div><div class="line">方法名：getId</div><div class="line">返回类型：java.lang.String</div><div class="line">参数类型：</div><div class="line">方法名：setName</div><div class="line">返回类型：<span class="keyword">void</span></div><div class="line">参数类型：</div><div class="line">java.lang.String</div><div class="line">方法名：setId</div><div class="line">返回类型：<span class="keyword">void</span></div><div class="line">参数类型：</div><div class="line">java.lang.String</div><div class="line">方法名：setAge</div><div class="line">返回类型：<span class="keyword">void</span></div><div class="line">参数类型：</div><div class="line"><span class="keyword">int</span></div><div class="line">方法名：getAge</div><div class="line">返回类型：<span class="keyword">int</span></div><div class="line">参数类型：</div><div class="line">方法名：wait</div><div class="line">返回类型：<span class="keyword">void</span></div><div class="line">参数类型：</div><div class="line">方法名：wait</div><div class="line">返回类型：<span class="keyword">void</span></div><div class="line">参数类型：</div><div class="line"><span class="keyword">long</span></div><div class="line"><span class="keyword">int</span></div><div class="line">方法名：wait</div><div class="line">返回类型：<span class="keyword">void</span></div><div class="line">参数类型：</div><div class="line"><span class="keyword">long</span></div><div class="line">方法名：equals</div><div class="line">返回类型：<span class="keyword">boolean</span></div><div class="line">参数类型：</div><div class="line">java.lang.Object</div><div class="line">方法名：toString</div><div class="line">返回类型：java.lang.String</div><div class="line">参数类型：</div><div class="line">方法名：hashCode</div><div class="line">返回类型：<span class="keyword">int</span></div><div class="line">参数类型：</div><div class="line">方法名：getClass</div><div class="line">返回类型：java.lang.Class</div><div class="line">参数类型：</div><div class="line">方法名：notify</div><div class="line">返回类型：<span class="keyword">void</span></div><div class="line">参数类型：</div><div class="line">方法名：notifyAll</div><div class="line">返回类型：<span class="keyword">void</span></div><div class="line">参数类型：</div><div class="line">成员变量：</div><div class="line">java.lang.String name</div><div class="line"><span class="keyword">int</span> age</div><div class="line">java.lang.String id</div><div class="line">构造函数：Student</div><div class="line">构造函数：Student</div><div class="line">java.lang.String</div><div class="line">java.lang.String</div><div class="line"></div><div class="line">Process finished with exit code <span class="number">0</span></div></pre></td></tr></table></figure><h2 id="注意！"><a href="#注意！" class="headerlink" title="注意！"></a>注意！</h2><p>在<code>getDeclaredFields()</code>方法中，有这么一句注释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">* &lt;p&gt; The elements in the returned array are not sorted and are not in any</div><div class="line">* particular order.</div></pre></td></tr></table></figure><p>这个注释告诉我们，用户不要在代码中依赖这些方法返回的顺序。它“不保证返回的顺序是怎样的”。这是因为在Java编译器与JVM中都有权利对Java类的字段做重排序。详细的信息可以参考：<a href="https://www.zhihu.com/question/52856385" target="_blank" rel="noopener">https://www.zhihu.com/question/52856385</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这是voidAlex原创的第十篇博文。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://voidalex.one/tags/Java/"/>
    
      <category term="补锅笔记" scheme="https://voidalex.one/tags/%E8%A1%A5%E9%94%85%E7%AC%94%E8%AE%B0/"/>
    
      <category term="反射" scheme="https://voidalex.one/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>Java补锅笔记：反射机制</title>
    <link href="https://voidalex.one/2017/11/02/Java%E8%A1%A5%E9%94%85%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <id>https://voidalex.one/2017/11/02/Java补锅笔记：反射机制/</id>
    <published>2017-11-02T00:39:31.000Z</published>
    <updated>2017-11-10T09:28:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是voidAlex原创的第九篇博文。<br><a id="more"></a></p></blockquote><h2 id="什么是反射"><a href="#什么是反射" class="headerlink" title="什么是反射"></a>什么是反射</h2><p>能够分析类能力的程序成为反射（<em>reflective</em>）。Java的反射机制可以让我们在编译期(<em>Compile Time</em>)之外的运行期(<em>Runtime</em>)检查类，接口，变量以及方法的信息。反射机制可以用来：</p><blockquote><ul><li>在运行中分析类的能力；</li><li>在运行中查看对象,获取成员变量、接口、构造方法等；</li><li>动态创建和访问数组；</li><li>运行时复制对象</li><li>……</li></ul></blockquote><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><p>在面向对象的世界里，一切皆对象。在Java中，只有静态成员变量和普通数据类型不是对象。类也是对象，它是<code>java.lang.Class</code>类的实例对象，任何一个类都是<code>Class</code>类的实例对象，并且一个类只有可能是<code>Class</code>类的一个实例对象。</p><p>在<code>Class</code>类的源码里，它的构造方法是私有的，上面有这么一段注释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> * Private constructor. Only the Java Virtual Machine creates Class objects.</div><div class="line"> * This constructor is not used and prevents the default constructor being</div><div class="line"> * generated.</div><div class="line"> */</div></pre></td></tr></table></figure><p>所以，<code>Class</code>类无法通过构造方法去实例化，只有JVM虚拟机才能创建<code>Class</code>类的实例对象。获得一个<code>Class</code>类的实例对象有下面三种方法：</p><h3 id="第一种方法直接通过类的隐含的成员变量class去获取"><a href="#第一种方法直接通过类的隐含的成员变量class去获取" class="headerlink" title="第一种方法直接通过类的隐含的成员变量class去获取"></a>第一种方法直接通过类的隐含的成员变量class去获取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Class c1 = Student.class;</div></pre></td></tr></table></figure><h3 id="第二种方法，已知该类的实例对象，通过getClass方法去获取"><a href="#第二种方法，已知该类的实例对象，通过getClass方法去获取" class="headerlink" title="第二种方法，已知该类的实例对象，通过getClass方法去获取"></a>第二种方法，已知该类的实例对象，通过<code>getClass</code>方法去获取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Class c2 = student.getClass;</div></pre></td></tr></table></figure><h3 id="第三种方法，通过完整的类名获得"><a href="#第三种方法，通过完整的类名获得" class="headerlink" title="第三种方法，通过完整的类名获得"></a>第三种方法，通过完整的类名获得</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Class c3 = Class.forName(<span class="string">"com.enity.Student"</span>);</div></pre></td></tr></table></figure><p>所以我们可以通过该类的类类型来创建该类的实例对象，但是前提是该类需要有无参数的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class c = Student.class;</div><div class="line">Student student = (Student) c.newInstance();</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这是voidAlex原创的第九篇博文。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://voidalex.one/tags/Java/"/>
    
      <category term="补锅笔记" scheme="https://voidalex.one/tags/%E8%A1%A5%E9%94%85%E7%AC%94%E8%AE%B0/"/>
    
      <category term="反射" scheme="https://voidalex.one/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>Gitlab不靠谱搭建指南</title>
    <link href="https://voidalex.one/2017/11/01/Gitlab%E4%B8%8D%E9%9D%A0%E8%B0%B1%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/"/>
    <id>https://voidalex.one/2017/11/01/Gitlab不靠谱搭建指南/</id>
    <published>2017-11-01T11:20:34.000Z</published>
    <updated>2017-11-10T09:27:45.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在Ubuntu 16.04下快速搭建Gitlab并汉化。<br>这是voidAlex原创的第八篇博文。<br><a id="more"></a></p></blockquote><h2 id="配置ip"><a href="#配置ip" class="headerlink" title="配置ip"></a>配置ip</h2><h3 id="使用ifconfig查看网卡名称，然后修改配置文件"><a href="#使用ifconfig查看网卡名称，然后修改配置文件" class="headerlink" title="使用ifconfig查看网卡名称，然后修改配置文件"></a>使用<code>ifconfig</code>查看网卡名称，然后修改配置文件</h3><h3 id="修改-etc-network-interfaces"><a href="#修改-etc-network-interfaces" class="headerlink" title="修改/etc/network/interfaces"></a>修改<code>/etc/network/interfaces</code></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/network/interfaces</div></pre></td></tr></table></figure><p>将内容修改为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">auto ens33</div><div class="line">iface ens33 inet static</div><div class="line">address 202.201.53.159</div><div class="line">gateway 202.201.53.128</div><div class="line">netmask 255.255.255.0</div></pre></td></tr></table></figure><h3 id="重启网络，使之生效："><a href="#重启网络，使之生效：" class="headerlink" title="重启网络，使之生效："></a>重启网络，使之生效：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/networking restart</div></pre></td></tr></table></figure><h3 id="配置DNS："><a href="#配置DNS：" class="headerlink" title="配置DNS："></a>配置DNS：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/resolvconf/resolv.conf.d/base</div></pre></td></tr></table></figure><p>添加：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nameserver 223.5.5.5</div><div class="line">nameserver 223.6.6.6</div></pre></td></tr></table></figure><p>保存后执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">resolvconf -u</div></pre></td></tr></table></figure><h3 id="重启网络"><a href="#重启网络" class="headerlink" title="重启网络"></a>重启网络</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ifdown ens33 &amp;&amp; sudo ifup ens33</div></pre></td></tr></table></figure><h2 id="更新apt，安装ssh和git"><a href="#更新apt，安装ssh和git" class="headerlink" title="更新apt，安装ssh和git"></a>更新apt，安装ssh和git</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt install ssh</div><div class="line">sudo apt install git</div></pre></td></tr></table></figure><p>测试ssh安装是否成功：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh localhost</div></pre></td></tr></table></figure><h2 id="安装Gitlab并配置依赖关系"><a href="#安装Gitlab并配置依赖关系" class="headerlink" title="安装Gitlab并配置依赖关系"></a>安装Gitlab并配置依赖关系</h2><h3 id="安装邮件服务器："><a href="#安装邮件服务器：" class="headerlink" title="安装邮件服务器："></a>安装邮件服务器：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install curl openssh-server ca-certificates postfix</div></pre></td></tr></table></figure><h3 id="配置安装源："><a href="#配置安装源：" class="headerlink" title="配置安装源："></a>配置安装源：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash</div></pre></td></tr></table></figure><h3 id="安装Gitlab并初始化"><a href="#安装Gitlab并初始化" class="headerlink" title="安装Gitlab并初始化"></a>安装Gitlab并初始化</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt install gitlab-ce</div><div class="line">sudo gitlab-ctl reconfigure</div></pre></td></tr></table></figure><h3 id="修改host"><a href="#修改host" class="headerlink" title="修改host"></a>修改host</h3><p>修改<code>/etc/gitlab/gitlab.rb</code>中的<code>external_url</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">external_url <span class="string">'http://nwnu.git.com'</span></div></pre></td></tr></table></figure><p>在<code>/etc/hosts</code>中添加hosts映射：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">127.0.0.1   nwnu.git.com</div></pre></td></tr></table></figure><p>让Gitlab配置生效：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gitlab-ctl reconfigure</div></pre></td></tr></table></figure><h2 id="汉化Gitlab"><a href="#汉化Gitlab" class="headerlink" title="汉化Gitlab"></a>汉化Gitlab</h2><h3 id="确定Gitlab的版本"><a href="#确定Gitlab的版本" class="headerlink" title="确定Gitlab的版本"></a>确定Gitlab的版本</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo cat /opt/gitlab/embedded/service/gitlab-rails/VERSION</div></pre></td></tr></table></figure><h3 id="clone汉化版本库"><a href="#clone汉化版本库" class="headerlink" title="clone汉化版本库"></a>clone汉化版本库</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://gitlab.com/xhang/gitlab.git</div></pre></td></tr></table></figure><h3 id="导出diff文件并补丁"><a href="#导出diff文件并补丁" class="headerlink" title="导出diff文件并补丁"></a>导出diff文件并补丁</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo git diff v10.1.0 v10.1.0-zh &gt; ../10.1.0-zh.diff</div><div class="line">sudo gitlab-ctl stop</div><div class="line">sudo patch <span class="_">-d</span> /opt/gitlab/embedded/service/gitlab-rails -p1 &lt; 10.1.0-zh.diff</div></pre></td></tr></table></figure><h3 id="重启Gitlab"><a href="#重启Gitlab" class="headerlink" title="重启Gitlab"></a>重启Gitlab</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo gitlab-ctl start</div><div class="line">sudo gitlab-ctl reconfigure</div></pre></td></tr></table></figure><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><p>Gitlab默认的备份目录在<code>/var/opt/gitlab/backups</code>。</p><h3 id="手动备份"><a href="#手动备份" class="headerlink" title="手动备份"></a>手动备份</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gitlab-rake gitlab:backup:create</div></pre></td></tr></table></figure><h3 id="自动备份"><a href="#自动备份" class="headerlink" title="自动备份"></a>自动备份</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 每天2点备份</span></div><div class="line">0 2 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create CRON=1</div></pre></td></tr></table></figure><h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><p>恢复之前，确保备份文件所安装 GitLab 和当前要恢复的 GitLab 版本一致。首先，恢复配置文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo mv /etc/gitlab /etc/gitlab.$(date +%s)</div><div class="line"><span class="comment"># 将下面配置备份文件的时间戳改为你所备份的文件的时间戳</span></div><div class="line">sudo tar -xf etc-gitlab-1399948539.tar -C /</div></pre></td></tr></table></figure><p>恢复数据文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 将数据备份文件拷贝至备份目录</span></div><div class="line">sudo cp 1393513186_gitlab_backup.tar /var/opt/gitlab/backups/</div><div class="line"></div><div class="line"><span class="comment"># 停止连接数据库的进程</span></div><div class="line">sudo gitlab-ctl stop unicorn</div><div class="line">sudo gitlab-ctl stop sidekiq</div><div class="line"></div><div class="line"><span class="comment"># 恢复1393513186这个备份文件，将覆盖GitLab数据库！</span></div><div class="line">sudo gitlab-rake gitlab:backup:restore BACKUP=1393513186</div><div class="line"></div><div class="line"><span class="comment"># 启动 GitLab</span></div><div class="line">sudo gitlab-ctl start</div><div class="line"></div><div class="line"><span class="comment"># 检查 GitLab</span></div><div class="line">sudo gitlab-rake gitlab:check SANITIZE=<span class="literal">true</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在Ubuntu 16.04下快速搭建Gitlab并汉化。&lt;br&gt;这是voidAlex原创的第八篇博文。&lt;br&gt;
    
    </summary>
    
    
      <category term="配置" scheme="https://voidalex.one/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="Gitlab" scheme="https://voidalex.one/tags/Gitlab/"/>
    
  </entry>
  
  <entry>
    <title>算法笔记：Top-N算法及Java实现</title>
    <link href="https://voidalex.one/2017/08/21/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%EF%BC%9ATop-N%E7%AE%97%E6%B3%95%E5%8F%8AJava%E5%AE%9E%E7%8E%B0/"/>
    <id>https://voidalex.one/2017/08/21/算法笔记：Top-N算法及Java实现/</id>
    <published>2017-08-21T15:17:43.000Z</published>
    <updated>2017-11-10T09:30:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是voidAlex原创的第七篇博文。</p></blockquote><p>给定一组无序的数据，需要创建一个最大的N条记录的列表，这类问题是经典的Top-N问题。</p><a id="more"></a><p>系统中常常会有这样的需求：将大量的（几百万甚至上千万）的数据排序,然后取出最Top的N条作为展示。常见的解决方案如下：</p><ol><li>使用传统的排序算法，即使用List中的Sort方法排序，然后取出前N个。最坏时间复杂度达到了$O(n^2)$;</li><li>维护一个容量为N的最大堆或者排序二叉树，遍历整个List，取出前面的N个放到堆里。最坏时间复杂度为$O(nlogN)$。</li></ol><p>使用Java集合类中的<code>TreeMap</code>可以很容易的实现一个Top-N算法：维护一个大小为N的<code>TreeMap</code>topN，遍历所有数据，并将其添加到topN中。如果<code>topN.size() &gt; N</code>，就删除topN的第一个元素（值最小的元素）。</p><p>以下是示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> SortedMap&lt;Double, String&gt; <span class="title">topN</span><span class="params">(<span class="keyword">int</span> n, List l)</span></span>&#123;</div><div class="line">    SortedMap&lt;Double, String&gt; topN = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (l != <span class="keyword">null</span> &amp;&amp; !l.isEmpty())&#123;</div><div class="line">        topN = <span class="keyword">new</span> TreeMap&lt;Double, String&gt;();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (DataNode dataNode : l)&#123;</div><div class="line">            topN.put(dataNode.getValue(),dataNode.getkey());</div><div class="line">            <span class="keyword">if</span> (topN.size() &gt; n)&#123;</div><div class="line">                topN.remove(topN.firstKey());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> topN;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这是voidAlex原创的第七篇博文。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;给定一组无序的数据，需要创建一个最大的N条记录的列表，这类问题是经典的Top-N问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://voidalex.one/tags/Java/"/>
    
      <category term="算法" scheme="https://voidalex.one/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="https://voidalex.one/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>算法笔记：K-means算法及Java实现</title>
    <link href="https://voidalex.one/2017/08/20/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%EF%BC%9AK-means%E7%AE%97%E6%B3%95%E5%8F%8AJava%E5%AE%9E%E7%8E%B0/"/>
    <id>https://voidalex.one/2017/08/20/算法笔记：K-means算法及Java实现/</id>
    <published>2017-08-20T02:53:36.000Z</published>
    <updated>2017-08-23T02:13:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是voidAlex原创的第六篇博文。<br>源码在<a href="https://github.com/voidAlex" target="_blank" rel="noopener">我的GitHub</a></p></blockquote><p>物以类聚，人以群分，人如此，聚类亦如此。<br><a id="more"></a></p><p>挖坑待填……</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这是voidAlex原创的第六篇博文。&lt;br&gt;源码在&lt;a href=&quot;https://github.com/voidAlex&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;我的GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;物以类聚，人以群分，人如此，聚类亦如此。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://voidalex.one/tags/Java/"/>
    
      <category term="算法" scheme="https://voidalex.one/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="机器学习" scheme="https://voidalex.one/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>数据归一化的方法</title>
    <link href="https://voidalex.one/2017/08/18/%E6%95%B0%E6%8D%AE%E5%BD%92%E4%B8%80%E5%8C%96%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://voidalex.one/2017/08/18/数据归一化的方法/</id>
    <published>2017-08-18T08:06:25.000Z</published>
    <updated>2017-08-18T09:21:13.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是voidAlex原创的第五篇博文。</p></blockquote><p>在数据挖掘的问题中，数据所用的度量单位可能会影响分析结果。使用较小的单位可能会导致该属性有较大的值域。为了避免这些问题，数据应该进行归一化（又称规范化或标准化）。归一化数据将会赋予所有属性相同的权重。常见的归一化方式有三种：最小-最大值归一化，z分数归一化，小数定标归一化。</p><a id="more"></a><h2 id="最小-最大值归一化"><a href="#最小-最大值归一化" class="headerlink" title="最小-最大值归一化"></a>最小-最大值归一化</h2><p>$$<br>u^\prime=\frac<br>{u - min_A}<br>{max_A - min_A}(newmax_A - newmin_A) + newmin_A<br>$$</p><p>其中，A是数值属性，$min_A$和$max_A$分别是属性A在该数据集中的最小和最大值。通过上述的计算即可把A的值映射到区间$[newmin_A, newmax_A]$中的$u^\prime$。</p><p>常用的最小-最大值区间为$[0, 1]$和$[-1, 1]$。使用最小-最大值归一化，如果今后的数据在原始数据的值域之外，将会产生越界错误。</p><h2 id="z分数归一化"><a href="#z分数归一化" class="headerlink" title="z分数归一化"></a>z分数归一化</h2><p>$$<br>u^\prime=\frac<br>{u - \overline{A}}<br>{\sigma_A}<br>$$</p><p>其中，$\overline{A}$为属性A的均值，$\sigma_A$为A的标准差。该方法在属性A的最大最小值未知或者有离群点的时候可用。</p><h2 id="小数定标归一化"><a href="#小数定标归一化" class="headerlink" title="小数定标归一化"></a>小数定标归一化</h2><p>$$<br>u^\prime=\frac<br>{u}<br>{10^i}<br>$$</p><p>该方法通过移动属性A的小数点位置进行归一化。小数点移动的位置依赖于A的最大绝对值。其中，$i$是使得$max(\mid u^\prime \mid) &lt; 1$的最小整数。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这是voidAlex原创的第五篇博文。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在数据挖掘的问题中，数据所用的度量单位可能会影响分析结果。使用较小的单位可能会导致该属性有较大的值域。为了避免这些问题，数据应该进行归一化（又称规范化或标准化）。归一化数据将会赋予所有属性相同的权重。常见的归一化方式有三种：最小-最大值归一化，z分数归一化，小数定标归一化。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据挖掘" scheme="https://voidalex.one/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
      <category term="数据分析" scheme="https://voidalex.one/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>算法笔记：一元线性回归及Java实现</title>
    <link href="https://voidalex.one/2017/07/23/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%EF%BC%9A%E4%B8%80%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%8F%8AJava%E5%AE%9E%E7%8E%B0/"/>
    <id>https://voidalex.one/2017/07/23/算法笔记：一元线性回归及Java实现/</id>
    <published>2017-07-23T04:30:50.000Z</published>
    <updated>2017-07-31T01:44:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是voidAlex原创的第四篇博文。<br>源码在<a href="https://github.com/voidAlex/Linear_Regression" target="_blank" rel="noopener">我的GitHub</a><br><a id="more"></a></p></blockquote><h2 id="回归问题"><a href="#回归问题" class="headerlink" title="回归问题"></a>回归问题</h2><p>回归问题是研究自变量和因变量之间关系的一种预测模型技术。例如我们可以通过回归模型去预测房价与房子面积之间的关系，一个人每周花在微信上的时间和他微信好友数量之间的关系等。</p><p>回归模型定义了输入和输出的关系。输入为现有信息，输出为预测。</p><p>一个预测问题在回归模型下的解决步骤为：</p><ol><li>构造训练集；</li><li>学习，得到输入输出间的关系；</li><li>预测，通过学习得到的关系预测输出。</li></ol><h2 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h2><p>假设要使用回归模型预测一个人每周花在微信上的时间和微信好友数量之间的关系，可以用如下的表达式表示：</p><p>$$ y=ax+b+e $$</p><p>其中，<em>y</em>是你每周需要花费在微信上的时间，<em>x</em>是你的微信好友数量，<em>e</em>是误差。对于误差<em>e</em>，它不是一个定值，有一对<em>y</em>和<em>x</em>，就有一个<em>e</em>，<em>e</em>的值满足正态分布。</p><p>假设有数据集：</p><table><thead><tr><th>好友数量</th><th>花费的时间</th></tr></thead><tbody><tr><td>50</td><td>55</td></tr><tr><td>53</td><td>56</td></tr><tr><td>80</td><td>79</td></tr><tr><td>90</td><td>88</td></tr><tr><td>63</td><td>58</td></tr><tr><td>89</td><td>93</td></tr><tr><td>120</td><td>90</td></tr><tr><td>155</td><td>120</td></tr></tbody></table><p>将数据集用散点图表示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://osuro1ft2.bkt.clouddn.com//17-7-14/7010575.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>我们假定<em>x</em>和<em>y</em>之间的关系确实是线性的，那么可以尝试在散点图上画一条直线：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://osuro1ft2.bkt.clouddn.com//17-7-14/92659690.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看出，我们能画出很多条直线。接下来就是要从存在的直线中确定一条最佳的直线来拟合数据。</p><p>如果存在一条最佳拟合的直线，那么所有的样本数据到这条直线的距离应该是最小的。对于线性回归来说，“最佳”指的就是距离最小化。因此，将参数求解问题转换为求最小误差问题。常见的获得最佳拟合线的方法有最小二乘法、梯度下降算法等。</p><h2 id="使用最小二乘法拟合"><a href="#使用最小二乘法拟合" class="headerlink" title="使用最小二乘法拟合"></a>使用最小二乘法拟合</h2><p>对于上面的样本集，我们尝试用$ y=ax+b+e $去进行拟合，那么可以得到：</p><p>$$ \mid e \mid = \mid ax + b - y \mid $$</p><p>误差大小其实就是猜想的$ax + b$的值和观测到的<em>y</em>值之间的差值。把所有的$\mid e \mid$都求和，构造一个函数：</p><p>$$Q = \sum_{i=1}^n (ax_i + b - y_i)^2$$</p><p>当$Q$最小的时候，即可得到最佳拟合的直线。</p><p>可以求导得到$a$和$b$，也可以直接用下面的公式求得：（省略数学推导过程）</p><p>$$<br>a=\frac<br>{<br>    \frac<br>    {\sum_{i = 1}^n y_i  \sum_{i = 1}^n x_i}<br>    {n} -<br>    \sum_{i = 1}^n x_i y_i<br>    }<br>{<br>    \frac<br>    {\sum_{i = 1}^n x_i * \sum_{i = 1}^n x_i}<br>    {n} -<br>    \sum_{i = 1}^n x_i^2<br>    }<br>$$</p><p>$$<br>b=\frac {\sum_{i = 1}^n y_i - a  \sum_{i = 1}^n x_i}{n}<br>$$</p><p>得到$a$和$b$之后，可以用R平方来评估拟合程度：</p><p>$$<br>R^2=1-\frac<br>{\sum_{i=1}^n (y_i - \hat{y_i})^2}<br>{\sum_{i=1}^n (y_i - \bar{y})^2}<br>$$</p><p>R平方可以解释为数据集中能够被模型所解释的方差占数据总方差的比重，R平方值越大，说明模型对数据的拟合程度越高。</p><h2 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h2><p>首先构造一个类来存放记录：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataNode</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> x;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> y;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getY</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> y;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.x = x;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(<span class="keyword">double</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.y = y;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getXY</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.x * <span class="keyword">this</span>.y;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后构造<code>MyLinearRegression</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLinearRegression</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;DataNode&gt; list;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> alpha;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> beta;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> r;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyLinearRegression</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">        <span class="keyword">this</span>.list = <span class="keyword">new</span> ArrayList&lt;DataNode&gt;();</div><div class="line"></div><div class="line">        init(path);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getAlpha</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> alpha;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getBeta</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> beta;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getR</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.r;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="keyword">new</span> File(path)));</div><div class="line">        String line = <span class="string">""</span>;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>)&#123;</div><div class="line">            String str[] = line.split(<span class="string">","</span>);</div><div class="line">            DataNode dataNode = <span class="keyword">new</span> DataNode();</div><div class="line">            dataNode.setX(Double.parseDouble(str[<span class="number">0</span>]));</div><div class="line">            dataNode.setY(Double.parseDouble(str[<span class="number">1</span>]));</div><div class="line">            <span class="keyword">this</span>.list.add(dataNode);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        reader.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>最后要根据读取到的数据去求<code>alpha</code>，<code>beta</code>和<code>r</code>的值。可以直接利用上面的公式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAB</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n = list.size();</div><div class="line">    <span class="keyword">double</span> sumX = <span class="number">0</span>;</div><div class="line">    <span class="keyword">double</span> sumY = <span class="number">0</span>;</div><div class="line">    <span class="keyword">double</span> sumXY = <span class="number">0</span>;</div><div class="line">    <span class="keyword">double</span> sumX2 = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (DataNode dataNode : list)&#123;</div><div class="line">        sumX += dataNode.getX();</div><div class="line">        sumY += dataNode.getY();</div><div class="line">        sumXY += dataNode.getXY();</div><div class="line">        sumX2 += Math.pow(dataNode.getX(), <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.alpha = (((sumY * sumX) / n) - sumXY) / (((sumX * sumX) / n) - sumX2);</div><div class="line">    <span class="keyword">this</span>.beta = (sumY - <span class="keyword">this</span>.alpha * sumX) / n;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getR2</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">double</span> num = <span class="number">0</span>;</div><div class="line">    <span class="keyword">double</span> den = <span class="number">0</span>;</div><div class="line">    <span class="keyword">double</span> sumY = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (DataNode dataNode : list)&#123;</div><div class="line">        sumY += dataNode.getY();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">double</span> avgY = sumY / list.size();</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (DataNode dataNode : list)&#123;</div><div class="line">        num += Math.pow((dataNode.getY() - (dataNode.getX() * <span class="keyword">this</span>.alpha + beta)), <span class="number">2</span>);</div><div class="line">        den += Math.pow((dataNode.getY() - avgY), <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.r = <span class="number">1</span> - (num / den);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用上述数据集拟合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">        String path = <span class="string">"test.txt"</span>;</div><div class="line">        MyLinearRegression linearRegression = <span class="keyword">new</span> MyLinearRegression(path);</div><div class="line">        linearRegression.getAB();</div><div class="line">        linearRegression.getR2();</div><div class="line">        System.out.println(<span class="string">"alpha = "</span> + linearRegression.getAlpha());</div><div class="line">        System.out.println(<span class="string">"beta = "</span> + linearRegression.getBeta());</div><div class="line">        System.out.println(<span class="string">"R2 = "</span> + linearRegression.getR());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">alpha = 0.6058710840658103</div><div class="line">beta = 26.861280144241604</div><div class="line">R2 = 0.9001321912140731</div></pre></td></tr></table></figure><p>所以，拟合该数据集的直线为$y=0.61x+26.86$。</p><h2 id="过拟合和欠拟合"><a href="#过拟合和欠拟合" class="headerlink" title="过拟合和欠拟合"></a>过拟合和欠拟合</h2><h3 id="过拟合"><a href="#过拟合" class="headerlink" title="过拟合"></a>过拟合</h3><p>过拟合，即在拟合过程中“做过头”。在拟合过程中，可能为了迎合所有的样本甚至是噪声点，使得模型的描述过于复杂，或者失去泛化能力。造成过拟合的原因可能有：</p><ol><li>训练样本过少；</li><li>迎合了所有的样本甚至是噪声点。</li></ol><h3 id="欠拟合"><a href="#欠拟合" class="headerlink" title="欠拟合"></a>欠拟合</h3><p>欠拟合与过拟合相反，由于操作不当导致模型产生的误差$e$分布过于分散或者太大。欠拟合会因为误差太大导致模型没有泛化能力而失去指导意义。造成欠拟合的方法可能有：</p><ol><li>参数过少；</li><li>拟合方法不当。</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://item.jd.com/11932929.html" target="_blank" rel="noopener">白话大数据与机器学习</a></p><p><a href="https://item.jd.com/11617070.html?dist=jd" target="_blank" rel="noopener">数据科学实战</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这是voidAlex原创的第四篇博文。&lt;br&gt;源码在&lt;a href=&quot;https://github.com/voidAlex/Linear_Regression&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;我的GitHub&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://voidalex.one/tags/Java/"/>
    
      <category term="算法" scheme="https://voidalex.one/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="机器学习" scheme="https://voidalex.one/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Java爬虫：上车吧！爬取妹子图</title>
    <link href="https://voidalex.one/2017/07/20/Java%E7%88%AC%E8%99%AB%EF%BC%9A%E7%88%AC%E5%8F%96%E5%A6%B9%E5%AD%90%E5%9B%BE/"/>
    <id>https://voidalex.one/2017/07/20/Java爬虫：爬取妹子图/</id>
    <published>2017-07-20T01:10:38.000Z</published>
    <updated>2017-07-20T04:56:25.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是voidAlex原创的第三篇博文。<br>源码在<a href="https://github.com/voidAlex/Meizi_Crawler" target="_blank" rel="noopener">我的GitHub</a><br><a id="more"></a></p></blockquote><h2 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h2><p>上一篇博文介绍了如何模拟登录和解析JSON数据，这篇博文介绍怎么爬取不需要登录的网站的信息。</p><p>上一篇博文中关于爬虫的介绍可以点<a href="https://voidalex.github.io/2017/07/09/Java%E7%88%AC%E8%99%AB%EF%BC%9A%E7%88%AC%E5%8F%96%E5%AD%A6%E6%A0%A1%E6%95%99%E5%8A%A1%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BF%A1%E6%81%AF/" target="_blank" rel="noopener">这里</a>查看。</p><h2 id="引入JSOUP"><a href="#引入JSOUP" class="headerlink" title="引入JSOUP"></a>引入JSOUP</h2><p>在<code>pom.xml</code>中添加JSOUP依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p>JSOUP是一款Java的HTML解析库，可以解析HTML中的文本内容。它的官网地址是<a href="https://jsoup.org/" target="_blank" rel="noopener">https://jsoup.org/</a>。</p><h2 id="查看网页源码"><a href="#查看网页源码" class="headerlink" title="查看网页源码"></a>查看网页源码</h2><p>好了，要干正事了。Google一下妹子图，找到这两个网站：<a href="http://jandan.net/ooxx" target="_blank" rel="noopener">http://jandan.net/ooxx</a>，<a href="http://www.youmzi.com/tuinvlang.html" target="_blank" rel="noopener">http://www.youmzi.com/tuinvlang.html</a>.先看第一个，它的源码长这样：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://osuro1ft2.bkt.clouddn.com//17-7-20/99168668.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>我们要找的是所有的img标签里的URL，然后把它下载下来。但是这样似乎只能爬取单个页面的妹子图？所以我们还要找到下一页的URL：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://osuro1ft2.bkt.clouddn.com//17-7-20/68438084.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>恩，找到了。开始写代码吧！</p><h2 id="downloadImage方法"><a href="#downloadImage方法" class="headerlink" title="downloadImage方法"></a>downloadImage方法</h2><p>首先写一个下载图片的方法，该方法传入图片的URL和要写入的路径，然后将文件写入本地。需要调用<code>java.net</code>包中的一些方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">downloadImage</span><span class="params">(String imageUrl, String path)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">//分割字符串，获得文件名</span></div><div class="line">        String filePath = path + imageUrl.substring(imageUrl.lastIndexOf(<span class="string">"/"</span>));</div><div class="line">        <span class="comment">//获得文件流</span></div><div class="line">        URL url = <span class="keyword">new</span> URL(imageUrl);</div><div class="line">        HttpURLConnection connection = (HttpURLConnection)url.openConnection();</div><div class="line">        connection.setConnectTimeout(<span class="number">10000</span>);</div><div class="line">        connection.setReadTimeout(<span class="number">10000</span>);</div><div class="line">        InputStream in = connection.getInputStream();</div><div class="line"></div><div class="line">        <span class="comment">//写入本地文件</span></div><div class="line">        File file = <span class="keyword">new</span> File(filePath);</div><div class="line">        FileOutputStream out = <span class="keyword">new</span> FileOutputStream(file);</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> ((i = in.read()) != -<span class="number">1</span>)&#123;</div><div class="line">            out.write(i);</div><div class="line">        &#125;</div><div class="line">        System.out.println(imageUrl + <span class="string">"下载成功"</span>);</div><div class="line">        out.close();</div><div class="line">        in.close();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">        System.out.println(imageUrl + <span class="string">"下载失败"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>需要注意的是要设置超时的时间，要不然会导致很多的图片下载失败。</p><h2 id="解析HTML"><a href="#解析HTML" class="headerlink" title="解析HTML"></a>解析HTML</h2><p>接下来我们需要理一理这个爬虫的思路：</p><ol><li>打开这个网页。获取到网页所有图片的URL，然后遍历这些URL去下载图片；</li><li>当遍历结束后，去找下一页的URL，然后执行1；</li><li>直到找不到下一页的URL为止。</li></ol><h3 id="煎蛋妹子图"><a href="#煎蛋妹子图" class="headerlink" title="煎蛋妹子图"></a>煎蛋妹子图</h3><p>首先用<code>jsoup</code>中的方法获取到网页并且得到Document对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Document doc = <span class="keyword">null</span>;</div><div class="line">doc = Jsoup.connect(url).get();</div></pre></td></tr></table></figure><p>获得所有的img标签：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Elements elements = doc.getElementsByTag(<span class="string">"img"</span>);</div></pre></td></tr></table></figure><p>遍历这些标签并且下载：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (Element element : elements)&#123;</div><div class="line">    <span class="comment">//获取标签中src属性的绝对路径</span></div><div class="line">    String imgSrc = element.attr(<span class="string">"abs:src"</span>);</div><div class="line">    <span class="keyword">if</span> (downloadImage(imgSrc, path))&#123;</div><div class="line">        count ++;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>获取下一页的地址，如果没有则退出循环:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    url = doc.getElementsByClass(<span class="string">"previous-comment-page"</span>).get(<span class="number">0</span>)</div><div class="line">            .getElementsByTag(<span class="string">"a"</span>).attr(<span class="string">"abs:href"</span>);</div><div class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">    System.out.println(<span class="string">"没链接了~"</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>大功告成！</p><h3 id="优妹子"><a href="#优妹子" class="headerlink" title="优妹子"></a>优妹子</h3><p>第二个网站的略微复杂一点，上方有导航栏，每一页有若干个专题，点击进去了才是大图。所以需要爬取的链接稍微多一点。</p><p>首先还是获取到网页并且得到Document对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Document doc = <span class="keyword">null</span>;</div><div class="line">doc = Jsoup.connect(url).get();</div></pre></td></tr></table></figure><p>然后获得每一个二级页面（即专题）的URL，并放到一个List里面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Elements imageUrl = doc.getElementsByClass(<span class="string">"tzpic3-mzindex"</span>).get(<span class="number">0</span>).getElementsByTag(<span class="string">"a"</span>);</div><div class="line">ArrayList&lt;String&gt; urlList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line"><span class="keyword">for</span> (Element element : imageUrl)&#123;</div><div class="line">    urlList.add(element.attr(<span class="string">"abs:href"</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>对于List里的每一个URL，去找它每一个的img标签并且获取下一页的URL：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (String s : urlList)&#123;</div><div class="line">    String next = s;</div><div class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            doc = Jsoup.connect(next).get();</div><div class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</div><div class="line">            System.out.println(url + <span class="string">"请求失败"</span>);</div><div class="line">        &#125;</div><div class="line">        Element e = doc.getElementsByClass(<span class="string">"arpic"</span>).get(<span class="number">0</span>);</div><div class="line">        <span class="comment">//获取所有img标签</span></div><div class="line">        Elements elements = e.getElementsByTag(<span class="string">"img"</span>);</div><div class="line">        <span class="keyword">for</span> (Element element : elements)&#123;</div><div class="line">            <span class="comment">//获取标签中src属性的绝对路径</span></div><div class="line">            String imgSrc = element.attr(<span class="string">"abs:src"</span>);</div><div class="line">            <span class="keyword">if</span> (downloadImage(imgSrc, path))&#123;</div><div class="line">                count ++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        String tmp = next;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Elements nextPage = doc.getElementsByClass(<span class="string">"jogger2"</span>).get(<span class="number">0</span>).getElementsByTag(<span class="string">"a"</span>);</div><div class="line"></div><div class="line">            next = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">for</span> (Element element : nextPage)&#123;</div><div class="line">                <span class="comment">//获取标签中src属性的绝对路径</span></div><div class="line">                <span class="keyword">if</span> (element.text().equals(<span class="string">"下一页"</span>))&#123;</div><div class="line">                    next = element.attr(<span class="string">"abs:href"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception ex)&#123;</div><div class="line">            System.out.println(<span class="string">"没链接了~"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (next == <span class="keyword">null</span> || tmp.equals(next))&#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">    String path = <span class="string">"image"</span>;</div><div class="line">    jiandan(path);</div><div class="line">    youmeizi(path);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>跑了两个多小时终于跑完了，看一下战果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://osuro1ft2.bkt.clouddn.com//17-7-20/40407389.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>恩，将近1w张。不说了，我先喝瓶营养快线去~</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这是voidAlex原创的第三篇博文。&lt;br&gt;源码在&lt;a href=&quot;https://github.com/voidAlex/Meizi_Crawler&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;我的GitHub&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="https://voidalex.one/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Java" scheme="https://voidalex.one/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java爬虫：爬取学校教务管理系统的信息</title>
    <link href="https://voidalex.one/2017/07/09/Java%E7%88%AC%E8%99%AB%EF%BC%9A%E7%88%AC%E5%8F%96%E5%AD%A6%E6%A0%A1%E6%95%99%E5%8A%A1%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BF%A1%E6%81%AF/"/>
    <id>https://voidalex.one/2017/07/09/Java爬虫：爬取学校教务管理系统的信息/</id>
    <published>2017-07-09T14:15:46.000Z</published>
    <updated>2017-07-11T03:32:29.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是voidAlex原创的第二篇博文。<br>源码在<a href="https://github.com/voidAlex/NWNU_Crawler" target="_blank" rel="noopener">我的GitHub</a><br><a id="more"></a></p></blockquote><h2 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h2><p>关于爬虫是什么就不介绍了。这里简单说一下我所理解的爬虫的思路。</p><p>就如同把大象放冰箱里分三步一样，爬虫也分三步。第一步，由于教务管理系统这种网站需要登录才能获取信息，我们需要先用抓包工具抓取原始的请求地址；第二步，获得Cookie，伪装请求模拟登录，然后获得原始数据；第三步，解析数据，得到想要的东西。</p><h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><p>学校教务管理系统的地址是<a href="http://210.26.111.34/" target="_blank" rel="noopener">http://210.26.111.34/</a>。登录界面长这样：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://osuro1ft2.bkt.clouddn.com//17-7-10/3887073.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>打开万能的Chrome开发者工具，填好表单点提交，然后在Network中能看到这样的信息：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://osuro1ft2.bkt.clouddn.com//17-7-10/38663337.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>标记的地方是我们要关注的。第一处能得到登录的请求地址是<a href="http://210.26.111.34/mlogin.do" target="_blank" rel="noopener">http://210.26.111.34/mlogin.do</a>，请求方式是POST；第二处能得到请求参数，分别是utype（用户类型），ucode（学号），pwd（密码），rember（记住账号）。原本登录时要输的验证码不见了，interesting。</p><p>登录之后通过同样的方式能获取到其他的请求地址，比如成绩，课表，考试安排等等。这里不再一一阐述。</p><h2 id="模拟登录"><a href="#模拟登录" class="headerlink" title="模拟登录"></a>模拟登录</h2><p>用代码模拟登录请求也分三步：</p><ol><li><p>获取该网站的Cookie，并添加到请求头；</p></li><li><p>添加参数，模拟登录；</p></li><li><p>得到请求结果。</p></li></ol><p>这里需要用到Apache HttpClient，它是一个支持Http协议的客户端编程工具包。HttpClient的官网是<a href="https://hc.apache.org/index.html" target="_blank" rel="noopener">https://hc.apache.org/index.html</a>。</p><h3 id="获取Cookie"><a href="#获取Cookie" class="headerlink" title="获取Cookie"></a>获取Cookie</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">BasicCookieStore cookieStore = <span class="keyword">new</span> BasicCookieStore();</div><div class="line">CloseableHttpClient httpclient = HttpClients.custom().setDefaultCookieStore(cookieStore).build();</div><div class="line"></div><div class="line">HttpGet getCookie = <span class="keyword">new</span> HttpGet(<span class="string">"http://210.26.111.34"</span>);</div><div class="line">CloseableHttpResponse response1 = httpclient.execute(getCookie);</div><div class="line">response1.close();</div></pre></td></tr></table></figure><h3 id="模拟登录-1"><a href="#模拟登录-1" class="headerlink" title="模拟登录"></a>模拟登录</h3><p>构造一个POST请求，将请求参数加进去，用httpclient提交。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">HttpUriRequest postLogin = RequestBuilder.post().setUri(<span class="keyword">new</span> URI(loginUrl))</div><div class="line">                           .addParameter(<span class="string">"utype"</span>, <span class="string">"S"</span>)</div><div class="line">                           .addParameter(<span class="string">"ucode"</span>, username)</div><div class="line">                           .addParameter(<span class="string">"pwd"</span>, password)</div><div class="line">                           .addParameter(<span class="string">"rember"</span>, <span class="string">"true"</span>)</div><div class="line">                           .build();</div><div class="line">CloseableHttpResponse response2 = httpclient.execute(postLogin);</div><div class="line">response2.close();</div></pre></td></tr></table></figure><h2 id="得到结果，解析数据"><a href="#得到结果，解析数据" class="headerlink" title="得到结果，解析数据"></a>得到结果，解析数据</h2><p>以获取考试成绩为例，通过Chrome开发者工具可以得到考试成绩的原始请求和返回的数据，返回的数据是JSON，这里用Google Gson包去解析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">String getExamMark = <span class="string">"http://210.26.111.34/result/stqryResult/view.do"</span>;</div><div class="line">HttpUriRequest postExamMark = RequestBuilder.post().setUri(<span class="keyword">new</span> URI(getExamMark))</div><div class="line">                        .build();</div><div class="line"></div><div class="line">CloseableHttpResponse response = httpclient.execute(postExamMark);</div><div class="line">HttpEntity entity = response.getEntity();</div><div class="line">String json = EntityUtils.toString(entity);</div><div class="line">EntityUtils.consume(entity);</div><div class="line"></div><div class="line">Gson gson = <span class="keyword">new</span> Gson();</div><div class="line"></div><div class="line">JsonObject jo = gson.fromJson(json, JsonObject.class);</div></pre></td></tr></table></figure><p>输出结果得到如下信息：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;"footer":[&#123;"FE_CU_CREDIT":"&lt;b&gt;0&lt;/b&gt;",</div><div class="line">"FE_CU_YEAR":"副修学分:",</div><div class="line">"FE_CU_NAME":"主修学分:[总分&lt;b&gt;&lt;/b&gt;,必修&lt;b&gt;&lt;/b&gt;]"&#125;],</div><div class="line">"rows":[&#123;"FE_CU_NAME":"HTML5与JAVASCRIPT",</div><div class="line">"FE_CU_YEAR":"2016秋季",</div><div class="line">"FE_CU_CREDIT":"3",</div><div class="line">"FE_SR_USUAL1":86,</div><div class="line">...省略若干字</div></pre></td></tr></table></figure></p><p>成功！</p><p>爬虫刚入门，不足之处欢迎大家批评指正。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这是voidAlex原创的第二篇博文。&lt;br&gt;源码在&lt;a href=&quot;https://github.com/voidAlex/NWNU_Crawler&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;我的GitHub&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="https://voidalex.one/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Java" scheme="https://voidalex.one/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>使用PageRank算法计算球队排名</title>
    <link href="https://voidalex.one/2017/07/08/%E4%BD%BF%E7%94%A8PageRank%E7%AE%97%E6%B3%95%E8%AE%A1%E7%AE%97%E7%90%83%E9%98%9F%E6%8E%92%E5%90%8D/"/>
    <id>https://voidalex.one/2017/07/08/使用PageRank算法计算球队排名/</id>
    <published>2017-07-08T03:27:00.000Z</published>
    <updated>2017-07-14T01:38:41.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是voidAlex原创的第一篇博文。<br>源码在<a href="https://github.com/voidAlex/pagerank" target="_blank" rel="noopener">我的GitHub</a><br><a id="more"></a></p></blockquote><h2 id="PageRank算法"><a href="#PageRank算法" class="headerlink" title="PageRank算法"></a>PageRank算法</h2><p>PageRank算法，又叫佩奇排名。是由Google公司创始人拉里佩奇（Larry Page）发明的一种由搜索引擎根据网页之间相互的超链接计算的技术。</p><p>对于某个互联网网页A来说，该网页PageRank的计算基于以下两个基本假设：</p><blockquote><ul><li>数量假设：在Web图模型中，如果一个页面节点接收到的其他网页指向的入链数量越多，那么这个页面越重要；</li><li>质量假设：指向页面A的入链质量不同，质量高的页面会通过链接向其他页面传递更多的权重。所以越是质量高的页面指向页面A，则页面A越重要。</li></ul></blockquote><p>根据上面的两个假设，PageRank的计算步骤如下：</p><ol><li><p>网页通过链接关系构建起Web图，每个页面设置相同的PageRank值，通过若干轮的计算，会得到每个页面所获得的最终PageRank值。随着每一轮的计算进行，网页当前的PageRank值会不断得到更新。</p></li><li><p>在一轮中更新页面PageRank得分的计算方法：在一轮更新页面PageRank得分的计算中，每个页面将其当前的PageRank值平均分配到本页面包含的出链上，这样每个链接即获得了相应的权值。而每个页面将所有指向本页面的入链所传入的权值求和，即可得到新的PageRank得分。当每个页面都获得了更新后的PageRank值，就完成了一轮PageRank计算。</p></li></ol><h2 id="使用PageRank算法计算球队实力"><a href="#使用PageRank算法计算球队实力" class="headerlink" title="使用PageRank算法计算球队实力"></a>使用PageRank算法计算球队实力</h2><p>将PageRank算法应用到球队中后，球队的PageRank分数的计算依然基于两个假设：</p><blockquote><ul><li>数量假设：比赛中A在其他球队身上取得的分数（战胜或战平）越多，那么这个球队实力越强；</li><li>质量假设：取得积分的对手实力强弱不同，实力强的球队会提供更多的权重。所以A取得战胜或战平的球队实力越强，则球队A越强。</li></ul></blockquote><p>利用以上两个假设，PageRank算法刚开始赋予每个球队相同的重要性得分（PR值），通过迭代递归计算来更新每个球队节点的PageRank得分，直到得分稳定为止。</p><p>假设一个由4支球队组成的足球联赛：A，B，C和D。给定所有球队一个相同的初始PageRank值PR。在第一轮计算中，对于球队A，假设它在对阵B、C、D球队取得的积分分别为P1、P2、P3，那么它的PageRank值将被更新为：</p><p>$$ PR(A) = (PR(B)∙P1+PR(C)∙P2+PR(D)∙P3)/3 $$</p><p>同样的，B、C、D队的PageRank值也将通过此方法更新。在进行若干次迭代后，所有球队的PageRank值将会趋向于稳定，也就是收敛状态。这时所有球队的PageRank值就是它们的最终得分。</p><h2 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h2><p>灵感来源于虎扑的一个<a href="https://bbs.hupu.com/18776888.html" target="_blank" rel="noopener">帖子</a>，里面提到了球队的硬仗能力，或者球队上限。原贴的作者计算了上赛季的英超的PageRank分，自己看了之后比较感兴趣，就实现了一遍。原贴作者提到：</p><blockquote><p><em>一支球队的联赛排名是其硬仗水平与虐菜能力的共同作用，然而由联赛排名决定的欧战资格，尤其是淘汰赛阶段，更看中的却是球队的硬仗水平，即话题区里所谓的球队上限。于是问题来了，是否存在有些球队主要靠虐菜能力进入欧战区，然后面对他国豪强一泻千里，给本国联赛拖了后腿的情况？我试着用PageRank算法来验证这一猜想。</em></p></blockquote><blockquote><p><em>一支球队的PageRank评分都是从其他球队手中抢来的，要知道一支球队的PageRank评分就必须先知道其他球队的评分，这是鸡生蛋蛋生鸡的难题。PageRank算法的做法是给每个队一个初始分数，比如1，然后通过交战记录互相贡献分数，这样每支队的分数都会有变化；再拿这些分数重复一遍计算，每支队的分数又会变化；重复N次后，变化会趋于0（有数学证明），这时的分数就是最终结果。</em></p></blockquote><p>一支球队的所谓硬仗能力或球队上限是比较抽（xuan）象（xue）的东西，PageRank算法可以比较好的量化它。</p><p>本文中计算了本赛季（2016-2017赛季）英超、西甲、NBA各个球队的PageRank值。数据来源于<a href="https://soccer.hupu.com/table/" target="_blank" rel="noopener">虎扑</a>。</p><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><p>核心代码有两部分，PageRank算法和爬虫。</p><h3 id="PageRank算法-1"><a href="#PageRank算法-1" class="headerlink" title="PageRank算法"></a>PageRank算法</h3><p>用PageRank算法计算球队PageRank值比较简单。就是通过大量的交手记录来更新PageRank值。计算方法在第二部分已经说明。</p><p>用爬虫爬取的球队信息和比赛记录存放在文件中。球队信息以JSON的形式存放，比赛结果以文本的形式存放，一行表示一条比赛记录。类似于：</p><blockquote><p>莱加内斯 2-4 皇马</p></blockquote><p>这样的格式。</p><p>首先构造TeamItem类来存放球队信息，该类有两个字段：name和pagerank。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.pagerank.core;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 球队类</div><div class="line"> * Created by 王麟东 on 2017/7/8 0008.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeamItem</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> pagerank;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TeamItem</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.pagerank = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPagerank</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> pagerank;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPagerank</span><span class="params">(<span class="keyword">double</span> pagerank)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.pagerank = pagerank;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后构造MatchResult类来存放比赛结果。在MatchResult类中，有获取比赛结果的方法getWeight。根据比赛结果，返回对应的权重。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.pagerank.core;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 比赛结果类</div><div class="line"> * Created by 王麟东 on 2017/7/8 0008.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MatchResult</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String teamA;</div><div class="line">    <span class="keyword">private</span> String teamB;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> scoreA;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> scoreB;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MatchResult</span><span class="params">(String line)</span> </span>&#123;</div><div class="line">        String temp[] = line.split(<span class="string">"-"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.teamA = temp[<span class="number">0</span>].split(<span class="string">" "</span>)[<span class="number">0</span>];</div><div class="line">        <span class="keyword">this</span>.scoreA = Integer.parseInt(temp[<span class="number">0</span>].split(<span class="string">" "</span>)[<span class="number">1</span>]);</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.teamB = temp[<span class="number">1</span>].split(<span class="string">" "</span>)[<span class="number">1</span>];</div><div class="line">        <span class="keyword">this</span>.scoreB = Integer.parseInt(temp[<span class="number">1</span>].split(<span class="string">" "</span>)[<span class="number">0</span>]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获得权重（比赛结果）</div><div class="line">     * <span class="doctag">@param</span> team 球队名</div><div class="line">     * <span class="doctag">@return</span> 该球队在本条比赛记录中的比赛结果，胜3平1负0，若本条比赛记录中没有这个球队，返回-1</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWeight</span><span class="params">(String team)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> weight = -<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (team.equals(<span class="keyword">this</span>.teamA))&#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.scoreA == <span class="keyword">this</span>.scoreB)&#123;</div><div class="line">                weight = <span class="number">1</span>;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.scoreA &gt; <span class="keyword">this</span>.scoreB)&#123;</div><div class="line">                weight = <span class="number">3</span>;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.scoreA &lt; <span class="keyword">this</span>.scoreB)&#123;</div><div class="line">                weight = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (team.equals(<span class="keyword">this</span>.teamB))&#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.scoreB == <span class="keyword">this</span>.scoreA)&#123;</div><div class="line">                weight = <span class="number">1</span>;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.scoreB &gt; <span class="keyword">this</span>.scoreA)&#123;</div><div class="line">                weight = <span class="number">3</span>;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.scoreB &lt; <span class="keyword">this</span>.scoreA)&#123;</div><div class="line">                weight = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> weight;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在获得比赛权重不为-1的情况下，获得对手球队名</div><div class="line">     * <span class="doctag">@param</span> team 球队名</div><div class="line">     * <span class="doctag">@return</span> 本条比赛记录中的对手球队名</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOtherTeam</span><span class="params">(String team)</span></span>&#123;</div><div class="line">        String otherTeam = <span class="keyword">this</span>.teamA;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (team.equals(<span class="keyword">this</span>.teamA))&#123;</div><div class="line">            otherTeam = <span class="keyword">this</span>.teamB;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> otherTeam;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后是PageRank类。在PageRank类中，构造方法首先将球队信息和比赛结果读取到内存中，并且给每个球队赋初始PageRank值1。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.pagerank.core;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.google.gson.Gson;</div><div class="line"><span class="keyword">import</span> com.google.gson.JsonArray;</div><div class="line"><span class="keyword">import</span> com.google.gson.JsonElement;</div><div class="line"><span class="keyword">import</span> com.google.gson.JsonObject;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by 王麟东 on 2017/7/8 0008.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageRank</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Map&lt;String, TeamItem&gt; teamMap;</div><div class="line">    <span class="keyword">private</span> List&lt;MatchResult&gt; matchResultList;</div><div class="line">    <span class="keyword">private</span> String teamInfopath;</div><div class="line">    <span class="keyword">private</span> String matchResultPath;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> max;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageRank</span><span class="params">(String teamInfopath, String matchResultPath, <span class="keyword">int</span> max)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.teamInfopath = teamInfopath;</div><div class="line">        <span class="keyword">this</span>.matchResultPath = matchResultPath;</div><div class="line">        <span class="keyword">this</span>.max = max;</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化，将球队信息和比赛结果读取到内存</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            BufferedReader teamReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="keyword">new</span> File(<span class="keyword">this</span>.teamInfopath)));</div><div class="line">            Gson gson = <span class="keyword">new</span> Gson();</div><div class="line">            JsonArray jsonArray = gson.fromJson(teamReader.readLine(), JsonArray.class);</div><div class="line">            teamReader.close();</div><div class="line"></div><div class="line">            <span class="keyword">this</span>.teamMap = <span class="keyword">new</span> HashMap&lt;String, TeamItem&gt;();</div><div class="line">            <span class="keyword">for</span> (JsonElement jsonElement : jsonArray)&#123;</div><div class="line">                TeamItem teamItem = <span class="keyword">new</span> TeamItem();</div><div class="line">                teamItem.setName(jsonElement.getAsJsonObject().get(<span class="string">"team"</span>).getAsString());</div><div class="line">                <span class="keyword">this</span>.teamMap.put(teamItem.getName(), teamItem);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            BufferedReader matchReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="keyword">new</span> File(<span class="keyword">this</span>.matchResultPath)));</div><div class="line">            String line = <span class="string">""</span>;</div><div class="line"></div><div class="line">            <span class="keyword">this</span>.matchResultList = <span class="keyword">new</span> ArrayList&lt;MatchResult&gt;();</div><div class="line">            <span class="keyword">while</span> ((line = matchReader.readLine()) != <span class="keyword">null</span>)&#123;</div><div class="line">                MatchResult matchResult = <span class="keyword">new</span> MatchResult(line);</div><div class="line">                <span class="keyword">this</span>.matchResultList.add(matchResult);</div><div class="line">            &#125;</div><div class="line">            matchReader.close();</div><div class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</div><div class="line">            System.out.println(<span class="string">"读取失败"</span>);</div><div class="line">            System.exit(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, TeamItem&gt; <span class="title">getTeamMap</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> teamMap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> max;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>初始化之后，开始递归的计算每个球队的PageRank值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * PageRank算法迭代器</div><div class="line"> * <span class="doctag">@param</span> teamMaps 球队信息</div><div class="line"> * <span class="doctag">@param</span> max 迭代次数</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Iteration</span><span class="params">(Map&lt;String, TeamItem&gt; teamMaps, <span class="keyword">int</span> max)</span></span>&#123;</div><div class="line">    Map&lt;String, TeamItem&gt; tmp = <span class="keyword">new</span> HashMap&lt;String, TeamItem&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (TeamItem teamItem : teamMaps.values())&#123;</div><div class="line">        TeamItem tmpTeam = <span class="keyword">new</span> TeamItem();</div><div class="line">        tmpTeam.setName(teamItem.getName());</div><div class="line">        <span class="keyword">double</span> pagerank = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (MatchResult matchResult : <span class="keyword">this</span>.matchResultList)&#123;</div><div class="line">            <span class="keyword">int</span> weight = matchResult.getWeight(teamItem.getName());</div><div class="line">            <span class="keyword">if</span> (weight != -<span class="number">1</span>)&#123;</div><div class="line">                <span class="keyword">double</span> pr = teamMaps.get(matchResult.getOtherTeam(teamItem.getName())).getPagerank();</div><div class="line">                pagerank += (weight * pr);</div><div class="line">                count ++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        tmpTeam.setPagerank(pagerank / count);</div><div class="line">        tmp.put(tmpTeam.getName(), tmpTeam);</div><div class="line">    &#125;</div><div class="line">    max --;</div><div class="line">    <span class="keyword">this</span>.teamMap = tmp;</div><div class="line">    <span class="keyword">if</span> (max &gt; <span class="number">0</span>)&#123;</div><div class="line">        Iteration(<span class="keyword">this</span>.teamMap, max);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用爬取的数据测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">String team = <span class="string">"nba_team_list.json"</span>;</div><div class="line">String match = <span class="string">"nba_result_list"</span>;</div><div class="line"><span class="keyword">int</span> max = <span class="number">20</span>;</div><div class="line"></div><div class="line">PageRank pageRank = <span class="keyword">new</span> PageRank(team, match, max);</div><div class="line">pageRank.Iteration(pageRank.getTeamMap(), pageRank.getMax());</div><div class="line">pageRank.wirteToFile();</div><div class="line">pageRank.print();</div></pre></td></tr></table></figure></p><p>由于数据量不大，迭代10-20次已经能够达到收敛状态。</p><h3 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h3><p>数据全部来源于虎扑，但是虎扑已经更新到了新赛季（2017-2018赛季）的数据，原来的爬虫失效，所以就不贴出来了。爬取的数据放在我的github。</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>废话不多说，直接上结果。表格中的变化值为相比较原排名的变化程度。</p><h3 id="NBA"><a href="#NBA" class="headerlink" title="NBA"></a>NBA</h3><p>数据为2016-2017赛季常规赛的全部数据。</p><p>东部联盟</p><table><thead><tr><th>球队</th><th>PageRank</th><th>排名</th><th>变化值</th></tr></thead><tbody><tr><td>凯尔特人</td><td>1.9366</td><td>1</td><td>0</td></tr><tr><td>猛龙</td><td>1.8867</td><td>2</td><td>+1</td></tr><tr><td>骑士</td><td>1.8766</td><td>3</td><td>-1</td></tr><tr><td>奇才</td><td>1.7852</td><td>4</td><td>0</td></tr><tr><td>老鹰</td><td>1.6612</td><td>5</td><td>0</td></tr><tr><td>公牛</td><td>1.5974</td><td>6</td><td>+2</td></tr><tr><td>热火</td><td>1.5771</td><td>7</td><td>+2</td></tr><tr><td>雄鹿</td><td>1.5465</td><td>8</td><td>-2</td></tr><tr><td>步行者</td><td>1.5442</td><td>9</td><td>-2</td></tr><tr><td>活塞</td><td>1.3974</td><td>10</td><td>0</td></tr><tr><td>黄蜂</td><td>1.2995</td><td>11</td><td>0</td></tr><tr><td>尼克斯</td><td>1.1173</td><td>12</td><td>0</td></tr><tr><td>魔术</td><td>1.0865</td><td>13</td><td>0</td></tr><tr><td>76人</td><td>1.0001</td><td>14</td><td>0</td></tr><tr><td>篮网</td><td>0.6985</td><td>15</td><td>0</td></tr></tbody></table><p>西部联盟</p><table><thead><tr><th>球队</th><th>PageRank</th><th>排名</th><th>变化值</th></tr></thead><tbody><tr><td>勇士</td><td>2.5695</td><td>1</td><td>0</td></tr><tr><td>马刺</td><td>2.3791</td><td>2</td><td>0</td></tr><tr><td>火箭</td><td>2.0306</td><td>3</td><td>0</td></tr><tr><td>快船</td><td>1.9787</td><td>4</td><td>0</td></tr><tr><td>爵士</td><td>1.8741</td><td>5</td><td>0</td></tr><tr><td>雷霆</td><td>1.7872</td><td>6</td><td>0</td></tr><tr><td>灰熊</td><td>1.7141</td><td>7</td><td>0</td></tr><tr><td>开拓者</td><td>1.5253</td><td>8</td><td>0</td></tr><tr><td>掘金</td><td>1.4822</td><td>9</td><td>0</td></tr><tr><td>小牛</td><td>1.2437</td><td>10</td><td>+1</td></tr><tr><td>鹈鹕</td><td>1.2392</td><td>11</td><td>-1</td></tr><tr><td>国王</td><td>1.1998</td><td>12</td><td>0</td></tr><tr><td>森林狼</td><td>1.1934</td><td>13</td><td>0</td></tr><tr><td>湖人</td><td>1.0070</td><td>14</td><td>0</td></tr><tr><td>太阳</td><td>0.9156</td><td>15</td><td>0</td></tr></tbody></table><h3 id="西甲"><a href="#西甲" class="headerlink" title="西甲"></a>西甲</h3><p>数据为2016-2017赛季西甲联赛的全部数据。</p><table><thead><tr><th>球队</th><th>PageRank</th><th>排名</th><th>变化值</th></tr></thead><tbody><tr><td>巴萨</td><td>2.3323</td><td>1</td><td>+1</td></tr><tr><td>皇马</td><td>2.2955</td><td>2</td><td>-1</td></tr><tr><td>马竞</td><td>1.8039</td><td>3</td><td>0</td></tr><tr><td>塞维利亚</td><td>1.7653</td><td>4</td><td>0</td></tr><tr><td>比利亚雷亚尔</td><td>1.6181</td><td>5</td><td>0</td></tr><tr><td>毕尔巴鄂</td><td>1.4819</td><td>6</td><td>+1</td></tr><tr><td>阿拉维斯</td><td>1.4205</td><td>7</td><td>+2</td></tr><tr><td>皇家社会</td><td>1.3817</td><td>8</td><td>-1</td></tr><tr><td>埃瓦尔</td><td>1.2816</td><td>9</td><td>+1</td></tr><tr><td>西班牙人</td><td>1.2111</td><td>10</td><td>-2</td></tr><tr><td>马拉加</td><td>1.1516</td><td>11</td><td>0</td></tr><tr><td>瓦伦西亚</td><td>1.1018</td><td>12</td><td>0</td></tr><tr><td>塞尔塔</td><td>0.9893</td><td>13</td><td>0</td></tr><tr><td>拉斯帕尔马斯</td><td>0.9532</td><td>14</td><td>0</td></tr><tr><td>拉科鲁尼亚</td><td>0.8892</td><td>15</td><td>+1</td></tr><tr><td>皇家贝蒂斯</td><td>0.8815</td><td>16</td><td>-1</td></tr><tr><td>莱加内斯</td><td>0.7624</td><td>17</td><td>0</td></tr><tr><td>希洪竞技</td><td>0.6651</td><td>18</td><td>0</td></tr><tr><td>格拉纳达</td><td>0.5086</td><td>19</td><td>+1</td></tr><tr><td>奥萨苏纳</td><td>0.4939</td><td>20</td><td>-1</td></tr></tbody></table><h3 id="英超"><a href="#英超" class="headerlink" title="英超"></a>英超</h3><p>数据为2016-2017赛季英超联赛的全部数据。</p><table><thead><tr><th>球队</th><th>PageRank</th><th>排名</th><th>变化值</th></tr></thead><tbody><tr><td>切尔西</td><td>5.3667</td><td>1</td><td>0</td></tr><tr><td>热刺</td><td>4.9594</td><td>2</td><td>0</td></tr><tr><td>利物浦</td><td>4.7785</td><td>3</td><td>+1</td></tr><tr><td>曼城</td><td>4.2577</td><td>4</td><td>-1</td></tr><tr><td>阿森纳</td><td>4.1272</td><td>5</td><td>0</td></tr><tr><td>曼联</td><td>3.9255</td><td>6</td><td>0</td></tr><tr><td>埃弗顿</td><td>3.3458</td><td>7</td><td>0</td></tr><tr><td>伯恩茅斯</td><td>2.6264</td><td>8</td><td>+1</td></tr><tr><td>莱斯特</td><td>2.5141</td><td>9</td><td>+3</td></tr><tr><td>南安普顿</td><td>2.4357</td><td>10</td><td>-2</td></tr><tr><td>西汉姆联</td><td>2.4165</td><td>11</td><td>0</td></tr><tr><td>水晶宫</td><td>2.4097</td><td>12</td><td>+2</td></tr><tr><td>西布朗</td><td>2.3787</td><td>13</td><td>+3</td></tr><tr><td>斯旺西</td><td>2.3119</td><td>14</td><td>+1</td></tr><tr><td>伯恩利</td><td>2.2320</td><td>15</td><td>+1</td></tr><tr><td>沃特福德</td><td>2.2083</td><td>16</td><td>+1</td></tr><tr><td>斯托克城</td><td>2.1396</td><td>17</td><td>-4</td></tr><tr><td>胡尔城</td><td>1.9424</td><td>18</td><td>0</td></tr><tr><td>米德尔斯堡</td><td>1.4478</td><td>19</td><td>0</td></tr><tr><td>桑德兰</td><td>1.3255</td><td>20</td><td>0</td></tr></tbody></table><p>至于结果能看出来什么信息，大家就见仁见智了。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这是voidAlex原创的第一篇博文。&lt;br&gt;源码在&lt;a href=&quot;https://github.com/voidAlex/pagerank&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;我的GitHub&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://voidalex.one/tags/Java/"/>
    
      <category term="数据挖掘" scheme="https://voidalex.one/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
      <category term="足球" scheme="https://voidalex.one/tags/%E8%B6%B3%E7%90%83/"/>
    
      <category term="算法" scheme="https://voidalex.one/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://voidalex.one/2017/03/02/hello-world/"/>
    <id>https://voidalex.one/2017/03/02/hello-world/</id>
    <published>2017-03-02T07:33:50.000Z</published>
    <updated>2017-07-08T03:24:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>你好，世界。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;你好，世界。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="随笔" scheme="https://voidalex.one/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
